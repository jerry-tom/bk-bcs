// Code generated by protoc-gen-go.
// source: accessserver.proto
// DO NOT EDIT!

/*
Package accessserver is a generated protocol buffer package.

It is generated from these files:
	accessserver.proto

It has these top-level messages:
	CreateBusinessReq
	CreateBusinessResp
	QueryBusinessReq
	QueryBusinessResp
	QueryBusinessListReq
	QueryBusinessListResp
	UpdateBusinessReq
	UpdateBusinessResp
	CreateAppReq
	CreateAppResp
	QueryAppReq
	QueryAppResp
	QueryAppListReq
	QueryAppListResp
	UpdateAppReq
	UpdateAppResp
	DeleteAppReq
	DeleteAppResp
	CreateClusterReq
	CreateClusterResp
	QueryClusterReq
	QueryClusterResp
	QueryClusterListReq
	QueryClusterListResp
	UpdateClusterReq
	UpdateClusterResp
	DeleteClusterReq
	DeleteClusterResp
	CreateZoneReq
	CreateZoneResp
	QueryZoneReq
	QueryZoneResp
	QueryZoneListReq
	QueryZoneListResp
	UpdateZoneReq
	UpdateZoneResp
	DeleteZoneReq
	DeleteZoneResp
	CreateConfigSetReq
	CreateConfigSetResp
	QueryConfigSetReq
	QueryConfigSetResp
	QueryConfigSetListReq
	QueryConfigSetListResp
	UpdateConfigSetReq
	UpdateConfigSetResp
	DeleteConfigSetReq
	DeleteConfigSetResp
	LockConfigSetReq
	LockConfigSetResp
	UnlockConfigSetReq
	UnlockConfigSetResp
	QueryConfigsReq
	QueryConfigsResp
	QueryConfigsListReq
	QueryConfigsListResp
	QueryReleaseConfigsReq
	QueryReleaseConfigsResp
	CreateCommitReq
	CreateCommitResp
	QueryCommitReq
	QueryCommitResp
	QueryHistoryCommitsReq
	QueryHistoryCommitsResp
	UpdateCommitReq
	UpdateCommitResp
	CancelCommitReq
	CancelCommitResp
	ConfirmCommitReq
	ConfirmCommitResp
	PreviewCommitReq
	PreviewCommitResp
	CreateMultiCommitReq
	CreateMultiCommitResp
	QueryMultiCommitReq
	QueryMultiCommitResp
	QueryHistoryMultiCommitsReq
	QueryHistoryMultiCommitsResp
	UpdateMultiCommitReq
	UpdateMultiCommitResp
	CancelMultiCommitReq
	CancelMultiCommitResp
	ConfirmMultiCommitReq
	ConfirmMultiCommitResp
	CreateReleaseReq
	CreateReleaseResp
	QueryReleaseReq
	QueryReleaseResp
	QueryHistoryReleasesReq
	QueryHistoryReleasesResp
	UpdateReleaseReq
	UpdateReleaseResp
	CancelReleaseReq
	CancelReleaseResp
	PublishReleaseReq
	PublishReleaseResp
	RollbackReleaseReq
	RollbackReleaseResp
	CreateMultiReleaseReq
	CreateMultiReleaseResp
	QueryMultiReleaseReq
	QueryMultiReleaseResp
	QueryHistoryMultiReleasesReq
	QueryHistoryMultiReleasesResp
	UpdateMultiReleaseReq
	UpdateMultiReleaseResp
	CancelMultiReleaseReq
	CancelMultiReleaseResp
	PublishMultiReleaseReq
	PublishMultiReleaseResp
	RollbackMultiReleaseReq
	RollbackMultiReleaseResp
	QueryHistoryAppInstancesReq
	QueryHistoryAppInstancesResp
	QueryReachableAppInstancesReq
	QueryReachableAppInstancesResp
	QueryMatchedAppInstancesReq
	QueryMatchedAppInstancesResp
	QueryEffectedAppInstancesReq
	QueryEffectedAppInstancesResp
	QueryAppInstanceReleaseReq
	QueryAppInstanceReleaseResp
	CreateStrategyReq
	CreateStrategyResp
	QueryStrategyReq
	QueryStrategyResp
	QueryStrategyListReq
	QueryStrategyListResp
	DeleteStrategyReq
	DeleteStrategyResp
	CreateShardingDBReq
	CreateShardingDBResp
	QueryShardingDBReq
	QueryShardingDBResp
	QueryShardingDBListReq
	QueryShardingDBListResp
	UpdateShardingDBReq
	UpdateShardingDBResp
	CreateShardingReq
	CreateShardingResp
	QueryShardingReq
	QueryShardingResp
	UpdateShardingReq
	UpdateShardingResp
	QueryAuditListReq
	QueryAuditListResp
	PreviewRenderingReq
	PreviewRenderingResp
	IntegrateReq
	IntegrateResp
	CreateConfigTemplateSetReq
	CreateConfigTemplateSetResp
	DeleteConfigTemplateSetReq
	DeleteConfigTemplateSetResp
	UpdateConfigTemplateSetReq
	UpdateConfigTemplateSetResp
	QueryConfigTemplateSetReq
	QueryConfigTemplateSetResp
	QueryConfigTemplateSetListReq
	QueryConfigTemplateSetListResp
	CreateConfigTemplateReq
	CreateConfigTemplateResp
	DeleteConfigTemplateReq
	DeleteConfigTemplateResp
	UpdateConfigTemplateReq
	UpdateConfigTemplateResp
	QueryConfigTemplateReq
	QueryConfigTemplateResp
	QueryConfigTemplateListReq
	QueryConfigTemplateListResp
	CreateTemplateVersionReq
	CreateTemplateVersionResp
	DeleteTemplateVersionReq
	DeleteTemplateVersionResp
	UpdateTemplateVersionReq
	UpdateTemplateVersionResp
	QueryTemplateVersionReq
	QueryTemplateVersionResp
	QueryTemplateVersionListReq
	QueryTemplateVersionListResp
	CreateConfigTemplateBindingReq
	CreateConfigTemplateBindingResp
	DeleteConfigTemplateBindingReq
	DeleteConfigTemplateBindingResp
	SyncConfigTemplateBindingReq
	SyncConfigTemplateBindingResp
	QueryConfigTemplateBindingReq
	QueryConfigTemplateBindingResp
	QueryConfigTemplateBindingListReq
	QueryConfigTemplateBindingListResp
	CreateVariableReq
	CreateVariableResp
	UpdateVariableReq
	UpdateVariableResp
	DeleteVariableReq
	DeleteVariableResp
	QueryVariableReq
	QueryVariableResp
	QueryVariableListReq
	QueryVariableListResp
*/
package accessserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bk-bscp/internal/protocol/common"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateBusinessReq struct {
	Seq     uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Depid   string `protobuf:"bytes,3,opt,name=depid" json:"depid,omitempty"`
	Dbid    string `protobuf:"bytes,4,opt,name=dbid" json:"dbid,omitempty"`
	Dbname  string `protobuf:"bytes,5,opt,name=dbname" json:"dbname,omitempty"`
	Creator string `protobuf:"bytes,6,opt,name=creator" json:"creator,omitempty"`
	Memo    string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	// add fields here.
	Auth string `protobuf:"bytes,8,opt,name=auth" json:"auth,omitempty"`
}

func (m *CreateBusinessReq) Reset()                    { *m = CreateBusinessReq{} }
func (m *CreateBusinessReq) String() string            { return proto.CompactTextString(m) }
func (*CreateBusinessReq) ProtoMessage()               {}
func (*CreateBusinessReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateBusinessReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateBusinessReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateBusinessReq) GetDepid() string {
	if m != nil {
		return m.Depid
	}
	return ""
}

func (m *CreateBusinessReq) GetDbid() string {
	if m != nil {
		return m.Dbid
	}
	return ""
}

func (m *CreateBusinessReq) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *CreateBusinessReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateBusinessReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateBusinessReq) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type CreateBusinessResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Bid     string         `protobuf:"bytes,4,opt,name=bid" json:"bid,omitempty"`
}

func (m *CreateBusinessResp) Reset()                    { *m = CreateBusinessResp{} }
func (m *CreateBusinessResp) String() string            { return proto.CompactTextString(m) }
func (*CreateBusinessResp) ProtoMessage()               {}
func (*CreateBusinessResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateBusinessResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateBusinessResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateBusinessResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateBusinessResp) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

type QueryBusinessReq struct {
	Seq  uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid  string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *QueryBusinessReq) Reset()                    { *m = QueryBusinessReq{} }
func (m *QueryBusinessReq) String() string            { return proto.CompactTextString(m) }
func (*QueryBusinessReq) ProtoMessage()               {}
func (*QueryBusinessReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryBusinessReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryBusinessReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryBusinessReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryBusinessResp struct {
	Seq      uint64           `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode   `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string           `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Business *common.Business `protobuf:"bytes,4,opt,name=business" json:"business,omitempty"`
}

func (m *QueryBusinessResp) Reset()                    { *m = QueryBusinessResp{} }
func (m *QueryBusinessResp) String() string            { return proto.CompactTextString(m) }
func (*QueryBusinessResp) ProtoMessage()               {}
func (*QueryBusinessResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryBusinessResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryBusinessResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryBusinessResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryBusinessResp) GetBusiness() *common.Business {
	if m != nil {
		return m.Business
	}
	return nil
}

type QueryBusinessListReq struct {
	Seq   uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Index int32  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Limit int32  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryBusinessListReq) Reset()                    { *m = QueryBusinessListReq{} }
func (m *QueryBusinessListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryBusinessListReq) ProtoMessage()               {}
func (*QueryBusinessListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QueryBusinessListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryBusinessListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryBusinessListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryBusinessListResp struct {
	Seq        uint64             `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode    common.ErrCode     `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg     string             `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Businesses []*common.Business `protobuf:"bytes,4,rep,name=businesses" json:"businesses,omitempty"`
}

func (m *QueryBusinessListResp) Reset()                    { *m = QueryBusinessListResp{} }
func (m *QueryBusinessListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryBusinessListResp) ProtoMessage()               {}
func (*QueryBusinessListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueryBusinessListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryBusinessListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryBusinessListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryBusinessListResp) GetBusinesses() []*common.Business {
	if m != nil {
		return m.Businesses
	}
	return nil
}

type UpdateBusinessReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Depid    string `protobuf:"bytes,4,opt,name=depid" json:"depid,omitempty"`
	Memo     string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	State    int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
	Operator string `protobuf:"bytes,7,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateBusinessReq) Reset()                    { *m = UpdateBusinessReq{} }
func (m *UpdateBusinessReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateBusinessReq) ProtoMessage()               {}
func (*UpdateBusinessReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateBusinessReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateBusinessReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateBusinessReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateBusinessReq) GetDepid() string {
	if m != nil {
		return m.Depid
	}
	return ""
}

func (m *UpdateBusinessReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateBusinessReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpdateBusinessReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateBusinessResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateBusinessResp) Reset()                    { *m = UpdateBusinessResp{} }
func (m *UpdateBusinessResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateBusinessResp) ProtoMessage()               {}
func (*UpdateBusinessResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateBusinessResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateBusinessResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateBusinessResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateAppReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DeployType int32  `protobuf:"varint,4,opt,name=deployType" json:"deployType,omitempty"`
	Creator    string `protobuf:"bytes,5,opt,name=creator" json:"creator,omitempty"`
	Memo       string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateAppReq) Reset()                    { *m = CreateAppReq{} }
func (m *CreateAppReq) String() string            { return proto.CompactTextString(m) }
func (*CreateAppReq) ProtoMessage()               {}
func (*CreateAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateAppReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateAppReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateAppReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateAppReq) GetDeployType() int32 {
	if m != nil {
		return m.DeployType
	}
	return 0
}

func (m *CreateAppReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateAppReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateAppResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Appid   string         `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty"`
}

func (m *CreateAppResp) Reset()                    { *m = CreateAppResp{} }
func (m *CreateAppResp) String() string            { return proto.CompactTextString(m) }
func (*CreateAppResp) ProtoMessage()               {}
func (*CreateAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateAppResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateAppResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateAppResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateAppResp) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

type QueryAppReq struct {
	Seq   uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid   string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Name  string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *QueryAppReq) Reset()                    { *m = QueryAppReq{} }
func (m *QueryAppReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppReq) ProtoMessage()               {}
func (*QueryAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *QueryAppReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryAppReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryAppReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryAppResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	App     *common.App    `protobuf:"bytes,4,opt,name=app" json:"app,omitempty"`
}

func (m *QueryAppResp) Reset()                    { *m = QueryAppResp{} }
func (m *QueryAppResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppResp) ProtoMessage()               {}
func (*QueryAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *QueryAppResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryAppResp) GetApp() *common.App {
	if m != nil {
		return m.App
	}
	return nil
}

type QueryAppListReq struct {
	Seq   uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid   string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Index int32  `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Limit int32  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryAppListReq) Reset()                    { *m = QueryAppListReq{} }
func (m *QueryAppListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppListReq) ProtoMessage()               {}
func (*QueryAppListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *QueryAppListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryAppListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryAppListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryAppListResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Apps    []*common.App  `protobuf:"bytes,4,rep,name=apps" json:"apps,omitempty"`
}

func (m *QueryAppListResp) Reset()                    { *m = QueryAppListResp{} }
func (m *QueryAppListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppListResp) ProtoMessage()               {}
func (*QueryAppListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *QueryAppListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryAppListResp) GetApps() []*common.App {
	if m != nil {
		return m.Apps
	}
	return nil
}

type UpdateAppReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid      string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	DeployType int32  `protobuf:"varint,5,opt,name=deployType" json:"deployType,omitempty"`
	Memo       string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
	State      int32  `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
	Operator   string `protobuf:"bytes,8,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateAppReq) Reset()                    { *m = UpdateAppReq{} }
func (m *UpdateAppReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateAppReq) ProtoMessage()               {}
func (*UpdateAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *UpdateAppReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateAppReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateAppReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *UpdateAppReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateAppReq) GetDeployType() int32 {
	if m != nil {
		return m.DeployType
	}
	return 0
}

func (m *UpdateAppReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateAppReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpdateAppReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateAppResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateAppResp) Reset()                    { *m = UpdateAppResp{} }
func (m *UpdateAppResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateAppResp) ProtoMessage()               {}
func (*UpdateAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *UpdateAppResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateAppResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateAppResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type DeleteAppReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid    string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteAppReq) Reset()                    { *m = DeleteAppReq{} }
func (m *DeleteAppReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteAppReq) ProtoMessage()               {}
func (*DeleteAppReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DeleteAppReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteAppReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *DeleteAppReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *DeleteAppReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteAppResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DeleteAppResp) Reset()                    { *m = DeleteAppResp{} }
func (m *DeleteAppResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteAppResp) ProtoMessage()               {}
func (*DeleteAppResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DeleteAppResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteAppResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *DeleteAppResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateClusterReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Appid      string `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty"`
	RClusterid string `protobuf:"bytes,5,opt,name=rClusterid" json:"rClusterid,omitempty"`
	Creator    string `protobuf:"bytes,6,opt,name=creator" json:"creator,omitempty"`
	Memo       string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	// add fields here.
	Labels string `protobuf:"bytes,8,opt,name=labels" json:"labels,omitempty"`
}

func (m *CreateClusterReq) Reset()                    { *m = CreateClusterReq{} }
func (m *CreateClusterReq) String() string            { return proto.CompactTextString(m) }
func (*CreateClusterReq) ProtoMessage()               {}
func (*CreateClusterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CreateClusterReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateClusterReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateClusterReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateClusterReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateClusterReq) GetRClusterid() string {
	if m != nil {
		return m.RClusterid
	}
	return ""
}

func (m *CreateClusterReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateClusterReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateClusterReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

type CreateClusterResp struct {
	Seq       uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Clusterid string         `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
}

func (m *CreateClusterResp) Reset()                    { *m = CreateClusterResp{} }
func (m *CreateClusterResp) String() string            { return proto.CompactTextString(m) }
func (*CreateClusterResp) ProtoMessage()               {}
func (*CreateClusterResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CreateClusterResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateClusterResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateClusterResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateClusterResp) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

type QueryClusterReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Name      string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	// add fields here.
	Labels string `protobuf:"bytes,6,opt,name=labels" json:"labels,omitempty"`
}

func (m *QueryClusterReq) Reset()                    { *m = QueryClusterReq{} }
func (m *QueryClusterReq) String() string            { return proto.CompactTextString(m) }
func (*QueryClusterReq) ProtoMessage()               {}
func (*QueryClusterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *QueryClusterReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryClusterReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryClusterReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryClusterReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryClusterReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryClusterReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

type QueryClusterResp struct {
	Seq     uint64          `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode  `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string          `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Cluster *common.Cluster `protobuf:"bytes,4,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *QueryClusterResp) Reset()                    { *m = QueryClusterResp{} }
func (m *QueryClusterResp) String() string            { return proto.CompactTextString(m) }
func (*QueryClusterResp) ProtoMessage()               {}
func (*QueryClusterResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *QueryClusterResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryClusterResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryClusterResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryClusterResp) GetCluster() *common.Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type QueryClusterListReq struct {
	Seq     uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid     string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid   string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	AppName string `protobuf:"bytes,4,opt,name=appName" json:"appName,omitempty"`
	Index   int32  `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Limit   int32  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryClusterListReq) Reset()                    { *m = QueryClusterListReq{} }
func (m *QueryClusterListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryClusterListReq) ProtoMessage()               {}
func (*QueryClusterListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *QueryClusterListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryClusterListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryClusterListReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryClusterListReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *QueryClusterListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryClusterListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryClusterListResp struct {
	Seq      uint64            `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode    `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string            `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Clusters []*common.Cluster `protobuf:"bytes,4,rep,name=clusters" json:"clusters,omitempty"`
}

func (m *QueryClusterListResp) Reset()                    { *m = QueryClusterListResp{} }
func (m *QueryClusterListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryClusterListResp) ProtoMessage()               {}
func (*QueryClusterListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *QueryClusterListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryClusterListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryClusterListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryClusterListResp) GetClusters() []*common.Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type UpdateClusterReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Clusterid  string `protobuf:"bytes,3,opt,name=clusterid" json:"clusterid,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	RClusterid string `protobuf:"bytes,5,opt,name=rClusterid" json:"rClusterid,omitempty"`
	Memo       string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
	State      int32  `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
	Operator   string `protobuf:"bytes,8,opt,name=operator" json:"operator,omitempty"`
	// add fields here.
	Labels string `protobuf:"bytes,9,opt,name=labels" json:"labels,omitempty"`
}

func (m *UpdateClusterReq) Reset()                    { *m = UpdateClusterReq{} }
func (m *UpdateClusterReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateClusterReq) ProtoMessage()               {}
func (*UpdateClusterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *UpdateClusterReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateClusterReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateClusterReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *UpdateClusterReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateClusterReq) GetRClusterid() string {
	if m != nil {
		return m.RClusterid
	}
	return ""
}

func (m *UpdateClusterReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateClusterReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpdateClusterReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *UpdateClusterReq) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

type UpdateClusterResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateClusterResp) Reset()                    { *m = UpdateClusterResp{} }
func (m *UpdateClusterResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateClusterResp) ProtoMessage()               {}
func (*UpdateClusterResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *UpdateClusterResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateClusterResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateClusterResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type DeleteClusterReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Clusterid string `protobuf:"bytes,3,opt,name=clusterid" json:"clusterid,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteClusterReq) Reset()                    { *m = DeleteClusterReq{} }
func (m *DeleteClusterReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteClusterReq) ProtoMessage()               {}
func (*DeleteClusterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *DeleteClusterReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteClusterReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *DeleteClusterReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *DeleteClusterReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteClusterResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DeleteClusterResp) Reset()                    { *m = DeleteClusterResp{} }
func (m *DeleteClusterResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteClusterResp) ProtoMessage()               {}
func (*DeleteClusterResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *DeleteClusterResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteClusterResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *DeleteClusterResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateZoneReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Name      string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Creator   string `protobuf:"bytes,6,opt,name=creator" json:"creator,omitempty"`
	Memo      string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateZoneReq) Reset()                    { *m = CreateZoneReq{} }
func (m *CreateZoneReq) String() string            { return proto.CompactTextString(m) }
func (*CreateZoneReq) ProtoMessage()               {}
func (*CreateZoneReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CreateZoneReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateZoneReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateZoneReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateZoneReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *CreateZoneReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateZoneReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateZoneReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateZoneResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Zoneid  string         `protobuf:"bytes,4,opt,name=zoneid" json:"zoneid,omitempty"`
}

func (m *CreateZoneResp) Reset()                    { *m = CreateZoneResp{} }
func (m *CreateZoneResp) String() string            { return proto.CompactTextString(m) }
func (*CreateZoneResp) ProtoMessage()               {}
func (*CreateZoneResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *CreateZoneResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateZoneResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateZoneResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateZoneResp) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

type QueryZoneReq struct {
	Seq    uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid    string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid  string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Zoneid string `protobuf:"bytes,4,opt,name=zoneid" json:"zoneid,omitempty"`
	Name   string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (m *QueryZoneReq) Reset()                    { *m = QueryZoneReq{} }
func (m *QueryZoneReq) String() string            { return proto.CompactTextString(m) }
func (*QueryZoneReq) ProtoMessage()               {}
func (*QueryZoneReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *QueryZoneReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryZoneReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryZoneReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryZoneReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *QueryZoneReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryZoneResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Zone    *common.Zone   `protobuf:"bytes,4,opt,name=zone" json:"zone,omitempty"`
}

func (m *QueryZoneResp) Reset()                    { *m = QueryZoneResp{} }
func (m *QueryZoneResp) String() string            { return proto.CompactTextString(m) }
func (*QueryZoneResp) ProtoMessage()               {}
func (*QueryZoneResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *QueryZoneResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryZoneResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryZoneResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryZoneResp) GetZone() *common.Zone {
	if m != nil {
		return m.Zone
	}
	return nil
}

type QueryZoneListReq struct {
	Seq         uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid         string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid       string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	ClusterName string `protobuf:"bytes,4,opt,name=clusterName" json:"clusterName,omitempty"`
	Clusterid   string `protobuf:"bytes,5,opt,name=clusterid" json:"clusterid,omitempty"`
	Index       int32  `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
	Limit       int32  `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
	// add fields here.
	ClusterLabels string `protobuf:"bytes,8,opt,name=clusterLabels" json:"clusterLabels,omitempty"`
}

func (m *QueryZoneListReq) Reset()                    { *m = QueryZoneListReq{} }
func (m *QueryZoneListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryZoneListReq) ProtoMessage()               {}
func (*QueryZoneListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *QueryZoneListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryZoneListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryZoneListReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryZoneListReq) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *QueryZoneListReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryZoneListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryZoneListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryZoneListReq) GetClusterLabels() string {
	if m != nil {
		return m.ClusterLabels
	}
	return ""
}

type QueryZoneListResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Zones   []*common.Zone `protobuf:"bytes,4,rep,name=zones" json:"zones,omitempty"`
}

func (m *QueryZoneListResp) Reset()                    { *m = QueryZoneListResp{} }
func (m *QueryZoneListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryZoneListResp) ProtoMessage()               {}
func (*QueryZoneListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *QueryZoneListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryZoneListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryZoneListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryZoneListResp) GetZones() []*common.Zone {
	if m != nil {
		return m.Zones
	}
	return nil
}

type UpdateZoneReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Zoneid   string `protobuf:"bytes,3,opt,name=zoneid" json:"zoneid,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo     string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	State    int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
	Operator string `protobuf:"bytes,7,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateZoneReq) Reset()                    { *m = UpdateZoneReq{} }
func (m *UpdateZoneReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateZoneReq) ProtoMessage()               {}
func (*UpdateZoneReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *UpdateZoneReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateZoneReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateZoneReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *UpdateZoneReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateZoneReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateZoneReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpdateZoneReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateZoneResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateZoneResp) Reset()                    { *m = UpdateZoneResp{} }
func (m *UpdateZoneResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateZoneResp) ProtoMessage()               {}
func (*UpdateZoneResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *UpdateZoneResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateZoneResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateZoneResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type DeleteZoneReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Zoneid   string `protobuf:"bytes,3,opt,name=zoneid" json:"zoneid,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteZoneReq) Reset()                    { *m = DeleteZoneReq{} }
func (m *DeleteZoneReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteZoneReq) ProtoMessage()               {}
func (*DeleteZoneReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *DeleteZoneReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteZoneReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *DeleteZoneReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *DeleteZoneReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteZoneResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DeleteZoneResp) Reset()                    { *m = DeleteZoneResp{} }
func (m *DeleteZoneResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteZoneResp) ProtoMessage()               {}
func (*DeleteZoneResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *DeleteZoneResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteZoneResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *DeleteZoneResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateConfigSetReq struct {
	Seq     uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid     string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid   string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Name    string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Creator string `protobuf:"bytes,5,opt,name=creator" json:"creator,omitempty"`
	Memo    string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
	// add fields here.
	Fpath string `protobuf:"bytes,7,opt,name=fpath" json:"fpath,omitempty"`
}

func (m *CreateConfigSetReq) Reset()                    { *m = CreateConfigSetReq{} }
func (m *CreateConfigSetReq) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigSetReq) ProtoMessage()               {}
func (*CreateConfigSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *CreateConfigSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateConfigSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateConfigSetReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateConfigSetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateConfigSetReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateConfigSetReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateConfigSetReq) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

type CreateConfigSetResp struct {
	Seq      uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Cfgsetid string         `protobuf:"bytes,4,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
}

func (m *CreateConfigSetResp) Reset()                    { *m = CreateConfigSetResp{} }
func (m *CreateConfigSetResp) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigSetResp) ProtoMessage()               {}
func (*CreateConfigSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *CreateConfigSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateConfigSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateConfigSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateConfigSetResp) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

type QueryConfigSetReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid    string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Cfgsetid string `protobuf:"bytes,4,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Name     string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	// add fields here.
	Fpath string `protobuf:"bytes,6,opt,name=fpath" json:"fpath,omitempty"`
}

func (m *QueryConfigSetReq) Reset()                    { *m = QueryConfigSetReq{} }
func (m *QueryConfigSetReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigSetReq) ProtoMessage()               {}
func (*QueryConfigSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *QueryConfigSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryConfigSetReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryConfigSetReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *QueryConfigSetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryConfigSetReq) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

type QueryConfigSetResp struct {
	Seq       uint64            `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode    `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string            `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	ConfigSet *common.ConfigSet `protobuf:"bytes,4,opt,name=configSet" json:"configSet,omitempty"`
}

func (m *QueryConfigSetResp) Reset()                    { *m = QueryConfigSetResp{} }
func (m *QueryConfigSetResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigSetResp) ProtoMessage()               {}
func (*QueryConfigSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *QueryConfigSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryConfigSetResp) GetConfigSet() *common.ConfigSet {
	if m != nil {
		return m.ConfigSet
	}
	return nil
}

type QueryConfigSetListReq struct {
	Seq     uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid     string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid   string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	AppName string `protobuf:"bytes,4,opt,name=appName" json:"appName,omitempty"`
	Index   int32  `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Limit   int32  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryConfigSetListReq) Reset()                    { *m = QueryConfigSetListReq{} }
func (m *QueryConfigSetListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigSetListReq) ProtoMessage()               {}
func (*QueryConfigSetListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *QueryConfigSetListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigSetListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryConfigSetListReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryConfigSetListReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *QueryConfigSetListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryConfigSetListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryConfigSetListResp struct {
	Seq        uint64              `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode    common.ErrCode      `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg     string              `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	ConfigSets []*common.ConfigSet `protobuf:"bytes,4,rep,name=configSets" json:"configSets,omitempty"`
}

func (m *QueryConfigSetListResp) Reset()                    { *m = QueryConfigSetListResp{} }
func (m *QueryConfigSetListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigSetListResp) ProtoMessage()               {}
func (*QueryConfigSetListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *QueryConfigSetListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigSetListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigSetListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryConfigSetListResp) GetConfigSets() []*common.ConfigSet {
	if m != nil {
		return m.ConfigSets
	}
	return nil
}

type UpdateConfigSetReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo     string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	State    int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
	Operator string `protobuf:"bytes,7,opt,name=operator" json:"operator,omitempty"`
	// add fields here.
	Fpath string `protobuf:"bytes,8,opt,name=fpath" json:"fpath,omitempty"`
}

func (m *UpdateConfigSetReq) Reset()                    { *m = UpdateConfigSetReq{} }
func (m *UpdateConfigSetReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigSetReq) ProtoMessage()               {}
func (*UpdateConfigSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *UpdateConfigSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateConfigSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateConfigSetReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *UpdateConfigSetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateConfigSetReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateConfigSetReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpdateConfigSetReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *UpdateConfigSetReq) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

type UpdateConfigSetResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateConfigSetResp) Reset()                    { *m = UpdateConfigSetResp{} }
func (m *UpdateConfigSetResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigSetResp) ProtoMessage()               {}
func (*UpdateConfigSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *UpdateConfigSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateConfigSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateConfigSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type DeleteConfigSetReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteConfigSetReq) Reset()                    { *m = DeleteConfigSetReq{} }
func (m *DeleteConfigSetReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigSetReq) ProtoMessage()               {}
func (*DeleteConfigSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *DeleteConfigSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteConfigSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *DeleteConfigSetReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *DeleteConfigSetReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteConfigSetResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DeleteConfigSetResp) Reset()                    { *m = DeleteConfigSetResp{} }
func (m *DeleteConfigSetResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigSetResp) ProtoMessage()               {}
func (*DeleteConfigSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *DeleteConfigSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteConfigSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *DeleteConfigSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type LockConfigSetReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	Memo     string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
}

func (m *LockConfigSetReq) Reset()                    { *m = LockConfigSetReq{} }
func (m *LockConfigSetReq) String() string            { return proto.CompactTextString(m) }
func (*LockConfigSetReq) ProtoMessage()               {}
func (*LockConfigSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *LockConfigSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *LockConfigSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *LockConfigSetReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *LockConfigSetReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *LockConfigSetReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type LockConfigSetResp struct {
	Seq      uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Locker   string         `protobuf:"bytes,4,opt,name=locker" json:"locker,omitempty"`
	LockTime string         `protobuf:"bytes,5,opt,name=lockTime" json:"lockTime,omitempty"`
}

func (m *LockConfigSetResp) Reset()                    { *m = LockConfigSetResp{} }
func (m *LockConfigSetResp) String() string            { return proto.CompactTextString(m) }
func (*LockConfigSetResp) ProtoMessage()               {}
func (*LockConfigSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *LockConfigSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *LockConfigSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *LockConfigSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *LockConfigSetResp) GetLocker() string {
	if m != nil {
		return m.Locker
	}
	return ""
}

func (m *LockConfigSetResp) GetLockTime() string {
	if m != nil {
		return m.LockTime
	}
	return ""
}

type UnlockConfigSetReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *UnlockConfigSetReq) Reset()                    { *m = UnlockConfigSetReq{} }
func (m *UnlockConfigSetReq) String() string            { return proto.CompactTextString(m) }
func (*UnlockConfigSetReq) ProtoMessage()               {}
func (*UnlockConfigSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *UnlockConfigSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UnlockConfigSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UnlockConfigSetReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *UnlockConfigSetReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UnlockConfigSetResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UnlockConfigSetResp) Reset()                    { *m = UnlockConfigSetResp{} }
func (m *UnlockConfigSetResp) String() string            { return proto.CompactTextString(m) }
func (*UnlockConfigSetResp) ProtoMessage()               {}
func (*UnlockConfigSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *UnlockConfigSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UnlockConfigSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UnlockConfigSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryConfigsReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Cfgsetid  string `protobuf:"bytes,6,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Commitid  string `protobuf:"bytes,7,opt,name=commitid" json:"commitid,omitempty"`
	// add fields here.
	Index string `protobuf:"bytes,8,opt,name=index" json:"index,omitempty"`
}

func (m *QueryConfigsReq) Reset()                    { *m = QueryConfigsReq{} }
func (m *QueryConfigsReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigsReq) ProtoMessage()               {}
func (*QueryConfigsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *QueryConfigsReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigsReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryConfigsReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryConfigsReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryConfigsReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *QueryConfigsReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *QueryConfigsReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *QueryConfigsReq) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryConfigsResp struct {
	Seq     uint64          `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode  `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string          `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Configs *common.Configs `protobuf:"bytes,4,opt,name=configs" json:"configs,omitempty"`
}

func (m *QueryConfigsResp) Reset()                    { *m = QueryConfigsResp{} }
func (m *QueryConfigsResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigsResp) ProtoMessage()               {}
func (*QueryConfigsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *QueryConfigsResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigsResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigsResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryConfigsResp) GetConfigs() *common.Configs {
	if m != nil {
		return m.Configs
	}
	return nil
}

type QueryConfigsListReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Commitid string `protobuf:"bytes,4,opt,name=commitid" json:"commitid,omitempty"`
	Index    int32  `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Limit    int32  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryConfigsListReq) Reset()                    { *m = QueryConfigsListReq{} }
func (m *QueryConfigsListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigsListReq) ProtoMessage()               {}
func (*QueryConfigsListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *QueryConfigsListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigsListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryConfigsListReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *QueryConfigsListReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *QueryConfigsListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryConfigsListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryConfigsListResp struct {
	Seq      uint64            `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode    `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string            `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Cfgslist []*common.Configs `protobuf:"bytes,4,rep,name=cfgslist" json:"cfgslist,omitempty"`
}

func (m *QueryConfigsListResp) Reset()                    { *m = QueryConfigsListResp{} }
func (m *QueryConfigsListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigsListResp) ProtoMessage()               {}
func (*QueryConfigsListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *QueryConfigsListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigsListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigsListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryConfigsListResp) GetCfgslist() []*common.Configs {
	if m != nil {
		return m.Cfgslist
	}
	return nil
}

type QueryReleaseConfigsReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Cfgsetid  string `protobuf:"bytes,6,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Commitid  string `protobuf:"bytes,7,opt,name=commitid" json:"commitid,omitempty"`
	Abstract  bool   `protobuf:"varint,8,opt,name=abstract" json:"abstract,omitempty"`
	Index     string `protobuf:"bytes,9,opt,name=index" json:"index,omitempty"`
}

func (m *QueryReleaseConfigsReq) Reset()                    { *m = QueryReleaseConfigsReq{} }
func (m *QueryReleaseConfigsReq) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseConfigsReq) ProtoMessage()               {}
func (*QueryReleaseConfigsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *QueryReleaseConfigsReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryReleaseConfigsReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryReleaseConfigsReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryReleaseConfigsReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryReleaseConfigsReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *QueryReleaseConfigsReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *QueryReleaseConfigsReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *QueryReleaseConfigsReq) GetAbstract() bool {
	if m != nil {
		return m.Abstract
	}
	return false
}

func (m *QueryReleaseConfigsReq) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryReleaseConfigsResp struct {
	Seq     uint64          `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode  `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string          `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Configs *common.Configs `protobuf:"bytes,4,opt,name=configs" json:"configs,omitempty"`
}

func (m *QueryReleaseConfigsResp) Reset()                    { *m = QueryReleaseConfigsResp{} }
func (m *QueryReleaseConfigsResp) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseConfigsResp) ProtoMessage()               {}
func (*QueryReleaseConfigsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *QueryReleaseConfigsResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryReleaseConfigsResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryReleaseConfigsResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryReleaseConfigsResp) GetConfigs() *common.Configs {
	if m != nil {
		return m.Configs
	}
	return nil
}

type CreateCommitReq struct {
	Seq          uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid          string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid        string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Cfgsetid     string `protobuf:"bytes,4,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Op           int32  `protobuf:"varint,5,opt,name=op" json:"op,omitempty"`
	Operator     string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	Templateid   string `protobuf:"bytes,7,opt,name=templateid" json:"templateid,omitempty"`
	Template     string `protobuf:"bytes,8,opt,name=template" json:"template,omitempty"`
	TemplateRule string `protobuf:"bytes,9,opt,name=templateRule" json:"templateRule,omitempty"`
	Configs      []byte `protobuf:"bytes,10,opt,name=configs,proto3" json:"configs,omitempty"`
	Changes      string `protobuf:"bytes,11,opt,name=changes" json:"changes,omitempty"`
	Memo         string `protobuf:"bytes,12,opt,name=memo" json:"memo,omitempty"`
}

func (m *CreateCommitReq) Reset()                    { *m = CreateCommitReq{} }
func (m *CreateCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CreateCommitReq) ProtoMessage()               {}
func (*CreateCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *CreateCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateCommitReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateCommitReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *CreateCommitReq) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *CreateCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *CreateCommitReq) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *CreateCommitReq) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *CreateCommitReq) GetTemplateRule() string {
	if m != nil {
		return m.TemplateRule
	}
	return ""
}

func (m *CreateCommitReq) GetConfigs() []byte {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *CreateCommitReq) GetChanges() string {
	if m != nil {
		return m.Changes
	}
	return ""
}

func (m *CreateCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CreateCommitResp struct {
	Seq      uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Commitid string         `protobuf:"bytes,4,opt,name=commitid" json:"commitid,omitempty"`
}

func (m *CreateCommitResp) Reset()                    { *m = CreateCommitResp{} }
func (m *CreateCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CreateCommitResp) ProtoMessage()               {}
func (*CreateCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *CreateCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateCommitResp) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

type QueryCommitReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Commitid string `protobuf:"bytes,3,opt,name=commitid" json:"commitid,omitempty"`
}

func (m *QueryCommitReq) Reset()                    { *m = QueryCommitReq{} }
func (m *QueryCommitReq) String() string            { return proto.CompactTextString(m) }
func (*QueryCommitReq) ProtoMessage()               {}
func (*QueryCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *QueryCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryCommitReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

type QueryCommitResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Commit  *common.Commit `protobuf:"bytes,4,opt,name=commit" json:"commit,omitempty"`
}

func (m *QueryCommitResp) Reset()                    { *m = QueryCommitResp{} }
func (m *QueryCommitResp) String() string            { return proto.CompactTextString(m) }
func (*QueryCommitResp) ProtoMessage()               {}
func (*QueryCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *QueryCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryCommitResp) GetCommit() *common.Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type QueryHistoryCommitsReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Cfgsetid  string `protobuf:"bytes,4,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Operator  string `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	QueryType int32  `protobuf:"varint,6,opt,name=queryType" json:"queryType,omitempty"`
	Index     int32  `protobuf:"varint,7,opt,name=index" json:"index,omitempty"`
	Limit     int32  `protobuf:"varint,8,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryHistoryCommitsReq) Reset()                    { *m = QueryHistoryCommitsReq{} }
func (m *QueryHistoryCommitsReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryCommitsReq) ProtoMessage()               {}
func (*QueryHistoryCommitsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *QueryHistoryCommitsReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryCommitsReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryCommitsReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryCommitsReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryHistoryCommitsReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryHistoryCommitsResp struct {
	Seq     uint64           `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode   `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string           `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Commits []*common.Commit `protobuf:"bytes,4,rep,name=commits" json:"commits,omitempty"`
}

func (m *QueryHistoryCommitsResp) Reset()                    { *m = QueryHistoryCommitsResp{} }
func (m *QueryHistoryCommitsResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryCommitsResp) ProtoMessage()               {}
func (*QueryHistoryCommitsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *QueryHistoryCommitsResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryCommitsResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryCommitsResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryHistoryCommitsResp) GetCommits() []*common.Commit {
	if m != nil {
		return m.Commits
	}
	return nil
}

type UpdateCommitReq struct {
	Seq          uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid          string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Commitid     string `protobuf:"bytes,3,opt,name=commitid" json:"commitid,omitempty"`
	Templateid   string `protobuf:"bytes,4,opt,name=templateid" json:"templateid,omitempty"`
	Template     string `protobuf:"bytes,5,opt,name=template" json:"template,omitempty"`
	TemplateRule string `protobuf:"bytes,6,opt,name=templateRule" json:"templateRule,omitempty"`
	Configs      []byte `protobuf:"bytes,7,opt,name=configs,proto3" json:"configs,omitempty"`
	Changes      string `protobuf:"bytes,8,opt,name=changes" json:"changes,omitempty"`
	Memo         string `protobuf:"bytes,9,opt,name=memo" json:"memo,omitempty"`
	Operator     string `protobuf:"bytes,10,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateCommitReq) Reset()                    { *m = UpdateCommitReq{} }
func (m *UpdateCommitReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateCommitReq) ProtoMessage()               {}
func (*UpdateCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *UpdateCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateCommitReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *UpdateCommitReq) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *UpdateCommitReq) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *UpdateCommitReq) GetTemplateRule() string {
	if m != nil {
		return m.TemplateRule
	}
	return ""
}

func (m *UpdateCommitReq) GetConfigs() []byte {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *UpdateCommitReq) GetChanges() string {
	if m != nil {
		return m.Changes
	}
	return ""
}

func (m *UpdateCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateCommitResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateCommitResp) Reset()                    { *m = UpdateCommitResp{} }
func (m *UpdateCommitResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateCommitResp) ProtoMessage()               {}
func (*UpdateCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *UpdateCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CancelCommitReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Commitid string `protobuf:"bytes,3,opt,name=commitid" json:"commitid,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *CancelCommitReq) Reset()                    { *m = CancelCommitReq{} }
func (m *CancelCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CancelCommitReq) ProtoMessage()               {}
func (*CancelCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *CancelCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CancelCommitReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *CancelCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type CancelCommitResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CancelCommitResp) Reset()                    { *m = CancelCommitResp{} }
func (m *CancelCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CancelCommitResp) ProtoMessage()               {}
func (*CancelCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *CancelCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CancelCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type ConfirmCommitReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Commitid string `protobuf:"bytes,3,opt,name=commitid" json:"commitid,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *ConfirmCommitReq) Reset()                    { *m = ConfirmCommitReq{} }
func (m *ConfirmCommitReq) String() string            { return proto.CompactTextString(m) }
func (*ConfirmCommitReq) ProtoMessage()               {}
func (*ConfirmCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *ConfirmCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ConfirmCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *ConfirmCommitReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *ConfirmCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type ConfirmCommitResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *ConfirmCommitResp) Reset()                    { *m = ConfirmCommitResp{} }
func (m *ConfirmCommitResp) String() string            { return proto.CompactTextString(m) }
func (*ConfirmCommitResp) ProtoMessage()               {}
func (*ConfirmCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *ConfirmCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ConfirmCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *ConfirmCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type PreviewCommitReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Commitid string `protobuf:"bytes,3,opt,name=commitid" json:"commitid,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *PreviewCommitReq) Reset()                    { *m = PreviewCommitReq{} }
func (m *PreviewCommitReq) String() string            { return proto.CompactTextString(m) }
func (*PreviewCommitReq) ProtoMessage()               {}
func (*PreviewCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *PreviewCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PreviewCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *PreviewCommitReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *PreviewCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type PreviewCommitResp struct {
	Seq      uint64            `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode    `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string            `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Cfgslist []*common.Configs `protobuf:"bytes,4,rep,name=cfgslist" json:"cfgslist,omitempty"`
}

func (m *PreviewCommitResp) Reset()                    { *m = PreviewCommitResp{} }
func (m *PreviewCommitResp) String() string            { return proto.CompactTextString(m) }
func (*PreviewCommitResp) ProtoMessage()               {}
func (*PreviewCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *PreviewCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PreviewCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *PreviewCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *PreviewCommitResp) GetCfgslist() []*common.Configs {
	if m != nil {
		return m.Cfgslist
	}
	return nil
}

type CreateMultiCommitReq struct {
	Seq           uint64                   `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string                   `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid         string                   `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Operator      string                   `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	Memo          string                   `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Metadatas     []*common.CommitMetadata `protobuf:"bytes,6,rep,name=metadatas" json:"metadatas,omitempty"`
	ReuseCommitid string                   `protobuf:"bytes,7,opt,name=reuseCommitid" json:"reuseCommitid,omitempty"`
}

func (m *CreateMultiCommitReq) Reset()                    { *m = CreateMultiCommitReq{} }
func (m *CreateMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiCommitReq) ProtoMessage()               {}
func (*CreateMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *CreateMultiCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateMultiCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateMultiCommitReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateMultiCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *CreateMultiCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateMultiCommitReq) GetMetadatas() []*common.CommitMetadata {
	if m != nil {
		return m.Metadatas
	}
	return nil
}

func (m *CreateMultiCommitReq) GetReuseCommitid() string {
	if m != nil {
		return m.ReuseCommitid
	}
	return ""
}

type CreateMultiCommitResp struct {
	Seq           uint64                 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode       common.ErrCode         `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg        string                 `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	MultiCommitid string                 `protobuf:"bytes,4,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
	SuccCfgsets   []*common.CommitResult `protobuf:"bytes,5,rep,name=succCfgsets" json:"succCfgsets,omitempty"`
	FailCfgsets   []*common.CommitResult `protobuf:"bytes,6,rep,name=failCfgsets" json:"failCfgsets,omitempty"`
}

func (m *CreateMultiCommitResp) Reset()                    { *m = CreateMultiCommitResp{} }
func (m *CreateMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiCommitResp) ProtoMessage()               {}
func (*CreateMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *CreateMultiCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateMultiCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateMultiCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateMultiCommitResp) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

func (m *CreateMultiCommitResp) GetSuccCfgsets() []*common.CommitResult {
	if m != nil {
		return m.SuccCfgsets
	}
	return nil
}

func (m *CreateMultiCommitResp) GetFailCfgsets() []*common.CommitResult {
	if m != nil {
		return m.FailCfgsets
	}
	return nil
}

type QueryMultiCommitReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiCommitid string `protobuf:"bytes,3,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
}

func (m *QueryMultiCommitReq) Reset()                    { *m = QueryMultiCommitReq{} }
func (m *QueryMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiCommitReq) ProtoMessage()               {}
func (*QueryMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *QueryMultiCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMultiCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryMultiCommitReq) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

type QueryMultiCommitResp struct {
	Seq         uint64                   `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode     common.ErrCode           `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg      string                   `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	MultiCommit *common.MultiCommit      `protobuf:"bytes,4,opt,name=multiCommit" json:"multiCommit,omitempty"`
	Metadatas   []*common.CommitMetadata `protobuf:"bytes,5,rep,name=metadatas" json:"metadatas,omitempty"`
}

func (m *QueryMultiCommitResp) Reset()                    { *m = QueryMultiCommitResp{} }
func (m *QueryMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiCommitResp) ProtoMessage()               {}
func (*QueryMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *QueryMultiCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMultiCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryMultiCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryMultiCommitResp) GetMultiCommit() *common.MultiCommit {
	if m != nil {
		return m.MultiCommit
	}
	return nil
}

func (m *QueryMultiCommitResp) GetMetadatas() []*common.CommitMetadata {
	if m != nil {
		return m.Metadatas
	}
	return nil
}

type QueryHistoryMultiCommitsReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	QueryType int32  `protobuf:"varint,5,opt,name=queryType" json:"queryType,omitempty"`
	Index     int32  `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
	Limit     int32  `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryHistoryMultiCommitsReq) Reset()                    { *m = QueryHistoryMultiCommitsReq{} }
func (m *QueryHistoryMultiCommitsReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryMultiCommitsReq) ProtoMessage()               {}
func (*QueryHistoryMultiCommitsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *QueryHistoryMultiCommitsReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryMultiCommitsReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryHistoryMultiCommitsReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryHistoryMultiCommitsReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryMultiCommitsReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryMultiCommitsReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryHistoryMultiCommitsReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryHistoryMultiCommitsResp struct {
	Seq          uint64                `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode      common.ErrCode        `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg       string                `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	MultiCommits []*common.MultiCommit `protobuf:"bytes,4,rep,name=multiCommits" json:"multiCommits,omitempty"`
}

func (m *QueryHistoryMultiCommitsResp) Reset()                    { *m = QueryHistoryMultiCommitsResp{} }
func (m *QueryHistoryMultiCommitsResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryMultiCommitsResp) ProtoMessage()               {}
func (*QueryHistoryMultiCommitsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *QueryHistoryMultiCommitsResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryMultiCommitsResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryMultiCommitsResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryHistoryMultiCommitsResp) GetMultiCommits() []*common.MultiCommit {
	if m != nil {
		return m.MultiCommits
	}
	return nil
}

type UpdateMultiCommitReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiCommitid string `protobuf:"bytes,3,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
	Memo          string `protobuf:"bytes,4,opt,name=memo" json:"memo,omitempty"`
	Operator      string `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateMultiCommitReq) Reset()                    { *m = UpdateMultiCommitReq{} }
func (m *UpdateMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiCommitReq) ProtoMessage()               {}
func (*UpdateMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *UpdateMultiCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateMultiCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateMultiCommitReq) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

func (m *UpdateMultiCommitReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateMultiCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateMultiCommitResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateMultiCommitResp) Reset()                    { *m = UpdateMultiCommitResp{} }
func (m *UpdateMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiCommitResp) ProtoMessage()               {}
func (*UpdateMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *UpdateMultiCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateMultiCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateMultiCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CancelMultiCommitReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiCommitid string `protobuf:"bytes,3,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
	Operator      string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *CancelMultiCommitReq) Reset()                    { *m = CancelMultiCommitReq{} }
func (m *CancelMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiCommitReq) ProtoMessage()               {}
func (*CancelMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *CancelMultiCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelMultiCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CancelMultiCommitReq) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

func (m *CancelMultiCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type CancelMultiCommitResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CancelMultiCommitResp) Reset()                    { *m = CancelMultiCommitResp{} }
func (m *CancelMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiCommitResp) ProtoMessage()               {}
func (*CancelMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *CancelMultiCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelMultiCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CancelMultiCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type ConfirmMultiCommitReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiCommitid string `protobuf:"bytes,3,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
	Operator      string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *ConfirmMultiCommitReq) Reset()                    { *m = ConfirmMultiCommitReq{} }
func (m *ConfirmMultiCommitReq) String() string            { return proto.CompactTextString(m) }
func (*ConfirmMultiCommitReq) ProtoMessage()               {}
func (*ConfirmMultiCommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *ConfirmMultiCommitReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ConfirmMultiCommitReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *ConfirmMultiCommitReq) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

func (m *ConfirmMultiCommitReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type ConfirmMultiCommitResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *ConfirmMultiCommitResp) Reset()                    { *m = ConfirmMultiCommitResp{} }
func (m *ConfirmMultiCommitResp) String() string            { return proto.CompactTextString(m) }
func (*ConfirmMultiCommitResp) ProtoMessage()               {}
func (*ConfirmMultiCommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *ConfirmMultiCommitResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ConfirmMultiCommitResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *ConfirmMultiCommitResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateReleaseReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Commitid   string `protobuf:"bytes,4,opt,name=commitid" json:"commitid,omitempty"`
	Strategyid string `protobuf:"bytes,5,opt,name=strategyid" json:"strategyid,omitempty"`
	Memo       string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
	Creator    string `protobuf:"bytes,7,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateReleaseReq) Reset()                    { *m = CreateReleaseReq{} }
func (m *CreateReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CreateReleaseReq) ProtoMessage()               {}
func (*CreateReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *CreateReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateReleaseReq) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *CreateReleaseReq) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

func (m *CreateReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateReleaseReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateReleaseResp struct {
	Seq       uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Releaseid string         `protobuf:"bytes,4,opt,name=releaseid" json:"releaseid,omitempty"`
}

func (m *CreateReleaseResp) Reset()                    { *m = CreateReleaseResp{} }
func (m *CreateReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CreateReleaseResp) ProtoMessage()               {}
func (*CreateReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *CreateReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateReleaseResp) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

type QueryReleaseReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Releaseid string `protobuf:"bytes,3,opt,name=releaseid" json:"releaseid,omitempty"`
}

func (m *QueryReleaseReq) Reset()                    { *m = QueryReleaseReq{} }
func (m *QueryReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseReq) ProtoMessage()               {}
func (*QueryReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

func (m *QueryReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryReleaseReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

type QueryReleaseResp struct {
	Seq     uint64          `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode  `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string          `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Release *common.Release `protobuf:"bytes,4,opt,name=release" json:"release,omitempty"`
}

func (m *QueryReleaseResp) Reset()                    { *m = QueryReleaseResp{} }
func (m *QueryReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*QueryReleaseResp) ProtoMessage()               {}
func (*QueryReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

func (m *QueryReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryReleaseResp) GetRelease() *common.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

type QueryHistoryReleasesReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid  string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	QueryType int32  `protobuf:"varint,5,opt,name=queryType" json:"queryType,omitempty"`
	Index     int32  `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
	Limit     int32  `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
	// add new fields here.
	OrderType int32 `protobuf:"varint,8,opt,name=orderType" json:"orderType,omitempty"`
}

func (m *QueryHistoryReleasesReq) Reset()                    { *m = QueryHistoryReleasesReq{} }
func (m *QueryHistoryReleasesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryReleasesReq) ProtoMessage()               {}
func (*QueryHistoryReleasesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88} }

func (m *QueryHistoryReleasesReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryReleasesReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryHistoryReleasesReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *QueryHistoryReleasesReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryReleasesReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryReleasesReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryHistoryReleasesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryHistoryReleasesReq) GetOrderType() int32 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

type QueryHistoryReleasesResp struct {
	Seq      uint64            `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode    `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string            `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Releases []*common.Release `protobuf:"bytes,4,rep,name=releases" json:"releases,omitempty"`
}

func (m *QueryHistoryReleasesResp) Reset()                    { *m = QueryHistoryReleasesResp{} }
func (m *QueryHistoryReleasesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryReleasesResp) ProtoMessage()               {}
func (*QueryHistoryReleasesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

func (m *QueryHistoryReleasesResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryReleasesResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryReleasesResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryHistoryReleasesResp) GetReleases() []*common.Release {
	if m != nil {
		return m.Releases
	}
	return nil
}

type UpdateReleaseReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Releaseid string `protobuf:"bytes,3,opt,name=releaseid" json:"releaseid,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo      string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Operator  string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateReleaseReq) Reset()                    { *m = UpdateReleaseReq{} }
func (m *UpdateReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateReleaseReq) ProtoMessage()               {}
func (*UpdateReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

func (m *UpdateReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateReleaseReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *UpdateReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateReleaseResp) Reset()                    { *m = UpdateReleaseResp{} }
func (m *UpdateReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateReleaseResp) ProtoMessage()               {}
func (*UpdateReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

func (m *UpdateReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CancelReleaseReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Releaseid string `protobuf:"bytes,3,opt,name=releaseid" json:"releaseid,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *CancelReleaseReq) Reset()                    { *m = CancelReleaseReq{} }
func (m *CancelReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CancelReleaseReq) ProtoMessage()               {}
func (*CancelReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

func (m *CancelReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CancelReleaseReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *CancelReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type CancelReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CancelReleaseResp) Reset()                    { *m = CancelReleaseResp{} }
func (m *CancelReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CancelReleaseResp) ProtoMessage()               {}
func (*CancelReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93} }

func (m *CancelReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CancelReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type PublishReleaseReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Releaseid string `protobuf:"bytes,3,opt,name=releaseid" json:"releaseid,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *PublishReleaseReq) Reset()                    { *m = PublishReleaseReq{} }
func (m *PublishReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*PublishReleaseReq) ProtoMessage()               {}
func (*PublishReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{94} }

func (m *PublishReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PublishReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *PublishReleaseReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *PublishReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type PublishReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *PublishReleaseResp) Reset()                    { *m = PublishReleaseResp{} }
func (m *PublishReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*PublishReleaseResp) ProtoMessage()               {}
func (*PublishReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95} }

func (m *PublishReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PublishReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *PublishReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type RollbackReleaseReq struct {
	Seq          uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid          string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Releaseid    string `protobuf:"bytes,3,opt,name=releaseid" json:"releaseid,omitempty"`
	NewReleaseid string `protobuf:"bytes,4,opt,name=newReleaseid" json:"newReleaseid,omitempty"`
	Operator     string `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
}

func (m *RollbackReleaseReq) Reset()                    { *m = RollbackReleaseReq{} }
func (m *RollbackReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseReq) ProtoMessage()               {}
func (*RollbackReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{96} }

func (m *RollbackReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RollbackReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *RollbackReleaseReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *RollbackReleaseReq) GetNewReleaseid() string {
	if m != nil {
		return m.NewReleaseid
	}
	return ""
}

func (m *RollbackReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type RollbackReleaseResp struct {
	Seq       uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Releaseid string         `protobuf:"bytes,4,opt,name=releaseid" json:"releaseid,omitempty"`
}

func (m *RollbackReleaseResp) Reset()                    { *m = RollbackReleaseResp{} }
func (m *RollbackReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*RollbackReleaseResp) ProtoMessage()               {}
func (*RollbackReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{97} }

func (m *RollbackReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RollbackReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *RollbackReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *RollbackReleaseResp) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

type CreateMultiReleaseReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid         string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	MultiCommitid string `protobuf:"bytes,5,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
	Strategyid    string `protobuf:"bytes,6,opt,name=strategyid" json:"strategyid,omitempty"`
	Memo          string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	Creator       string `protobuf:"bytes,8,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateMultiReleaseReq) Reset()                    { *m = CreateMultiReleaseReq{} }
func (m *CreateMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiReleaseReq) ProtoMessage()               {}
func (*CreateMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{98} }

func (m *CreateMultiReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateMultiReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateMultiReleaseReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateMultiReleaseResp struct {
	Seq            uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode        common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg         string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	MultiReleaseid string         `protobuf:"bytes,4,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
}

func (m *CreateMultiReleaseResp) Reset()                    { *m = CreateMultiReleaseResp{} }
func (m *CreateMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CreateMultiReleaseResp) ProtoMessage()               {}
func (*CreateMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{99} }

func (m *CreateMultiReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateMultiReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateMultiReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateMultiReleaseResp) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

type QueryMultiReleaseReq struct {
	Seq            uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid            string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiReleaseid string `protobuf:"bytes,3,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
}

func (m *QueryMultiReleaseReq) Reset()                    { *m = QueryMultiReleaseReq{} }
func (m *QueryMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiReleaseReq) ProtoMessage()               {}
func (*QueryMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{100} }

func (m *QueryMultiReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMultiReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryMultiReleaseReq) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

type QueryMultiReleaseResp struct {
	Seq          uint64                    `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode      common.ErrCode            `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg       string                    `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	MultiRelease *common.MultiRelease      `protobuf:"bytes,4,opt,name=multiRelease" json:"multiRelease,omitempty"`
	Metadatas    []*common.ReleaseMetadata `protobuf:"bytes,5,rep,name=metadatas" json:"metadatas,omitempty"`
}

func (m *QueryMultiReleaseResp) Reset()                    { *m = QueryMultiReleaseResp{} }
func (m *QueryMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMultiReleaseResp) ProtoMessage()               {}
func (*QueryMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{101} }

func (m *QueryMultiReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMultiReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryMultiReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryMultiReleaseResp) GetMultiRelease() *common.MultiRelease {
	if m != nil {
		return m.MultiRelease
	}
	return nil
}

func (m *QueryMultiReleaseResp) GetMetadatas() []*common.ReleaseMetadata {
	if m != nil {
		return m.Metadatas
	}
	return nil
}

type QueryHistoryMultiReleasesReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	QueryType int32  `protobuf:"varint,5,opt,name=queryType" json:"queryType,omitempty"`
	OrderType int32  `protobuf:"varint,6,opt,name=orderType" json:"orderType,omitempty"`
	Index     int32  `protobuf:"varint,7,opt,name=index" json:"index,omitempty"`
	Limit     int32  `protobuf:"varint,8,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryHistoryMultiReleasesReq) Reset()                    { *m = QueryHistoryMultiReleasesReq{} }
func (m *QueryHistoryMultiReleasesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryMultiReleasesReq) ProtoMessage()               {}
func (*QueryHistoryMultiReleasesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{102} }

func (m *QueryHistoryMultiReleasesReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryMultiReleasesReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryHistoryMultiReleasesReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryHistoryMultiReleasesReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryHistoryMultiReleasesReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryMultiReleasesReq) GetOrderType() int32 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

func (m *QueryHistoryMultiReleasesReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryHistoryMultiReleasesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryHistoryMultiReleasesResp struct {
	Seq           uint64                 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode       common.ErrCode         `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg        string                 `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	MultiReleases []*common.MultiRelease `protobuf:"bytes,4,rep,name=multiReleases" json:"multiReleases,omitempty"`
}

func (m *QueryHistoryMultiReleasesResp) Reset()                    { *m = QueryHistoryMultiReleasesResp{} }
func (m *QueryHistoryMultiReleasesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryMultiReleasesResp) ProtoMessage()               {}
func (*QueryHistoryMultiReleasesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{103} }

func (m *QueryHistoryMultiReleasesResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryMultiReleasesResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryMultiReleasesResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryHistoryMultiReleasesResp) GetMultiReleases() []*common.MultiRelease {
	if m != nil {
		return m.MultiReleases
	}
	return nil
}

type UpdateMultiReleaseReq struct {
	Seq            uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid            string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiReleaseid string `protobuf:"bytes,3,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
	Name           string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo           string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Operator       string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateMultiReleaseReq) Reset()                    { *m = UpdateMultiReleaseReq{} }
func (m *UpdateMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiReleaseReq) ProtoMessage()               {}
func (*UpdateMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{104} }

func (m *UpdateMultiReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateMultiReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateMultiReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateMultiReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateMultiReleaseResp) Reset()                    { *m = UpdateMultiReleaseResp{} }
func (m *UpdateMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateMultiReleaseResp) ProtoMessage()               {}
func (*UpdateMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{105} }

func (m *UpdateMultiReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateMultiReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateMultiReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CancelMultiReleaseReq struct {
	Seq            uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid            string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiReleaseid string `protobuf:"bytes,3,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
	Operator       string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *CancelMultiReleaseReq) Reset()                    { *m = CancelMultiReleaseReq{} }
func (m *CancelMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiReleaseReq) ProtoMessage()               {}
func (*CancelMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{106} }

func (m *CancelMultiReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelMultiReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CancelMultiReleaseReq) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

func (m *CancelMultiReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type CancelMultiReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CancelMultiReleaseResp) Reset()                    { *m = CancelMultiReleaseResp{} }
func (m *CancelMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*CancelMultiReleaseResp) ProtoMessage()               {}
func (*CancelMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{107} }

func (m *CancelMultiReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CancelMultiReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CancelMultiReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type PublishMultiReleaseReq struct {
	Seq            uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid            string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiReleaseid string `protobuf:"bytes,3,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
	Operator       string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *PublishMultiReleaseReq) Reset()                    { *m = PublishMultiReleaseReq{} }
func (m *PublishMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*PublishMultiReleaseReq) ProtoMessage()               {}
func (*PublishMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{108} }

func (m *PublishMultiReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PublishMultiReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *PublishMultiReleaseReq) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

func (m *PublishMultiReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type PublishMultiReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *PublishMultiReleaseResp) Reset()                    { *m = PublishMultiReleaseResp{} }
func (m *PublishMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*PublishMultiReleaseResp) ProtoMessage()               {}
func (*PublishMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{109} }

func (m *PublishMultiReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PublishMultiReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *PublishMultiReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type RollbackMultiReleaseReq struct {
	Seq            uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid            string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	MultiReleaseid string `protobuf:"bytes,3,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
	Operator       string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *RollbackMultiReleaseReq) Reset()                    { *m = RollbackMultiReleaseReq{} }
func (m *RollbackMultiReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*RollbackMultiReleaseReq) ProtoMessage()               {}
func (*RollbackMultiReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{110} }

func (m *RollbackMultiReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RollbackMultiReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *RollbackMultiReleaseReq) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

func (m *RollbackMultiReleaseReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type RollbackMultiReleaseResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *RollbackMultiReleaseResp) Reset()                    { *m = RollbackMultiReleaseResp{} }
func (m *RollbackMultiReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*RollbackMultiReleaseResp) ProtoMessage()               {}
func (*RollbackMultiReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{111} }

func (m *RollbackMultiReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RollbackMultiReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *RollbackMultiReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryHistoryAppInstancesReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	QueryType int32  `protobuf:"varint,6,opt,name=queryType" json:"queryType,omitempty"`
	Index     int32  `protobuf:"varint,7,opt,name=index" json:"index,omitempty"`
	Limit     int32  `protobuf:"varint,8,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryHistoryAppInstancesReq) Reset()                    { *m = QueryHistoryAppInstancesReq{} }
func (m *QueryHistoryAppInstancesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryAppInstancesReq) ProtoMessage()               {}
func (*QueryHistoryAppInstancesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{112} }

func (m *QueryHistoryAppInstancesReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryAppInstancesReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryHistoryAppInstancesReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryHistoryAppInstancesReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryHistoryAppInstancesReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *QueryHistoryAppInstancesReq) GetQueryType() int32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

func (m *QueryHistoryAppInstancesReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryHistoryAppInstancesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryHistoryAppInstancesResp struct {
	Seq       uint64                `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode        `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string                `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Instances []*common.AppInstance `protobuf:"bytes,4,rep,name=instances" json:"instances,omitempty"`
}

func (m *QueryHistoryAppInstancesResp) Reset()                    { *m = QueryHistoryAppInstancesResp{} }
func (m *QueryHistoryAppInstancesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryHistoryAppInstancesResp) ProtoMessage()               {}
func (*QueryHistoryAppInstancesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{113} }

func (m *QueryHistoryAppInstancesResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryHistoryAppInstancesResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryHistoryAppInstancesResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryHistoryAppInstancesResp) GetInstances() []*common.AppInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type QueryReachableAppInstancesReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Index     int32  `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
	Limit     int32  `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryReachableAppInstancesReq) Reset()                    { *m = QueryReachableAppInstancesReq{} }
func (m *QueryReachableAppInstancesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryReachableAppInstancesReq) ProtoMessage()               {}
func (*QueryReachableAppInstancesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{114} }

func (m *QueryReachableAppInstancesReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryReachableAppInstancesReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryReachableAppInstancesReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryReachableAppInstancesReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryReachableAppInstancesReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *QueryReachableAppInstancesReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryReachableAppInstancesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryReachableAppInstancesResp struct {
	Seq       uint64                `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode        `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string                `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Instances []*common.AppInstance `protobuf:"bytes,4,rep,name=instances" json:"instances,omitempty"`
}

func (m *QueryReachableAppInstancesResp) Reset()         { *m = QueryReachableAppInstancesResp{} }
func (m *QueryReachableAppInstancesResp) String() string { return proto.CompactTextString(m) }
func (*QueryReachableAppInstancesResp) ProtoMessage()    {}
func (*QueryReachableAppInstancesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{115}
}

func (m *QueryReachableAppInstancesResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryReachableAppInstancesResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryReachableAppInstancesResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryReachableAppInstancesResp) GetInstances() []*common.AppInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type QueryMatchedAppInstancesReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Releaseid  string `protobuf:"bytes,3,opt,name=releaseid" json:"releaseid,omitempty"`
	Strategyid string `protobuf:"bytes,4,opt,name=strategyid" json:"strategyid,omitempty"`
	Index      int32  `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Limit      int32  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryMatchedAppInstancesReq) Reset()                    { *m = QueryMatchedAppInstancesReq{} }
func (m *QueryMatchedAppInstancesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryMatchedAppInstancesReq) ProtoMessage()               {}
func (*QueryMatchedAppInstancesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{116} }

func (m *QueryMatchedAppInstancesReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMatchedAppInstancesReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryMatchedAppInstancesReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *QueryMatchedAppInstancesReq) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

func (m *QueryMatchedAppInstancesReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryMatchedAppInstancesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryMatchedAppInstancesResp struct {
	Seq       uint64                `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode        `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string                `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Instances []*common.AppInstance `protobuf:"bytes,4,rep,name=instances" json:"instances,omitempty"`
}

func (m *QueryMatchedAppInstancesResp) Reset()                    { *m = QueryMatchedAppInstancesResp{} }
func (m *QueryMatchedAppInstancesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryMatchedAppInstancesResp) ProtoMessage()               {}
func (*QueryMatchedAppInstancesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{117} }

func (m *QueryMatchedAppInstancesResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryMatchedAppInstancesResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryMatchedAppInstancesResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryMatchedAppInstancesResp) GetInstances() []*common.AppInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type QueryEffectedAppInstancesReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cfgsetid  string `protobuf:"bytes,3,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Releaseid string `protobuf:"bytes,4,opt,name=releaseid" json:"releaseid,omitempty"`
	Index     int32  `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Limit     int32  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryEffectedAppInstancesReq) Reset()                    { *m = QueryEffectedAppInstancesReq{} }
func (m *QueryEffectedAppInstancesReq) String() string            { return proto.CompactTextString(m) }
func (*QueryEffectedAppInstancesReq) ProtoMessage()               {}
func (*QueryEffectedAppInstancesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{118} }

func (m *QueryEffectedAppInstancesReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryEffectedAppInstancesReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryEffectedAppInstancesReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *QueryEffectedAppInstancesReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *QueryEffectedAppInstancesReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryEffectedAppInstancesReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryEffectedAppInstancesResp struct {
	Seq       uint64                `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode        `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string                `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Instances []*common.AppInstance `protobuf:"bytes,4,rep,name=instances" json:"instances,omitempty"`
}

func (m *QueryEffectedAppInstancesResp) Reset()                    { *m = QueryEffectedAppInstancesResp{} }
func (m *QueryEffectedAppInstancesResp) String() string            { return proto.CompactTextString(m) }
func (*QueryEffectedAppInstancesResp) ProtoMessage()               {}
func (*QueryEffectedAppInstancesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{119} }

func (m *QueryEffectedAppInstancesResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryEffectedAppInstancesResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryEffectedAppInstancesResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryEffectedAppInstancesResp) GetInstances() []*common.AppInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type QueryAppInstanceReleaseReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid     string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid    string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Dc        string `protobuf:"bytes,6,opt,name=dc" json:"dc,omitempty"`
	IP        string `protobuf:"bytes,7,opt,name=IP" json:"IP,omitempty"`
	Cfgsetid  string `protobuf:"bytes,8,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
}

func (m *QueryAppInstanceReleaseReq) Reset()                    { *m = QueryAppInstanceReleaseReq{} }
func (m *QueryAppInstanceReleaseReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAppInstanceReleaseReq) ProtoMessage()               {}
func (*QueryAppInstanceReleaseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{120} }

func (m *QueryAppInstanceReleaseReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppInstanceReleaseReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetDc() string {
	if m != nil {
		return m.Dc
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *QueryAppInstanceReleaseReq) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

type QueryAppInstanceReleaseResp struct {
	Seq       uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Releaseid string         `protobuf:"bytes,4,opt,name=releaseid" json:"releaseid,omitempty"`
	Commitid  string         `protobuf:"bytes,5,opt,name=commitid" json:"commitid,omitempty"`
	Cid       string         `protobuf:"bytes,6,opt,name=cid" json:"cid,omitempty"`
	CfgLink   string         `protobuf:"bytes,7,opt,name=cfgLink" json:"cfgLink,omitempty"`
	Content   []byte         `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *QueryAppInstanceReleaseResp) Reset()                    { *m = QueryAppInstanceReleaseResp{} }
func (m *QueryAppInstanceReleaseResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAppInstanceReleaseResp) ProtoMessage()               {}
func (*QueryAppInstanceReleaseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{121} }

func (m *QueryAppInstanceReleaseResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAppInstanceReleaseResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryAppInstanceReleaseResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp) GetCfgLink() string {
	if m != nil {
		return m.CfgLink
	}
	return ""
}

func (m *QueryAppInstanceReleaseResp) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type CreateStrategyReq struct {
	Seq        uint64            `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string            `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid      string            `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Name       string            `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Clusterids []string          `protobuf:"bytes,5,rep,name=clusterids" json:"clusterids,omitempty"`
	Zoneids    []string          `protobuf:"bytes,6,rep,name=zoneids" json:"zoneids,omitempty"`
	Dcs        []string          `protobuf:"bytes,7,rep,name=dcs" json:"dcs,omitempty"`
	IPs        []string          `protobuf:"bytes,8,rep,name=IPs" json:"IPs,omitempty"`
	Labels     map[string]string `protobuf:"bytes,9,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Memo       string            `protobuf:"bytes,10,opt,name=memo" json:"memo,omitempty"`
	Creator    string            `protobuf:"bytes,11,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateStrategyReq) Reset()                    { *m = CreateStrategyReq{} }
func (m *CreateStrategyReq) String() string            { return proto.CompactTextString(m) }
func (*CreateStrategyReq) ProtoMessage()               {}
func (*CreateStrategyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{122} }

func (m *CreateStrategyReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateStrategyReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateStrategyReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateStrategyReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateStrategyReq) GetClusterids() []string {
	if m != nil {
		return m.Clusterids
	}
	return nil
}

func (m *CreateStrategyReq) GetZoneids() []string {
	if m != nil {
		return m.Zoneids
	}
	return nil
}

func (m *CreateStrategyReq) GetDcs() []string {
	if m != nil {
		return m.Dcs
	}
	return nil
}

func (m *CreateStrategyReq) GetIPs() []string {
	if m != nil {
		return m.IPs
	}
	return nil
}

func (m *CreateStrategyReq) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CreateStrategyReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateStrategyReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateStrategyResp struct {
	Seq        uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode    common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg     string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Strategyid string         `protobuf:"bytes,4,opt,name=strategyid" json:"strategyid,omitempty"`
}

func (m *CreateStrategyResp) Reset()                    { *m = CreateStrategyResp{} }
func (m *CreateStrategyResp) String() string            { return proto.CompactTextString(m) }
func (*CreateStrategyResp) ProtoMessage()               {}
func (*CreateStrategyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{123} }

func (m *CreateStrategyResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateStrategyResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateStrategyResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateStrategyResp) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

type QueryStrategyReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid      string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Strategyid string `protobuf:"bytes,4,opt,name=strategyid" json:"strategyid,omitempty"`
	Name       string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (m *QueryStrategyReq) Reset()                    { *m = QueryStrategyReq{} }
func (m *QueryStrategyReq) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyReq) ProtoMessage()               {}
func (*QueryStrategyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{124} }

func (m *QueryStrategyReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryStrategyReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryStrategyReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryStrategyReq) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

func (m *QueryStrategyReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryStrategyResp struct {
	Seq      uint64           `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode   `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string           `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Strategy *common.Strategy `protobuf:"bytes,4,opt,name=strategy" json:"strategy,omitempty"`
}

func (m *QueryStrategyResp) Reset()                    { *m = QueryStrategyResp{} }
func (m *QueryStrategyResp) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyResp) ProtoMessage()               {}
func (*QueryStrategyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{125} }

func (m *QueryStrategyResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryStrategyResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryStrategyResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryStrategyResp) GetStrategy() *common.Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

type QueryStrategyListReq struct {
	Seq     uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid     string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid   string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	AppName string `protobuf:"bytes,4,opt,name=appName" json:"appName,omitempty"`
	Index   int32  `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Limit   int32  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryStrategyListReq) Reset()                    { *m = QueryStrategyListReq{} }
func (m *QueryStrategyListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyListReq) ProtoMessage()               {}
func (*QueryStrategyListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{126} }

func (m *QueryStrategyListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryStrategyListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryStrategyListReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryStrategyListReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *QueryStrategyListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryStrategyListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryStrategyListResp struct {
	Seq        uint64             `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode    common.ErrCode     `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg     string             `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Strategies []*common.Strategy `protobuf:"bytes,4,rep,name=strategies" json:"strategies,omitempty"`
}

func (m *QueryStrategyListResp) Reset()                    { *m = QueryStrategyListResp{} }
func (m *QueryStrategyListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryStrategyListResp) ProtoMessage()               {}
func (*QueryStrategyListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{127} }

func (m *QueryStrategyListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryStrategyListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryStrategyListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryStrategyListResp) GetStrategies() []*common.Strategy {
	if m != nil {
		return m.Strategies
	}
	return nil
}

type DeleteStrategyReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Strategyid string `protobuf:"bytes,3,opt,name=strategyid" json:"strategyid,omitempty"`
	Operator   string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteStrategyReq) Reset()                    { *m = DeleteStrategyReq{} }
func (m *DeleteStrategyReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteStrategyReq) ProtoMessage()               {}
func (*DeleteStrategyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{128} }

func (m *DeleteStrategyReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteStrategyReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *DeleteStrategyReq) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

func (m *DeleteStrategyReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteStrategyResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DeleteStrategyResp) Reset()                    { *m = DeleteStrategyResp{} }
func (m *DeleteStrategyResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteStrategyResp) ProtoMessage()               {}
func (*DeleteStrategyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{129} }

func (m *DeleteStrategyResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteStrategyResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *DeleteStrategyResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateShardingDBReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Dbid     string `protobuf:"bytes,2,opt,name=dbid" json:"dbid,omitempty"`
	Host     string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	Port     int32  `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	User     string `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	Password string `protobuf:"bytes,6,opt,name=password" json:"password,omitempty"`
	Memo     string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	State    int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
}

func (m *CreateShardingDBReq) Reset()                    { *m = CreateShardingDBReq{} }
func (m *CreateShardingDBReq) String() string            { return proto.CompactTextString(m) }
func (*CreateShardingDBReq) ProtoMessage()               {}
func (*CreateShardingDBReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{130} }

func (m *CreateShardingDBReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateShardingDBReq) GetDbid() string {
	if m != nil {
		return m.Dbid
	}
	return ""
}

func (m *CreateShardingDBReq) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *CreateShardingDBReq) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *CreateShardingDBReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CreateShardingDBReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateShardingDBReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateShardingDBReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type CreateShardingDBResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CreateShardingDBResp) Reset()                    { *m = CreateShardingDBResp{} }
func (m *CreateShardingDBResp) String() string            { return proto.CompactTextString(m) }
func (*CreateShardingDBResp) ProtoMessage()               {}
func (*CreateShardingDBResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{131} }

func (m *CreateShardingDBResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateShardingDBResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateShardingDBResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryShardingDBReq struct {
	Seq  uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Dbid string `protobuf:"bytes,2,opt,name=dbid" json:"dbid,omitempty"`
}

func (m *QueryShardingDBReq) Reset()                    { *m = QueryShardingDBReq{} }
func (m *QueryShardingDBReq) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingDBReq) ProtoMessage()               {}
func (*QueryShardingDBReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{132} }

func (m *QueryShardingDBReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryShardingDBReq) GetDbid() string {
	if m != nil {
		return m.Dbid
	}
	return ""
}

type QueryShardingDBResp struct {
	Seq        uint64             `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode    common.ErrCode     `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg     string             `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	ShardingDB *common.ShardingDB `protobuf:"bytes,4,opt,name=shardingDB" json:"shardingDB,omitempty"`
}

func (m *QueryShardingDBResp) Reset()                    { *m = QueryShardingDBResp{} }
func (m *QueryShardingDBResp) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingDBResp) ProtoMessage()               {}
func (*QueryShardingDBResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{133} }

func (m *QueryShardingDBResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryShardingDBResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryShardingDBResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryShardingDBResp) GetShardingDB() *common.ShardingDB {
	if m != nil {
		return m.ShardingDB
	}
	return nil
}

type QueryShardingDBListReq struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *QueryShardingDBListReq) Reset()                    { *m = QueryShardingDBListReq{} }
func (m *QueryShardingDBListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingDBListReq) ProtoMessage()               {}
func (*QueryShardingDBListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{134} }

func (m *QueryShardingDBListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type QueryShardingDBListResp struct {
	Seq         uint64               `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode     common.ErrCode       `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg      string               `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	ShardingDBs []*common.ShardingDB `protobuf:"bytes,4,rep,name=shardingDBs" json:"shardingDBs,omitempty"`
}

func (m *QueryShardingDBListResp) Reset()                    { *m = QueryShardingDBListResp{} }
func (m *QueryShardingDBListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingDBListResp) ProtoMessage()               {}
func (*QueryShardingDBListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{135} }

func (m *QueryShardingDBListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryShardingDBListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryShardingDBListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryShardingDBListResp) GetShardingDBs() []*common.ShardingDB {
	if m != nil {
		return m.ShardingDBs
	}
	return nil
}

type UpdateShardingDBReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Dbid     string `protobuf:"bytes,2,opt,name=dbid" json:"dbid,omitempty"`
	Host     string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	Port     int32  `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	User     string `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	Password string `protobuf:"bytes,6,opt,name=password" json:"password,omitempty"`
	Memo     string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	State    int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
}

func (m *UpdateShardingDBReq) Reset()                    { *m = UpdateShardingDBReq{} }
func (m *UpdateShardingDBReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateShardingDBReq) ProtoMessage()               {}
func (*UpdateShardingDBReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{136} }

func (m *UpdateShardingDBReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateShardingDBReq) GetDbid() string {
	if m != nil {
		return m.Dbid
	}
	return ""
}

func (m *UpdateShardingDBReq) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *UpdateShardingDBReq) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *UpdateShardingDBReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UpdateShardingDBReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UpdateShardingDBReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateShardingDBReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type UpdateShardingDBResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateShardingDBResp) Reset()                    { *m = UpdateShardingDBResp{} }
func (m *UpdateShardingDBResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateShardingDBResp) ProtoMessage()               {}
func (*UpdateShardingDBResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{137} }

func (m *UpdateShardingDBResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateShardingDBResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateShardingDBResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateShardingReq struct {
	Seq    uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Dbid   string `protobuf:"bytes,3,opt,name=dbid" json:"dbid,omitempty"`
	Dbname string `protobuf:"bytes,4,opt,name=dbname" json:"dbname,omitempty"`
	Memo   string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	State  int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
}

func (m *CreateShardingReq) Reset()                    { *m = CreateShardingReq{} }
func (m *CreateShardingReq) String() string            { return proto.CompactTextString(m) }
func (*CreateShardingReq) ProtoMessage()               {}
func (*CreateShardingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{138} }

func (m *CreateShardingReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateShardingReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CreateShardingReq) GetDbid() string {
	if m != nil {
		return m.Dbid
	}
	return ""
}

func (m *CreateShardingReq) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *CreateShardingReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateShardingReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type CreateShardingResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *CreateShardingResp) Reset()                    { *m = CreateShardingResp{} }
func (m *CreateShardingResp) String() string            { return proto.CompactTextString(m) }
func (*CreateShardingResp) ProtoMessage()               {}
func (*CreateShardingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{139} }

func (m *CreateShardingResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateShardingResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateShardingResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryShardingReq struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *QueryShardingReq) Reset()                    { *m = QueryShardingReq{} }
func (m *QueryShardingReq) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingReq) ProtoMessage()               {}
func (*QueryShardingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{140} }

func (m *QueryShardingReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryShardingReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type QueryShardingResp struct {
	Seq      uint64           `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode   `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string           `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Sharding *common.Sharding `protobuf:"bytes,4,opt,name=sharding" json:"sharding,omitempty"`
}

func (m *QueryShardingResp) Reset()                    { *m = QueryShardingResp{} }
func (m *QueryShardingResp) String() string            { return proto.CompactTextString(m) }
func (*QueryShardingResp) ProtoMessage()               {}
func (*QueryShardingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{141} }

func (m *QueryShardingResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryShardingResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryShardingResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryShardingResp) GetSharding() *common.Sharding {
	if m != nil {
		return m.Sharding
	}
	return nil
}

type UpdateShardingReq struct {
	Seq    uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Dbid   string `protobuf:"bytes,3,opt,name=dbid" json:"dbid,omitempty"`
	Dbname string `protobuf:"bytes,4,opt,name=dbname" json:"dbname,omitempty"`
	Memo   string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	State  int32  `protobuf:"varint,6,opt,name=state" json:"state,omitempty"`
}

func (m *UpdateShardingReq) Reset()                    { *m = UpdateShardingReq{} }
func (m *UpdateShardingReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateShardingReq) ProtoMessage()               {}
func (*UpdateShardingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{142} }

func (m *UpdateShardingReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateShardingReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UpdateShardingReq) GetDbid() string {
	if m != nil {
		return m.Dbid
	}
	return ""
}

func (m *UpdateShardingReq) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *UpdateShardingReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateShardingReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type UpdateShardingResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateShardingResp) Reset()                    { *m = UpdateShardingResp{} }
func (m *UpdateShardingResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateShardingResp) ProtoMessage()               {}
func (*UpdateShardingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{143} }

func (m *UpdateShardingResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateShardingResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateShardingResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryAuditListReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	SourceType int32  `protobuf:"varint,3,opt,name=sourceType" json:"sourceType,omitempty"`
	OpType     int32  `protobuf:"varint,4,opt,name=opType" json:"opType,omitempty"`
	Sourceid   string `protobuf:"bytes,5,opt,name=sourceid" json:"sourceid,omitempty"`
	Operator   string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	Index      int32  `protobuf:"varint,7,opt,name=index" json:"index,omitempty"`
	Limit      int32  `protobuf:"varint,8,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryAuditListReq) Reset()                    { *m = QueryAuditListReq{} }
func (m *QueryAuditListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryAuditListReq) ProtoMessage()               {}
func (*QueryAuditListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{144} }

func (m *QueryAuditListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAuditListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryAuditListReq) GetSourceType() int32 {
	if m != nil {
		return m.SourceType
	}
	return 0
}

func (m *QueryAuditListReq) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func (m *QueryAuditListReq) GetSourceid() string {
	if m != nil {
		return m.Sourceid
	}
	return ""
}

func (m *QueryAuditListReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryAuditListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryAuditListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryAuditListResp struct {
	Seq     uint64          `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode  `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string          `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Audits  []*common.Audit `protobuf:"bytes,4,rep,name=audits" json:"audits,omitempty"`
}

func (m *QueryAuditListResp) Reset()                    { *m = QueryAuditListResp{} }
func (m *QueryAuditListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryAuditListResp) ProtoMessage()               {}
func (*QueryAuditListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{145} }

func (m *QueryAuditListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryAuditListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryAuditListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryAuditListResp) GetAudits() []*common.Audit {
	if m != nil {
		return m.Audits
	}
	return nil
}

type PreviewRenderingReq struct {
	Seq          uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid          string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid        string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Template     string `protobuf:"bytes,4,opt,name=template" json:"template,omitempty"`
	TemplateRule string `protobuf:"bytes,5,opt,name=templateRule" json:"templateRule,omitempty"`
}

func (m *PreviewRenderingReq) Reset()                    { *m = PreviewRenderingReq{} }
func (m *PreviewRenderingReq) String() string            { return proto.CompactTextString(m) }
func (*PreviewRenderingReq) ProtoMessage()               {}
func (*PreviewRenderingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{146} }

func (m *PreviewRenderingReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PreviewRenderingReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *PreviewRenderingReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *PreviewRenderingReq) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *PreviewRenderingReq) GetTemplateRule() string {
	if m != nil {
		return m.TemplateRule
	}
	return ""
}

type PreviewRenderingResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Content []byte         `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *PreviewRenderingResp) Reset()                    { *m = PreviewRenderingResp{} }
func (m *PreviewRenderingResp) String() string            { return proto.CompactTextString(m) }
func (*PreviewRenderingResp) ProtoMessage()               {}
func (*PreviewRenderingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{147} }

func (m *PreviewRenderingResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PreviewRenderingResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *PreviewRenderingResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *PreviewRenderingResp) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type IntegrateReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Metadata string `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
	Operator string `protobuf:"bytes,3,opt,name=operator" json:"operator,omitempty"`
}

func (m *IntegrateReq) Reset()                    { *m = IntegrateReq{} }
func (m *IntegrateReq) String() string            { return proto.CompactTextString(m) }
func (*IntegrateReq) ProtoMessage()               {}
func (*IntegrateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{148} }

func (m *IntegrateReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *IntegrateReq) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *IntegrateReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type IntegrateResp struct {
	Seq        uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode    common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg     string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Bid        string         `protobuf:"bytes,4,opt,name=bid" json:"bid,omitempty"`
	Appid      string         `protobuf:"bytes,5,opt,name=appid" json:"appid,omitempty"`
	Clusterid  string         `protobuf:"bytes,6,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid     string         `protobuf:"bytes,7,opt,name=zoneid" json:"zoneid,omitempty"`
	Cfgsetid   string         `protobuf:"bytes,8,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Commitid   string         `protobuf:"bytes,9,opt,name=commitid" json:"commitid,omitempty"`
	Strategyid string         `protobuf:"bytes,10,opt,name=strategyid" json:"strategyid,omitempty"`
	Releaseid  string         `protobuf:"bytes,11,opt,name=releaseid" json:"releaseid,omitempty"`
	Locker     string         `protobuf:"bytes,12,opt,name=locker" json:"locker,omitempty"`
	LockTime   string         `protobuf:"bytes,13,opt,name=lockTime" json:"lockTime,omitempty"`
}

func (m *IntegrateResp) Reset()                    { *m = IntegrateResp{} }
func (m *IntegrateResp) String() string            { return proto.CompactTextString(m) }
func (*IntegrateResp) ProtoMessage()               {}
func (*IntegrateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{149} }

func (m *IntegrateResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *IntegrateResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *IntegrateResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *IntegrateResp) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *IntegrateResp) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *IntegrateResp) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *IntegrateResp) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *IntegrateResp) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *IntegrateResp) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *IntegrateResp) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

func (m *IntegrateResp) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *IntegrateResp) GetLocker() string {
	if m != nil {
		return m.Locker
	}
	return ""
}

func (m *IntegrateResp) GetLockTime() string {
	if m != nil {
		return m.LockTime
	}
	return ""
}

type CreateConfigTemplateSetReq struct {
	Seq     uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid     string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Memo    string `protobuf:"bytes,4,opt,name=memo" json:"memo,omitempty"`
	Fpath   string `protobuf:"bytes,5,opt,name=fpath" json:"fpath,omitempty"`
	Creator string `protobuf:"bytes,6,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateConfigTemplateSetReq) Reset()                    { *m = CreateConfigTemplateSetReq{} }
func (m *CreateConfigTemplateSetReq) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigTemplateSetReq) ProtoMessage()               {}
func (*CreateConfigTemplateSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{150} }

func (m *CreateConfigTemplateSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateConfigTemplateSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateConfigTemplateSetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateConfigTemplateSetReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateConfigTemplateSetReq) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

func (m *CreateConfigTemplateSetReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateConfigTemplateSetResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Setid   string         `protobuf:"bytes,4,opt,name=setid" json:"setid,omitempty"`
}

func (m *CreateConfigTemplateSetResp) Reset()                    { *m = CreateConfigTemplateSetResp{} }
func (m *CreateConfigTemplateSetResp) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigTemplateSetResp) ProtoMessage()               {}
func (*CreateConfigTemplateSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{151} }

func (m *CreateConfigTemplateSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateConfigTemplateSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateConfigTemplateSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateConfigTemplateSetResp) GetSetid() string {
	if m != nil {
		return m.Setid
	}
	return ""
}

type DeleteConfigTemplateSetReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Setid    string `protobuf:"bytes,3,opt,name=setid" json:"setid,omitempty"`
	Operator string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteConfigTemplateSetReq) Reset()                    { *m = DeleteConfigTemplateSetReq{} }
func (m *DeleteConfigTemplateSetReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigTemplateSetReq) ProtoMessage()               {}
func (*DeleteConfigTemplateSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{152} }

func (m *DeleteConfigTemplateSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteConfigTemplateSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *DeleteConfigTemplateSetReq) GetSetid() string {
	if m != nil {
		return m.Setid
	}
	return ""
}

func (m *DeleteConfigTemplateSetReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteConfigTemplateSetResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DeleteConfigTemplateSetResp) Reset()                    { *m = DeleteConfigTemplateSetResp{} }
func (m *DeleteConfigTemplateSetResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigTemplateSetResp) ProtoMessage()               {}
func (*DeleteConfigTemplateSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{153} }

func (m *DeleteConfigTemplateSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteConfigTemplateSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *DeleteConfigTemplateSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type UpdateConfigTemplateSetReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Setid    string `protobuf:"bytes,3,opt,name=setid" json:"setid,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo     string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Operator string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateConfigTemplateSetReq) Reset()                    { *m = UpdateConfigTemplateSetReq{} }
func (m *UpdateConfigTemplateSetReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigTemplateSetReq) ProtoMessage()               {}
func (*UpdateConfigTemplateSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{154} }

func (m *UpdateConfigTemplateSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateConfigTemplateSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateConfigTemplateSetReq) GetSetid() string {
	if m != nil {
		return m.Setid
	}
	return ""
}

func (m *UpdateConfigTemplateSetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateConfigTemplateSetReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateConfigTemplateSetReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateConfigTemplateSetResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateConfigTemplateSetResp) Reset()                    { *m = UpdateConfigTemplateSetResp{} }
func (m *UpdateConfigTemplateSetResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigTemplateSetResp) ProtoMessage()               {}
func (*UpdateConfigTemplateSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{155} }

func (m *UpdateConfigTemplateSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateConfigTemplateSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateConfigTemplateSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryConfigTemplateSetReq struct {
	Seq   uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid   string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Setid string `protobuf:"bytes,3,opt,name=setid" json:"setid,omitempty"`
}

func (m *QueryConfigTemplateSetReq) Reset()                    { *m = QueryConfigTemplateSetReq{} }
func (m *QueryConfigTemplateSetReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateSetReq) ProtoMessage()               {}
func (*QueryConfigTemplateSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{156} }

func (m *QueryConfigTemplateSetReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigTemplateSetReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryConfigTemplateSetReq) GetSetid() string {
	if m != nil {
		return m.Setid
	}
	return ""
}

type QueryConfigTemplateSetResp struct {
	Seq         uint64                    `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode     common.ErrCode            `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg      string                    `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	TemplateSet *common.ConfigTemplateSet `protobuf:"bytes,4,opt,name=templateSet" json:"templateSet,omitempty"`
}

func (m *QueryConfigTemplateSetResp) Reset()                    { *m = QueryConfigTemplateSetResp{} }
func (m *QueryConfigTemplateSetResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateSetResp) ProtoMessage()               {}
func (*QueryConfigTemplateSetResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{157} }

func (m *QueryConfigTemplateSetResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigTemplateSetResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigTemplateSetResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryConfigTemplateSetResp) GetTemplateSet() *common.ConfigTemplateSet {
	if m != nil {
		return m.TemplateSet
	}
	return nil
}

type QueryConfigTemplateSetListReq struct {
	Seq   uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid   string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Index int32  `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Limit int32  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryConfigTemplateSetListReq) Reset()                    { *m = QueryConfigTemplateSetListReq{} }
func (m *QueryConfigTemplateSetListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateSetListReq) ProtoMessage()               {}
func (*QueryConfigTemplateSetListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{158} }

func (m *QueryConfigTemplateSetListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigTemplateSetListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryConfigTemplateSetListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryConfigTemplateSetListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryConfigTemplateSetListResp struct {
	Seq          uint64                      `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode      common.ErrCode              `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg       string                      `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	TemplateSets []*common.ConfigTemplateSet `protobuf:"bytes,4,rep,name=templateSets" json:"templateSets,omitempty"`
}

func (m *QueryConfigTemplateSetListResp) Reset()         { *m = QueryConfigTemplateSetListResp{} }
func (m *QueryConfigTemplateSetListResp) String() string { return proto.CompactTextString(m) }
func (*QueryConfigTemplateSetListResp) ProtoMessage()    {}
func (*QueryConfigTemplateSetListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{159}
}

func (m *QueryConfigTemplateSetListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigTemplateSetListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigTemplateSetListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryConfigTemplateSetListResp) GetTemplateSets() []*common.ConfigTemplateSet {
	if m != nil {
		return m.TemplateSets
	}
	return nil
}

type CreateConfigTemplateReq struct {
	Seq          uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid          string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Setid        string `protobuf:"bytes,3,opt,name=setid" json:"setid,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo         string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	User         string `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	Group        string `protobuf:"bytes,7,opt,name=group" json:"group,omitempty"`
	Permission   int32  `protobuf:"varint,8,opt,name=permission" json:"permission,omitempty"`
	FileEncoding string `protobuf:"bytes,9,opt,name=fileEncoding" json:"fileEncoding,omitempty"`
	EngineType   int32  `protobuf:"varint,10,opt,name=engineType" json:"engineType,omitempty"`
	Creator      string `protobuf:"bytes,11,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateConfigTemplateReq) Reset()                    { *m = CreateConfigTemplateReq{} }
func (m *CreateConfigTemplateReq) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigTemplateReq) ProtoMessage()               {}
func (*CreateConfigTemplateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{160} }

func (m *CreateConfigTemplateReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateConfigTemplateReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetSetid() string {
	if m != nil {
		return m.Setid
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetPermission() int32 {
	if m != nil {
		return m.Permission
	}
	return 0
}

func (m *CreateConfigTemplateReq) GetFileEncoding() string {
	if m != nil {
		return m.FileEncoding
	}
	return ""
}

func (m *CreateConfigTemplateReq) GetEngineType() int32 {
	if m != nil {
		return m.EngineType
	}
	return 0
}

func (m *CreateConfigTemplateReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateConfigTemplateResp struct {
	Seq        uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode    common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg     string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Templateid string         `protobuf:"bytes,4,opt,name=templateid" json:"templateid,omitempty"`
}

func (m *CreateConfigTemplateResp) Reset()                    { *m = CreateConfigTemplateResp{} }
func (m *CreateConfigTemplateResp) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigTemplateResp) ProtoMessage()               {}
func (*CreateConfigTemplateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{161} }

func (m *CreateConfigTemplateResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateConfigTemplateResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateConfigTemplateResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateConfigTemplateResp) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

type DeleteConfigTemplateReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Templateid string `protobuf:"bytes,3,opt,name=templateid" json:"templateid,omitempty"`
	Operator   string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteConfigTemplateReq) Reset()                    { *m = DeleteConfigTemplateReq{} }
func (m *DeleteConfigTemplateReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigTemplateReq) ProtoMessage()               {}
func (*DeleteConfigTemplateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{162} }

func (m *DeleteConfigTemplateReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteConfigTemplateReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *DeleteConfigTemplateReq) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *DeleteConfigTemplateReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteConfigTemplateResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DeleteConfigTemplateResp) Reset()                    { *m = DeleteConfigTemplateResp{} }
func (m *DeleteConfigTemplateResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigTemplateResp) ProtoMessage()               {}
func (*DeleteConfigTemplateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{163} }

func (m *DeleteConfigTemplateResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteConfigTemplateResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *DeleteConfigTemplateResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type UpdateConfigTemplateReq struct {
	Seq          uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid          string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Templateid   string `protobuf:"bytes,3,opt,name=templateid" json:"templateid,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo         string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	User         string `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	Group        string `protobuf:"bytes,7,opt,name=group" json:"group,omitempty"`
	Permission   int32  `protobuf:"varint,8,opt,name=permission" json:"permission,omitempty"`
	FileEncoding string `protobuf:"bytes,9,opt,name=fileEncoding" json:"fileEncoding,omitempty"`
	Operator     string `protobuf:"bytes,10,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateConfigTemplateReq) Reset()                    { *m = UpdateConfigTemplateReq{} }
func (m *UpdateConfigTemplateReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigTemplateReq) ProtoMessage()               {}
func (*UpdateConfigTemplateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{164} }

func (m *UpdateConfigTemplateReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateConfigTemplateReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetPermission() int32 {
	if m != nil {
		return m.Permission
	}
	return 0
}

func (m *UpdateConfigTemplateReq) GetFileEncoding() string {
	if m != nil {
		return m.FileEncoding
	}
	return ""
}

func (m *UpdateConfigTemplateReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateConfigTemplateResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateConfigTemplateResp) Reset()                    { *m = UpdateConfigTemplateResp{} }
func (m *UpdateConfigTemplateResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigTemplateResp) ProtoMessage()               {}
func (*UpdateConfigTemplateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{165} }

func (m *UpdateConfigTemplateResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateConfigTemplateResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateConfigTemplateResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryConfigTemplateReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Templateid string `protobuf:"bytes,3,opt,name=templateid" json:"templateid,omitempty"`
}

func (m *QueryConfigTemplateReq) Reset()                    { *m = QueryConfigTemplateReq{} }
func (m *QueryConfigTemplateReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateReq) ProtoMessage()               {}
func (*QueryConfigTemplateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{166} }

func (m *QueryConfigTemplateReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigTemplateReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryConfigTemplateReq) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

type QueryConfigTemplateResp struct {
	Seq            uint64                 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode        common.ErrCode         `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg         string                 `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	ConfigTemplate *common.ConfigTemplate `protobuf:"bytes,4,opt,name=configTemplate" json:"configTemplate,omitempty"`
}

func (m *QueryConfigTemplateResp) Reset()                    { *m = QueryConfigTemplateResp{} }
func (m *QueryConfigTemplateResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateResp) ProtoMessage()               {}
func (*QueryConfigTemplateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{167} }

func (m *QueryConfigTemplateResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigTemplateResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigTemplateResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryConfigTemplateResp) GetConfigTemplate() *common.ConfigTemplate {
	if m != nil {
		return m.ConfigTemplate
	}
	return nil
}

type QueryConfigTemplateListReq struct {
	Seq   uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid   string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Setid string `protobuf:"bytes,3,opt,name=setid" json:"setid,omitempty"`
	Index int32  `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
	Limit int32  `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryConfigTemplateListReq) Reset()                    { *m = QueryConfigTemplateListReq{} }
func (m *QueryConfigTemplateListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateListReq) ProtoMessage()               {}
func (*QueryConfigTemplateListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{168} }

func (m *QueryConfigTemplateListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigTemplateListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryConfigTemplateListReq) GetSetid() string {
	if m != nil {
		return m.Setid
	}
	return ""
}

func (m *QueryConfigTemplateListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryConfigTemplateListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryConfigTemplateListResp struct {
	Seq             uint64                   `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode         common.ErrCode           `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg          string                   `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	ConfigTemplates []*common.ConfigTemplate `protobuf:"bytes,4,rep,name=configTemplates" json:"configTemplates,omitempty"`
}

func (m *QueryConfigTemplateListResp) Reset()                    { *m = QueryConfigTemplateListResp{} }
func (m *QueryConfigTemplateListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateListResp) ProtoMessage()               {}
func (*QueryConfigTemplateListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{169} }

func (m *QueryConfigTemplateListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigTemplateListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigTemplateListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryConfigTemplateListResp) GetConfigTemplates() []*common.ConfigTemplate {
	if m != nil {
		return m.ConfigTemplates
	}
	return nil
}

type CreateTemplateVersionReq struct {
	Seq         uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid         string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Templateid  string `protobuf:"bytes,3,opt,name=templateid" json:"templateid,omitempty"`
	VersionName string `protobuf:"bytes,4,opt,name=versionName" json:"versionName,omitempty"`
	Memo        string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Creator     string `protobuf:"bytes,6,opt,name=creator" json:"creator,omitempty"`
	Content     string `protobuf:"bytes,7,opt,name=content" json:"content,omitempty"`
}

func (m *CreateTemplateVersionReq) Reset()                    { *m = CreateTemplateVersionReq{} }
func (m *CreateTemplateVersionReq) String() string            { return proto.CompactTextString(m) }
func (*CreateTemplateVersionReq) ProtoMessage()               {}
func (*CreateTemplateVersionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{170} }

func (m *CreateTemplateVersionReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateTemplateVersionReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateTemplateVersionReq) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *CreateTemplateVersionReq) GetVersionName() string {
	if m != nil {
		return m.VersionName
	}
	return ""
}

func (m *CreateTemplateVersionReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateTemplateVersionReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CreateTemplateVersionReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type CreateTemplateVersionResp struct {
	Seq       uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode   common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg    string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Versionid string         `protobuf:"bytes,4,opt,name=versionid" json:"versionid,omitempty"`
}

func (m *CreateTemplateVersionResp) Reset()                    { *m = CreateTemplateVersionResp{} }
func (m *CreateTemplateVersionResp) String() string            { return proto.CompactTextString(m) }
func (*CreateTemplateVersionResp) ProtoMessage()               {}
func (*CreateTemplateVersionResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{171} }

func (m *CreateTemplateVersionResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateTemplateVersionResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateTemplateVersionResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateTemplateVersionResp) GetVersionid() string {
	if m != nil {
		return m.Versionid
	}
	return ""
}

type DeleteTemplateVersionReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Versionid string `protobuf:"bytes,3,opt,name=versionid" json:"versionid,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteTemplateVersionReq) Reset()                    { *m = DeleteTemplateVersionReq{} }
func (m *DeleteTemplateVersionReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteTemplateVersionReq) ProtoMessage()               {}
func (*DeleteTemplateVersionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{172} }

func (m *DeleteTemplateVersionReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteTemplateVersionReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *DeleteTemplateVersionReq) GetVersionid() string {
	if m != nil {
		return m.Versionid
	}
	return ""
}

func (m *DeleteTemplateVersionReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteTemplateVersionResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DeleteTemplateVersionResp) Reset()                    { *m = DeleteTemplateVersionResp{} }
func (m *DeleteTemplateVersionResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteTemplateVersionResp) ProtoMessage()               {}
func (*DeleteTemplateVersionResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{173} }

func (m *DeleteTemplateVersionResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteTemplateVersionResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *DeleteTemplateVersionResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type UpdateTemplateVersionReq struct {
	Seq         uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid         string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Versionid   string `protobuf:"bytes,3,opt,name=versionid" json:"versionid,omitempty"`
	VersionName string `protobuf:"bytes,4,opt,name=versionName" json:"versionName,omitempty"`
	Memo        string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Operator    string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	Content     string `protobuf:"bytes,7,opt,name=content" json:"content,omitempty"`
}

func (m *UpdateTemplateVersionReq) Reset()                    { *m = UpdateTemplateVersionReq{} }
func (m *UpdateTemplateVersionReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateTemplateVersionReq) ProtoMessage()               {}
func (*UpdateTemplateVersionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{174} }

func (m *UpdateTemplateVersionReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateTemplateVersionReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateTemplateVersionReq) GetVersionid() string {
	if m != nil {
		return m.Versionid
	}
	return ""
}

func (m *UpdateTemplateVersionReq) GetVersionName() string {
	if m != nil {
		return m.VersionName
	}
	return ""
}

func (m *UpdateTemplateVersionReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateTemplateVersionReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *UpdateTemplateVersionReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type UpdateTemplateVersionResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateTemplateVersionResp) Reset()                    { *m = UpdateTemplateVersionResp{} }
func (m *UpdateTemplateVersionResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateTemplateVersionResp) ProtoMessage()               {}
func (*UpdateTemplateVersionResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{175} }

func (m *UpdateTemplateVersionResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateTemplateVersionResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateTemplateVersionResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryTemplateVersionReq struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid       string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Versionid string `protobuf:"bytes,4,opt,name=versionid" json:"versionid,omitempty"`
}

func (m *QueryTemplateVersionReq) Reset()                    { *m = QueryTemplateVersionReq{} }
func (m *QueryTemplateVersionReq) String() string            { return proto.CompactTextString(m) }
func (*QueryTemplateVersionReq) ProtoMessage()               {}
func (*QueryTemplateVersionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{176} }

func (m *QueryTemplateVersionReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryTemplateVersionReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryTemplateVersionReq) GetVersionid() string {
	if m != nil {
		return m.Versionid
	}
	return ""
}

type QueryTemplateVersionResp struct {
	Seq             uint64                  `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode         common.ErrCode          `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg          string                  `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	TemplateVersion *common.TemplateVersion `protobuf:"bytes,4,opt,name=templateVersion" json:"templateVersion,omitempty"`
}

func (m *QueryTemplateVersionResp) Reset()                    { *m = QueryTemplateVersionResp{} }
func (m *QueryTemplateVersionResp) String() string            { return proto.CompactTextString(m) }
func (*QueryTemplateVersionResp) ProtoMessage()               {}
func (*QueryTemplateVersionResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{177} }

func (m *QueryTemplateVersionResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryTemplateVersionResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryTemplateVersionResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryTemplateVersionResp) GetTemplateVersion() *common.TemplateVersion {
	if m != nil {
		return m.TemplateVersion
	}
	return nil
}

type QueryTemplateVersionListReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Templateid string `protobuf:"bytes,3,opt,name=templateid" json:"templateid,omitempty"`
	Index      int32  `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
	Limit      int32  `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryTemplateVersionListReq) Reset()                    { *m = QueryTemplateVersionListReq{} }
func (m *QueryTemplateVersionListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryTemplateVersionListReq) ProtoMessage()               {}
func (*QueryTemplateVersionListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{178} }

func (m *QueryTemplateVersionListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryTemplateVersionListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryTemplateVersionListReq) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *QueryTemplateVersionListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryTemplateVersionListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryTemplateVersionListResp struct {
	Seq              uint64                    `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode          common.ErrCode            `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg           string                    `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	TemplateVersions []*common.TemplateVersion `protobuf:"bytes,4,rep,name=templateVersions" json:"templateVersions,omitempty"`
}

func (m *QueryTemplateVersionListResp) Reset()                    { *m = QueryTemplateVersionListResp{} }
func (m *QueryTemplateVersionListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryTemplateVersionListResp) ProtoMessage()               {}
func (*QueryTemplateVersionListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{179} }

func (m *QueryTemplateVersionListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryTemplateVersionListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryTemplateVersionListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryTemplateVersionListResp) GetTemplateVersions() []*common.TemplateVersion {
	if m != nil {
		return m.TemplateVersions
	}
	return nil
}

type CreateConfigTemplateBindingReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Templateid    string `protobuf:"bytes,3,opt,name=templateid" json:"templateid,omitempty"`
	Appid         string `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty"`
	Versionid     string `protobuf:"bytes,5,opt,name=versionid" json:"versionid,omitempty"`
	BindingParams string `protobuf:"bytes,6,opt,name=bindingParams" json:"bindingParams,omitempty"`
	Creator       string `protobuf:"bytes,7,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateConfigTemplateBindingReq) Reset()         { *m = CreateConfigTemplateBindingReq{} }
func (m *CreateConfigTemplateBindingReq) String() string { return proto.CompactTextString(m) }
func (*CreateConfigTemplateBindingReq) ProtoMessage()    {}
func (*CreateConfigTemplateBindingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{180}
}

func (m *CreateConfigTemplateBindingReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateConfigTemplateBindingReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateConfigTemplateBindingReq) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *CreateConfigTemplateBindingReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CreateConfigTemplateBindingReq) GetVersionid() string {
	if m != nil {
		return m.Versionid
	}
	return ""
}

func (m *CreateConfigTemplateBindingReq) GetBindingParams() string {
	if m != nil {
		return m.BindingParams
	}
	return ""
}

func (m *CreateConfigTemplateBindingReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateConfigTemplateBindingResp struct {
	Seq      uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Cfgsetid string         `protobuf:"bytes,4,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Commitid string         `protobuf:"bytes,5,opt,name=commitid" json:"commitid,omitempty"`
}

func (m *CreateConfigTemplateBindingResp) Reset()         { *m = CreateConfigTemplateBindingResp{} }
func (m *CreateConfigTemplateBindingResp) String() string { return proto.CompactTextString(m) }
func (*CreateConfigTemplateBindingResp) ProtoMessage()    {}
func (*CreateConfigTemplateBindingResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{181}
}

func (m *CreateConfigTemplateBindingResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateConfigTemplateBindingResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateConfigTemplateBindingResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateConfigTemplateBindingResp) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *CreateConfigTemplateBindingResp) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

type DeleteConfigTemplateBindingReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Templateid string `protobuf:"bytes,3,opt,name=templateid" json:"templateid,omitempty"`
	Appid      string `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty"`
	Operator   string `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteConfigTemplateBindingReq) Reset()         { *m = DeleteConfigTemplateBindingReq{} }
func (m *DeleteConfigTemplateBindingReq) String() string { return proto.CompactTextString(m) }
func (*DeleteConfigTemplateBindingReq) ProtoMessage()    {}
func (*DeleteConfigTemplateBindingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{182}
}

func (m *DeleteConfigTemplateBindingReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteConfigTemplateBindingReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *DeleteConfigTemplateBindingReq) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *DeleteConfigTemplateBindingReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *DeleteConfigTemplateBindingReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteConfigTemplateBindingResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DeleteConfigTemplateBindingResp) Reset()         { *m = DeleteConfigTemplateBindingResp{} }
func (m *DeleteConfigTemplateBindingResp) String() string { return proto.CompactTextString(m) }
func (*DeleteConfigTemplateBindingResp) ProtoMessage()    {}
func (*DeleteConfigTemplateBindingResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{183}
}

func (m *DeleteConfigTemplateBindingResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteConfigTemplateBindingResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *DeleteConfigTemplateBindingResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type SyncConfigTemplateBindingReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Templateid    string `protobuf:"bytes,3,opt,name=templateid" json:"templateid,omitempty"`
	Appid         string `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty"`
	Versionid     string `protobuf:"bytes,5,opt,name=versionid" json:"versionid,omitempty"`
	BindingParams string `protobuf:"bytes,6,opt,name=bindingParams" json:"bindingParams,omitempty"`
	Operator      string `protobuf:"bytes,7,opt,name=operator" json:"operator,omitempty"`
}

func (m *SyncConfigTemplateBindingReq) Reset()                    { *m = SyncConfigTemplateBindingReq{} }
func (m *SyncConfigTemplateBindingReq) String() string            { return proto.CompactTextString(m) }
func (*SyncConfigTemplateBindingReq) ProtoMessage()               {}
func (*SyncConfigTemplateBindingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{184} }

func (m *SyncConfigTemplateBindingReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *SyncConfigTemplateBindingReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *SyncConfigTemplateBindingReq) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *SyncConfigTemplateBindingReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *SyncConfigTemplateBindingReq) GetVersionid() string {
	if m != nil {
		return m.Versionid
	}
	return ""
}

func (m *SyncConfigTemplateBindingReq) GetBindingParams() string {
	if m != nil {
		return m.BindingParams
	}
	return ""
}

func (m *SyncConfigTemplateBindingReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type SyncConfigTemplateBindingResp struct {
	Seq      uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode  common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg   string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Commitid string         `protobuf:"bytes,4,opt,name=commitid" json:"commitid,omitempty"`
}

func (m *SyncConfigTemplateBindingResp) Reset()                    { *m = SyncConfigTemplateBindingResp{} }
func (m *SyncConfigTemplateBindingResp) String() string            { return proto.CompactTextString(m) }
func (*SyncConfigTemplateBindingResp) ProtoMessage()               {}
func (*SyncConfigTemplateBindingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{185} }

func (m *SyncConfigTemplateBindingResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *SyncConfigTemplateBindingResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *SyncConfigTemplateBindingResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *SyncConfigTemplateBindingResp) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

type QueryConfigTemplateBindingReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Templateid string `protobuf:"bytes,3,opt,name=templateid" json:"templateid,omitempty"`
	Appid      string `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty"`
}

func (m *QueryConfigTemplateBindingReq) Reset()                    { *m = QueryConfigTemplateBindingReq{} }
func (m *QueryConfigTemplateBindingReq) String() string            { return proto.CompactTextString(m) }
func (*QueryConfigTemplateBindingReq) ProtoMessage()               {}
func (*QueryConfigTemplateBindingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{186} }

func (m *QueryConfigTemplateBindingReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigTemplateBindingReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryConfigTemplateBindingReq) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *QueryConfigTemplateBindingReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

type QueryConfigTemplateBindingResp struct {
	Seq                   uint64                        `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode               common.ErrCode                `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg                string                        `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	ConfigTemplateBinding *common.ConfigTemplateBinding `protobuf:"bytes,4,opt,name=configTemplateBinding" json:"configTemplateBinding,omitempty"`
}

func (m *QueryConfigTemplateBindingResp) Reset()         { *m = QueryConfigTemplateBindingResp{} }
func (m *QueryConfigTemplateBindingResp) String() string { return proto.CompactTextString(m) }
func (*QueryConfigTemplateBindingResp) ProtoMessage()    {}
func (*QueryConfigTemplateBindingResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{187}
}

func (m *QueryConfigTemplateBindingResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigTemplateBindingResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigTemplateBindingResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryConfigTemplateBindingResp) GetConfigTemplateBinding() *common.ConfigTemplateBinding {
	if m != nil {
		return m.ConfigTemplateBinding
	}
	return nil
}

type QueryConfigTemplateBindingListReq struct {
	Seq        uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Templateid string `protobuf:"bytes,3,opt,name=templateid" json:"templateid,omitempty"`
	Appid      string `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty"`
	Index      int32  `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Limit      int32  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryConfigTemplateBindingListReq) Reset()         { *m = QueryConfigTemplateBindingListReq{} }
func (m *QueryConfigTemplateBindingListReq) String() string { return proto.CompactTextString(m) }
func (*QueryConfigTemplateBindingListReq) ProtoMessage()    {}
func (*QueryConfigTemplateBindingListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{188}
}

func (m *QueryConfigTemplateBindingListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigTemplateBindingListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryConfigTemplateBindingListReq) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *QueryConfigTemplateBindingListReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *QueryConfigTemplateBindingListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryConfigTemplateBindingListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryConfigTemplateBindingListResp struct {
	Seq                    uint64                          `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode                common.ErrCode                  `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg                 string                          `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	ConfigTemplateBindings []*common.ConfigTemplateBinding `protobuf:"bytes,4,rep,name=configTemplateBindings" json:"configTemplateBindings,omitempty"`
}

func (m *QueryConfigTemplateBindingListResp) Reset()         { *m = QueryConfigTemplateBindingListResp{} }
func (m *QueryConfigTemplateBindingListResp) String() string { return proto.CompactTextString(m) }
func (*QueryConfigTemplateBindingListResp) ProtoMessage()    {}
func (*QueryConfigTemplateBindingListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{189}
}

func (m *QueryConfigTemplateBindingListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryConfigTemplateBindingListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryConfigTemplateBindingListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryConfigTemplateBindingListResp) GetConfigTemplateBindings() []*common.ConfigTemplateBinding {
	if m != nil {
		return m.ConfigTemplateBindings
	}
	return nil
}

type CreateVariableReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cluster       string `protobuf:"bytes,3,opt,name=cluster" json:"cluster,omitempty"`
	ClusterLabels string `protobuf:"bytes,4,opt,name=clusterLabels" json:"clusterLabels,omitempty"`
	Zone          string `protobuf:"bytes,5,opt,name=zone" json:"zone,omitempty"`
	Type          int32  `protobuf:"varint,6,opt,name=type" json:"type,omitempty"`
	Key           string `protobuf:"bytes,7,opt,name=key" json:"key,omitempty"`
	Value         string `protobuf:"bytes,8,opt,name=value" json:"value,omitempty"`
	Memo          string `protobuf:"bytes,9,opt,name=memo" json:"memo,omitempty"`
	Creator       string `protobuf:"bytes,10,opt,name=creator" json:"creator,omitempty"`
}

func (m *CreateVariableReq) Reset()                    { *m = CreateVariableReq{} }
func (m *CreateVariableReq) String() string            { return proto.CompactTextString(m) }
func (*CreateVariableReq) ProtoMessage()               {}
func (*CreateVariableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{190} }

func (m *CreateVariableReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateVariableReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *CreateVariableReq) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *CreateVariableReq) GetClusterLabels() string {
	if m != nil {
		return m.ClusterLabels
	}
	return ""
}

func (m *CreateVariableReq) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *CreateVariableReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CreateVariableReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CreateVariableReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CreateVariableReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateVariableReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CreateVariableResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Vid     string         `protobuf:"bytes,4,opt,name=vid" json:"vid,omitempty"`
}

func (m *CreateVariableResp) Reset()                    { *m = CreateVariableResp{} }
func (m *CreateVariableResp) String() string            { return proto.CompactTextString(m) }
func (*CreateVariableResp) ProtoMessage()               {}
func (*CreateVariableResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{191} }

func (m *CreateVariableResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateVariableResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *CreateVariableResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateVariableResp) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

type UpdateVariableReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Vid      string `protobuf:"bytes,3,opt,name=vid" json:"vid,omitempty"`
	Type     int32  `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Key      string `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
	Value    string `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	Memo     string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	Operator string `protobuf:"bytes,8,opt,name=operator" json:"operator,omitempty"`
}

func (m *UpdateVariableReq) Reset()                    { *m = UpdateVariableReq{} }
func (m *UpdateVariableReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateVariableReq) ProtoMessage()               {}
func (*UpdateVariableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{192} }

func (m *UpdateVariableReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateVariableReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *UpdateVariableReq) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *UpdateVariableReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UpdateVariableReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UpdateVariableReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdateVariableReq) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *UpdateVariableReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type UpdateVariableResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UpdateVariableResp) Reset()                    { *m = UpdateVariableResp{} }
func (m *UpdateVariableResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateVariableResp) ProtoMessage()               {}
func (*UpdateVariableResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{193} }

func (m *UpdateVariableResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateVariableResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *UpdateVariableResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type DeleteVariableReq struct {
	Seq      uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid      string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Vid      string `protobuf:"bytes,3,opt,name=vid" json:"vid,omitempty"`
	Type     int32  `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Operator string `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
}

func (m *DeleteVariableReq) Reset()                    { *m = DeleteVariableReq{} }
func (m *DeleteVariableReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteVariableReq) ProtoMessage()               {}
func (*DeleteVariableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{194} }

func (m *DeleteVariableReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteVariableReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *DeleteVariableReq) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *DeleteVariableReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *DeleteVariableReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type DeleteVariableResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *DeleteVariableResp) Reset()                    { *m = DeleteVariableResp{} }
func (m *DeleteVariableResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteVariableResp) ProtoMessage()               {}
func (*DeleteVariableResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{195} }

func (m *DeleteVariableResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeleteVariableResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *DeleteVariableResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryVariableReq struct {
	Seq  uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid  string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Vid  string `protobuf:"bytes,3,opt,name=vid" json:"vid,omitempty"`
	Type int32  `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
}

func (m *QueryVariableReq) Reset()                    { *m = QueryVariableReq{} }
func (m *QueryVariableReq) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableReq) ProtoMessage()               {}
func (*QueryVariableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{196} }

func (m *QueryVariableReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryVariableReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryVariableReq) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *QueryVariableReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type QueryVariableResp struct {
	Seq     uint64           `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode   `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string           `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Var     *common.Variable `protobuf:"bytes,4,opt,name=var" json:"var,omitempty"`
}

func (m *QueryVariableResp) Reset()                    { *m = QueryVariableResp{} }
func (m *QueryVariableResp) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableResp) ProtoMessage()               {}
func (*QueryVariableResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{197} }

func (m *QueryVariableResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryVariableResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryVariableResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryVariableResp) GetVar() *common.Variable {
	if m != nil {
		return m.Var
	}
	return nil
}

type QueryVariableListReq struct {
	Seq           uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Bid           string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Cluster       string `protobuf:"bytes,3,opt,name=cluster" json:"cluster,omitempty"`
	ClusterLabels string `protobuf:"bytes,4,opt,name=clusterLabels" json:"clusterLabels,omitempty"`
	Zone          string `protobuf:"bytes,5,opt,name=zone" json:"zone,omitempty"`
	Type          int32  `protobuf:"varint,6,opt,name=type" json:"type,omitempty"`
	Index         int32  `protobuf:"varint,7,opt,name=index" json:"index,omitempty"`
	Limit         int32  `protobuf:"varint,8,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryVariableListReq) Reset()                    { *m = QueryVariableListReq{} }
func (m *QueryVariableListReq) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableListReq) ProtoMessage()               {}
func (*QueryVariableListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{198} }

func (m *QueryVariableListReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryVariableListReq) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *QueryVariableListReq) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *QueryVariableListReq) GetClusterLabels() string {
	if m != nil {
		return m.ClusterLabels
	}
	return ""
}

func (m *QueryVariableListReq) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *QueryVariableListReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *QueryVariableListReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryVariableListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryVariableListResp struct {
	Seq     uint64             `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode     `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string             `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Vars    []*common.Variable `protobuf:"bytes,4,rep,name=vars" json:"vars,omitempty"`
}

func (m *QueryVariableListResp) Reset()                    { *m = QueryVariableListResp{} }
func (m *QueryVariableListResp) String() string            { return proto.CompactTextString(m) }
func (*QueryVariableListResp) ProtoMessage()               {}
func (*QueryVariableListResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{199} }

func (m *QueryVariableListResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *QueryVariableListResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *QueryVariableListResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *QueryVariableListResp) GetVars() []*common.Variable {
	if m != nil {
		return m.Vars
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateBusinessReq)(nil), "accessserver.CreateBusinessReq")
	proto.RegisterType((*CreateBusinessResp)(nil), "accessserver.CreateBusinessResp")
	proto.RegisterType((*QueryBusinessReq)(nil), "accessserver.QueryBusinessReq")
	proto.RegisterType((*QueryBusinessResp)(nil), "accessserver.QueryBusinessResp")
	proto.RegisterType((*QueryBusinessListReq)(nil), "accessserver.QueryBusinessListReq")
	proto.RegisterType((*QueryBusinessListResp)(nil), "accessserver.QueryBusinessListResp")
	proto.RegisterType((*UpdateBusinessReq)(nil), "accessserver.UpdateBusinessReq")
	proto.RegisterType((*UpdateBusinessResp)(nil), "accessserver.UpdateBusinessResp")
	proto.RegisterType((*CreateAppReq)(nil), "accessserver.CreateAppReq")
	proto.RegisterType((*CreateAppResp)(nil), "accessserver.CreateAppResp")
	proto.RegisterType((*QueryAppReq)(nil), "accessserver.QueryAppReq")
	proto.RegisterType((*QueryAppResp)(nil), "accessserver.QueryAppResp")
	proto.RegisterType((*QueryAppListReq)(nil), "accessserver.QueryAppListReq")
	proto.RegisterType((*QueryAppListResp)(nil), "accessserver.QueryAppListResp")
	proto.RegisterType((*UpdateAppReq)(nil), "accessserver.UpdateAppReq")
	proto.RegisterType((*UpdateAppResp)(nil), "accessserver.UpdateAppResp")
	proto.RegisterType((*DeleteAppReq)(nil), "accessserver.DeleteAppReq")
	proto.RegisterType((*DeleteAppResp)(nil), "accessserver.DeleteAppResp")
	proto.RegisterType((*CreateClusterReq)(nil), "accessserver.CreateClusterReq")
	proto.RegisterType((*CreateClusterResp)(nil), "accessserver.CreateClusterResp")
	proto.RegisterType((*QueryClusterReq)(nil), "accessserver.QueryClusterReq")
	proto.RegisterType((*QueryClusterResp)(nil), "accessserver.QueryClusterResp")
	proto.RegisterType((*QueryClusterListReq)(nil), "accessserver.QueryClusterListReq")
	proto.RegisterType((*QueryClusterListResp)(nil), "accessserver.QueryClusterListResp")
	proto.RegisterType((*UpdateClusterReq)(nil), "accessserver.UpdateClusterReq")
	proto.RegisterType((*UpdateClusterResp)(nil), "accessserver.UpdateClusterResp")
	proto.RegisterType((*DeleteClusterReq)(nil), "accessserver.DeleteClusterReq")
	proto.RegisterType((*DeleteClusterResp)(nil), "accessserver.DeleteClusterResp")
	proto.RegisterType((*CreateZoneReq)(nil), "accessserver.CreateZoneReq")
	proto.RegisterType((*CreateZoneResp)(nil), "accessserver.CreateZoneResp")
	proto.RegisterType((*QueryZoneReq)(nil), "accessserver.QueryZoneReq")
	proto.RegisterType((*QueryZoneResp)(nil), "accessserver.QueryZoneResp")
	proto.RegisterType((*QueryZoneListReq)(nil), "accessserver.QueryZoneListReq")
	proto.RegisterType((*QueryZoneListResp)(nil), "accessserver.QueryZoneListResp")
	proto.RegisterType((*UpdateZoneReq)(nil), "accessserver.UpdateZoneReq")
	proto.RegisterType((*UpdateZoneResp)(nil), "accessserver.UpdateZoneResp")
	proto.RegisterType((*DeleteZoneReq)(nil), "accessserver.DeleteZoneReq")
	proto.RegisterType((*DeleteZoneResp)(nil), "accessserver.DeleteZoneResp")
	proto.RegisterType((*CreateConfigSetReq)(nil), "accessserver.CreateConfigSetReq")
	proto.RegisterType((*CreateConfigSetResp)(nil), "accessserver.CreateConfigSetResp")
	proto.RegisterType((*QueryConfigSetReq)(nil), "accessserver.QueryConfigSetReq")
	proto.RegisterType((*QueryConfigSetResp)(nil), "accessserver.QueryConfigSetResp")
	proto.RegisterType((*QueryConfigSetListReq)(nil), "accessserver.QueryConfigSetListReq")
	proto.RegisterType((*QueryConfigSetListResp)(nil), "accessserver.QueryConfigSetListResp")
	proto.RegisterType((*UpdateConfigSetReq)(nil), "accessserver.UpdateConfigSetReq")
	proto.RegisterType((*UpdateConfigSetResp)(nil), "accessserver.UpdateConfigSetResp")
	proto.RegisterType((*DeleteConfigSetReq)(nil), "accessserver.DeleteConfigSetReq")
	proto.RegisterType((*DeleteConfigSetResp)(nil), "accessserver.DeleteConfigSetResp")
	proto.RegisterType((*LockConfigSetReq)(nil), "accessserver.LockConfigSetReq")
	proto.RegisterType((*LockConfigSetResp)(nil), "accessserver.LockConfigSetResp")
	proto.RegisterType((*UnlockConfigSetReq)(nil), "accessserver.UnlockConfigSetReq")
	proto.RegisterType((*UnlockConfigSetResp)(nil), "accessserver.UnlockConfigSetResp")
	proto.RegisterType((*QueryConfigsReq)(nil), "accessserver.QueryConfigsReq")
	proto.RegisterType((*QueryConfigsResp)(nil), "accessserver.QueryConfigsResp")
	proto.RegisterType((*QueryConfigsListReq)(nil), "accessserver.QueryConfigsListReq")
	proto.RegisterType((*QueryConfigsListResp)(nil), "accessserver.QueryConfigsListResp")
	proto.RegisterType((*QueryReleaseConfigsReq)(nil), "accessserver.QueryReleaseConfigsReq")
	proto.RegisterType((*QueryReleaseConfigsResp)(nil), "accessserver.QueryReleaseConfigsResp")
	proto.RegisterType((*CreateCommitReq)(nil), "accessserver.CreateCommitReq")
	proto.RegisterType((*CreateCommitResp)(nil), "accessserver.CreateCommitResp")
	proto.RegisterType((*QueryCommitReq)(nil), "accessserver.QueryCommitReq")
	proto.RegisterType((*QueryCommitResp)(nil), "accessserver.QueryCommitResp")
	proto.RegisterType((*QueryHistoryCommitsReq)(nil), "accessserver.QueryHistoryCommitsReq")
	proto.RegisterType((*QueryHistoryCommitsResp)(nil), "accessserver.QueryHistoryCommitsResp")
	proto.RegisterType((*UpdateCommitReq)(nil), "accessserver.UpdateCommitReq")
	proto.RegisterType((*UpdateCommitResp)(nil), "accessserver.UpdateCommitResp")
	proto.RegisterType((*CancelCommitReq)(nil), "accessserver.CancelCommitReq")
	proto.RegisterType((*CancelCommitResp)(nil), "accessserver.CancelCommitResp")
	proto.RegisterType((*ConfirmCommitReq)(nil), "accessserver.ConfirmCommitReq")
	proto.RegisterType((*ConfirmCommitResp)(nil), "accessserver.ConfirmCommitResp")
	proto.RegisterType((*PreviewCommitReq)(nil), "accessserver.PreviewCommitReq")
	proto.RegisterType((*PreviewCommitResp)(nil), "accessserver.PreviewCommitResp")
	proto.RegisterType((*CreateMultiCommitReq)(nil), "accessserver.CreateMultiCommitReq")
	proto.RegisterType((*CreateMultiCommitResp)(nil), "accessserver.CreateMultiCommitResp")
	proto.RegisterType((*QueryMultiCommitReq)(nil), "accessserver.QueryMultiCommitReq")
	proto.RegisterType((*QueryMultiCommitResp)(nil), "accessserver.QueryMultiCommitResp")
	proto.RegisterType((*QueryHistoryMultiCommitsReq)(nil), "accessserver.QueryHistoryMultiCommitsReq")
	proto.RegisterType((*QueryHistoryMultiCommitsResp)(nil), "accessserver.QueryHistoryMultiCommitsResp")
	proto.RegisterType((*UpdateMultiCommitReq)(nil), "accessserver.UpdateMultiCommitReq")
	proto.RegisterType((*UpdateMultiCommitResp)(nil), "accessserver.UpdateMultiCommitResp")
	proto.RegisterType((*CancelMultiCommitReq)(nil), "accessserver.CancelMultiCommitReq")
	proto.RegisterType((*CancelMultiCommitResp)(nil), "accessserver.CancelMultiCommitResp")
	proto.RegisterType((*ConfirmMultiCommitReq)(nil), "accessserver.ConfirmMultiCommitReq")
	proto.RegisterType((*ConfirmMultiCommitResp)(nil), "accessserver.ConfirmMultiCommitResp")
	proto.RegisterType((*CreateReleaseReq)(nil), "accessserver.CreateReleaseReq")
	proto.RegisterType((*CreateReleaseResp)(nil), "accessserver.CreateReleaseResp")
	proto.RegisterType((*QueryReleaseReq)(nil), "accessserver.QueryReleaseReq")
	proto.RegisterType((*QueryReleaseResp)(nil), "accessserver.QueryReleaseResp")
	proto.RegisterType((*QueryHistoryReleasesReq)(nil), "accessserver.QueryHistoryReleasesReq")
	proto.RegisterType((*QueryHistoryReleasesResp)(nil), "accessserver.QueryHistoryReleasesResp")
	proto.RegisterType((*UpdateReleaseReq)(nil), "accessserver.UpdateReleaseReq")
	proto.RegisterType((*UpdateReleaseResp)(nil), "accessserver.UpdateReleaseResp")
	proto.RegisterType((*CancelReleaseReq)(nil), "accessserver.CancelReleaseReq")
	proto.RegisterType((*CancelReleaseResp)(nil), "accessserver.CancelReleaseResp")
	proto.RegisterType((*PublishReleaseReq)(nil), "accessserver.PublishReleaseReq")
	proto.RegisterType((*PublishReleaseResp)(nil), "accessserver.PublishReleaseResp")
	proto.RegisterType((*RollbackReleaseReq)(nil), "accessserver.RollbackReleaseReq")
	proto.RegisterType((*RollbackReleaseResp)(nil), "accessserver.RollbackReleaseResp")
	proto.RegisterType((*CreateMultiReleaseReq)(nil), "accessserver.CreateMultiReleaseReq")
	proto.RegisterType((*CreateMultiReleaseResp)(nil), "accessserver.CreateMultiReleaseResp")
	proto.RegisterType((*QueryMultiReleaseReq)(nil), "accessserver.QueryMultiReleaseReq")
	proto.RegisterType((*QueryMultiReleaseResp)(nil), "accessserver.QueryMultiReleaseResp")
	proto.RegisterType((*QueryHistoryMultiReleasesReq)(nil), "accessserver.QueryHistoryMultiReleasesReq")
	proto.RegisterType((*QueryHistoryMultiReleasesResp)(nil), "accessserver.QueryHistoryMultiReleasesResp")
	proto.RegisterType((*UpdateMultiReleaseReq)(nil), "accessserver.UpdateMultiReleaseReq")
	proto.RegisterType((*UpdateMultiReleaseResp)(nil), "accessserver.UpdateMultiReleaseResp")
	proto.RegisterType((*CancelMultiReleaseReq)(nil), "accessserver.CancelMultiReleaseReq")
	proto.RegisterType((*CancelMultiReleaseResp)(nil), "accessserver.CancelMultiReleaseResp")
	proto.RegisterType((*PublishMultiReleaseReq)(nil), "accessserver.PublishMultiReleaseReq")
	proto.RegisterType((*PublishMultiReleaseResp)(nil), "accessserver.PublishMultiReleaseResp")
	proto.RegisterType((*RollbackMultiReleaseReq)(nil), "accessserver.RollbackMultiReleaseReq")
	proto.RegisterType((*RollbackMultiReleaseResp)(nil), "accessserver.RollbackMultiReleaseResp")
	proto.RegisterType((*QueryHistoryAppInstancesReq)(nil), "accessserver.QueryHistoryAppInstancesReq")
	proto.RegisterType((*QueryHistoryAppInstancesResp)(nil), "accessserver.QueryHistoryAppInstancesResp")
	proto.RegisterType((*QueryReachableAppInstancesReq)(nil), "accessserver.QueryReachableAppInstancesReq")
	proto.RegisterType((*QueryReachableAppInstancesResp)(nil), "accessserver.QueryReachableAppInstancesResp")
	proto.RegisterType((*QueryMatchedAppInstancesReq)(nil), "accessserver.QueryMatchedAppInstancesReq")
	proto.RegisterType((*QueryMatchedAppInstancesResp)(nil), "accessserver.QueryMatchedAppInstancesResp")
	proto.RegisterType((*QueryEffectedAppInstancesReq)(nil), "accessserver.QueryEffectedAppInstancesReq")
	proto.RegisterType((*QueryEffectedAppInstancesResp)(nil), "accessserver.QueryEffectedAppInstancesResp")
	proto.RegisterType((*QueryAppInstanceReleaseReq)(nil), "accessserver.QueryAppInstanceReleaseReq")
	proto.RegisterType((*QueryAppInstanceReleaseResp)(nil), "accessserver.QueryAppInstanceReleaseResp")
	proto.RegisterType((*CreateStrategyReq)(nil), "accessserver.CreateStrategyReq")
	proto.RegisterType((*CreateStrategyResp)(nil), "accessserver.CreateStrategyResp")
	proto.RegisterType((*QueryStrategyReq)(nil), "accessserver.QueryStrategyReq")
	proto.RegisterType((*QueryStrategyResp)(nil), "accessserver.QueryStrategyResp")
	proto.RegisterType((*QueryStrategyListReq)(nil), "accessserver.QueryStrategyListReq")
	proto.RegisterType((*QueryStrategyListResp)(nil), "accessserver.QueryStrategyListResp")
	proto.RegisterType((*DeleteStrategyReq)(nil), "accessserver.DeleteStrategyReq")
	proto.RegisterType((*DeleteStrategyResp)(nil), "accessserver.DeleteStrategyResp")
	proto.RegisterType((*CreateShardingDBReq)(nil), "accessserver.CreateShardingDBReq")
	proto.RegisterType((*CreateShardingDBResp)(nil), "accessserver.CreateShardingDBResp")
	proto.RegisterType((*QueryShardingDBReq)(nil), "accessserver.QueryShardingDBReq")
	proto.RegisterType((*QueryShardingDBResp)(nil), "accessserver.QueryShardingDBResp")
	proto.RegisterType((*QueryShardingDBListReq)(nil), "accessserver.QueryShardingDBListReq")
	proto.RegisterType((*QueryShardingDBListResp)(nil), "accessserver.QueryShardingDBListResp")
	proto.RegisterType((*UpdateShardingDBReq)(nil), "accessserver.UpdateShardingDBReq")
	proto.RegisterType((*UpdateShardingDBResp)(nil), "accessserver.UpdateShardingDBResp")
	proto.RegisterType((*CreateShardingReq)(nil), "accessserver.CreateShardingReq")
	proto.RegisterType((*CreateShardingResp)(nil), "accessserver.CreateShardingResp")
	proto.RegisterType((*QueryShardingReq)(nil), "accessserver.QueryShardingReq")
	proto.RegisterType((*QueryShardingResp)(nil), "accessserver.QueryShardingResp")
	proto.RegisterType((*UpdateShardingReq)(nil), "accessserver.UpdateShardingReq")
	proto.RegisterType((*UpdateShardingResp)(nil), "accessserver.UpdateShardingResp")
	proto.RegisterType((*QueryAuditListReq)(nil), "accessserver.QueryAuditListReq")
	proto.RegisterType((*QueryAuditListResp)(nil), "accessserver.QueryAuditListResp")
	proto.RegisterType((*PreviewRenderingReq)(nil), "accessserver.PreviewRenderingReq")
	proto.RegisterType((*PreviewRenderingResp)(nil), "accessserver.PreviewRenderingResp")
	proto.RegisterType((*IntegrateReq)(nil), "accessserver.IntegrateReq")
	proto.RegisterType((*IntegrateResp)(nil), "accessserver.IntegrateResp")
	proto.RegisterType((*CreateConfigTemplateSetReq)(nil), "accessserver.CreateConfigTemplateSetReq")
	proto.RegisterType((*CreateConfigTemplateSetResp)(nil), "accessserver.CreateConfigTemplateSetResp")
	proto.RegisterType((*DeleteConfigTemplateSetReq)(nil), "accessserver.DeleteConfigTemplateSetReq")
	proto.RegisterType((*DeleteConfigTemplateSetResp)(nil), "accessserver.DeleteConfigTemplateSetResp")
	proto.RegisterType((*UpdateConfigTemplateSetReq)(nil), "accessserver.UpdateConfigTemplateSetReq")
	proto.RegisterType((*UpdateConfigTemplateSetResp)(nil), "accessserver.UpdateConfigTemplateSetResp")
	proto.RegisterType((*QueryConfigTemplateSetReq)(nil), "accessserver.QueryConfigTemplateSetReq")
	proto.RegisterType((*QueryConfigTemplateSetResp)(nil), "accessserver.QueryConfigTemplateSetResp")
	proto.RegisterType((*QueryConfigTemplateSetListReq)(nil), "accessserver.QueryConfigTemplateSetListReq")
	proto.RegisterType((*QueryConfigTemplateSetListResp)(nil), "accessserver.QueryConfigTemplateSetListResp")
	proto.RegisterType((*CreateConfigTemplateReq)(nil), "accessserver.CreateConfigTemplateReq")
	proto.RegisterType((*CreateConfigTemplateResp)(nil), "accessserver.CreateConfigTemplateResp")
	proto.RegisterType((*DeleteConfigTemplateReq)(nil), "accessserver.DeleteConfigTemplateReq")
	proto.RegisterType((*DeleteConfigTemplateResp)(nil), "accessserver.DeleteConfigTemplateResp")
	proto.RegisterType((*UpdateConfigTemplateReq)(nil), "accessserver.UpdateConfigTemplateReq")
	proto.RegisterType((*UpdateConfigTemplateResp)(nil), "accessserver.UpdateConfigTemplateResp")
	proto.RegisterType((*QueryConfigTemplateReq)(nil), "accessserver.QueryConfigTemplateReq")
	proto.RegisterType((*QueryConfigTemplateResp)(nil), "accessserver.QueryConfigTemplateResp")
	proto.RegisterType((*QueryConfigTemplateListReq)(nil), "accessserver.QueryConfigTemplateListReq")
	proto.RegisterType((*QueryConfigTemplateListResp)(nil), "accessserver.QueryConfigTemplateListResp")
	proto.RegisterType((*CreateTemplateVersionReq)(nil), "accessserver.CreateTemplateVersionReq")
	proto.RegisterType((*CreateTemplateVersionResp)(nil), "accessserver.CreateTemplateVersionResp")
	proto.RegisterType((*DeleteTemplateVersionReq)(nil), "accessserver.DeleteTemplateVersionReq")
	proto.RegisterType((*DeleteTemplateVersionResp)(nil), "accessserver.DeleteTemplateVersionResp")
	proto.RegisterType((*UpdateTemplateVersionReq)(nil), "accessserver.UpdateTemplateVersionReq")
	proto.RegisterType((*UpdateTemplateVersionResp)(nil), "accessserver.UpdateTemplateVersionResp")
	proto.RegisterType((*QueryTemplateVersionReq)(nil), "accessserver.QueryTemplateVersionReq")
	proto.RegisterType((*QueryTemplateVersionResp)(nil), "accessserver.QueryTemplateVersionResp")
	proto.RegisterType((*QueryTemplateVersionListReq)(nil), "accessserver.QueryTemplateVersionListReq")
	proto.RegisterType((*QueryTemplateVersionListResp)(nil), "accessserver.QueryTemplateVersionListResp")
	proto.RegisterType((*CreateConfigTemplateBindingReq)(nil), "accessserver.CreateConfigTemplateBindingReq")
	proto.RegisterType((*CreateConfigTemplateBindingResp)(nil), "accessserver.CreateConfigTemplateBindingResp")
	proto.RegisterType((*DeleteConfigTemplateBindingReq)(nil), "accessserver.DeleteConfigTemplateBindingReq")
	proto.RegisterType((*DeleteConfigTemplateBindingResp)(nil), "accessserver.DeleteConfigTemplateBindingResp")
	proto.RegisterType((*SyncConfigTemplateBindingReq)(nil), "accessserver.SyncConfigTemplateBindingReq")
	proto.RegisterType((*SyncConfigTemplateBindingResp)(nil), "accessserver.SyncConfigTemplateBindingResp")
	proto.RegisterType((*QueryConfigTemplateBindingReq)(nil), "accessserver.QueryConfigTemplateBindingReq")
	proto.RegisterType((*QueryConfigTemplateBindingResp)(nil), "accessserver.QueryConfigTemplateBindingResp")
	proto.RegisterType((*QueryConfigTemplateBindingListReq)(nil), "accessserver.QueryConfigTemplateBindingListReq")
	proto.RegisterType((*QueryConfigTemplateBindingListResp)(nil), "accessserver.QueryConfigTemplateBindingListResp")
	proto.RegisterType((*CreateVariableReq)(nil), "accessserver.CreateVariableReq")
	proto.RegisterType((*CreateVariableResp)(nil), "accessserver.CreateVariableResp")
	proto.RegisterType((*UpdateVariableReq)(nil), "accessserver.UpdateVariableReq")
	proto.RegisterType((*UpdateVariableResp)(nil), "accessserver.UpdateVariableResp")
	proto.RegisterType((*DeleteVariableReq)(nil), "accessserver.DeleteVariableReq")
	proto.RegisterType((*DeleteVariableResp)(nil), "accessserver.DeleteVariableResp")
	proto.RegisterType((*QueryVariableReq)(nil), "accessserver.QueryVariableReq")
	proto.RegisterType((*QueryVariableResp)(nil), "accessserver.QueryVariableResp")
	proto.RegisterType((*QueryVariableListReq)(nil), "accessserver.QueryVariableListReq")
	proto.RegisterType((*QueryVariableListResp)(nil), "accessserver.QueryVariableListResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Access service

type AccessClient interface {
	CreateBusiness(ctx context.Context, in *CreateBusinessReq, opts ...grpc.CallOption) (*CreateBusinessResp, error)
	QueryBusiness(ctx context.Context, in *QueryBusinessReq, opts ...grpc.CallOption) (*QueryBusinessResp, error)
	QueryBusinessList(ctx context.Context, in *QueryBusinessListReq, opts ...grpc.CallOption) (*QueryBusinessListResp, error)
	UpdateBusiness(ctx context.Context, in *UpdateBusinessReq, opts ...grpc.CallOption) (*UpdateBusinessResp, error)
	CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error)
	QueryApp(ctx context.Context, in *QueryAppReq, opts ...grpc.CallOption) (*QueryAppResp, error)
	QueryAppList(ctx context.Context, in *QueryAppListReq, opts ...grpc.CallOption) (*QueryAppListResp, error)
	UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*UpdateAppResp, error)
	DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppResp, error)
	CreateCluster(ctx context.Context, in *CreateClusterReq, opts ...grpc.CallOption) (*CreateClusterResp, error)
	QueryCluster(ctx context.Context, in *QueryClusterReq, opts ...grpc.CallOption) (*QueryClusterResp, error)
	QueryClusterList(ctx context.Context, in *QueryClusterListReq, opts ...grpc.CallOption) (*QueryClusterListResp, error)
	UpdateCluster(ctx context.Context, in *UpdateClusterReq, opts ...grpc.CallOption) (*UpdateClusterResp, error)
	DeleteCluster(ctx context.Context, in *DeleteClusterReq, opts ...grpc.CallOption) (*DeleteClusterResp, error)
	CreateZone(ctx context.Context, in *CreateZoneReq, opts ...grpc.CallOption) (*CreateZoneResp, error)
	QueryZone(ctx context.Context, in *QueryZoneReq, opts ...grpc.CallOption) (*QueryZoneResp, error)
	QueryZoneList(ctx context.Context, in *QueryZoneListReq, opts ...grpc.CallOption) (*QueryZoneListResp, error)
	UpdateZone(ctx context.Context, in *UpdateZoneReq, opts ...grpc.CallOption) (*UpdateZoneResp, error)
	DeleteZone(ctx context.Context, in *DeleteZoneReq, opts ...grpc.CallOption) (*DeleteZoneResp, error)
	CreateConfigSet(ctx context.Context, in *CreateConfigSetReq, opts ...grpc.CallOption) (*CreateConfigSetResp, error)
	QueryConfigSet(ctx context.Context, in *QueryConfigSetReq, opts ...grpc.CallOption) (*QueryConfigSetResp, error)
	QueryConfigSetList(ctx context.Context, in *QueryConfigSetListReq, opts ...grpc.CallOption) (*QueryConfigSetListResp, error)
	UpdateConfigSet(ctx context.Context, in *UpdateConfigSetReq, opts ...grpc.CallOption) (*UpdateConfigSetResp, error)
	DeleteConfigSet(ctx context.Context, in *DeleteConfigSetReq, opts ...grpc.CallOption) (*DeleteConfigSetResp, error)
	LockConfigSet(ctx context.Context, in *LockConfigSetReq, opts ...grpc.CallOption) (*LockConfigSetResp, error)
	UnlockConfigSet(ctx context.Context, in *UnlockConfigSetReq, opts ...grpc.CallOption) (*UnlockConfigSetResp, error)
	QueryConfigs(ctx context.Context, in *QueryConfigsReq, opts ...grpc.CallOption) (*QueryConfigsResp, error)
	QueryConfigsList(ctx context.Context, in *QueryConfigsListReq, opts ...grpc.CallOption) (*QueryConfigsListResp, error)
	QueryReleaseConfigs(ctx context.Context, in *QueryReleaseConfigsReq, opts ...grpc.CallOption) (*QueryReleaseConfigsResp, error)
	CreateCommit(ctx context.Context, in *CreateCommitReq, opts ...grpc.CallOption) (*CreateCommitResp, error)
	QueryCommit(ctx context.Context, in *QueryCommitReq, opts ...grpc.CallOption) (*QueryCommitResp, error)
	QueryHistoryCommits(ctx context.Context, in *QueryHistoryCommitsReq, opts ...grpc.CallOption) (*QueryHistoryCommitsResp, error)
	UpdateCommit(ctx context.Context, in *UpdateCommitReq, opts ...grpc.CallOption) (*UpdateCommitResp, error)
	CancelCommit(ctx context.Context, in *CancelCommitReq, opts ...grpc.CallOption) (*CancelCommitResp, error)
	ConfirmCommit(ctx context.Context, in *ConfirmCommitReq, opts ...grpc.CallOption) (*ConfirmCommitResp, error)
	PreviewCommit(ctx context.Context, in *PreviewCommitReq, opts ...grpc.CallOption) (*PreviewCommitResp, error)
	CreateMultiCommit(ctx context.Context, in *CreateMultiCommitReq, opts ...grpc.CallOption) (*CreateMultiCommitResp, error)
	QueryMultiCommit(ctx context.Context, in *QueryMultiCommitReq, opts ...grpc.CallOption) (*QueryMultiCommitResp, error)
	QueryHistoryMultiCommits(ctx context.Context, in *QueryHistoryMultiCommitsReq, opts ...grpc.CallOption) (*QueryHistoryMultiCommitsResp, error)
	UpdateMultiCommit(ctx context.Context, in *UpdateMultiCommitReq, opts ...grpc.CallOption) (*UpdateMultiCommitResp, error)
	CancelMultiCommit(ctx context.Context, in *CancelMultiCommitReq, opts ...grpc.CallOption) (*CancelMultiCommitResp, error)
	ConfirmMultiCommit(ctx context.Context, in *ConfirmMultiCommitReq, opts ...grpc.CallOption) (*ConfirmMultiCommitResp, error)
	CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateReleaseResp, error)
	QueryRelease(ctx context.Context, in *QueryReleaseReq, opts ...grpc.CallOption) (*QueryReleaseResp, error)
	UpdateRelease(ctx context.Context, in *UpdateReleaseReq, opts ...grpc.CallOption) (*UpdateReleaseResp, error)
	CancelRelease(ctx context.Context, in *CancelReleaseReq, opts ...grpc.CallOption) (*CancelReleaseResp, error)
	PublishRelease(ctx context.Context, in *PublishReleaseReq, opts ...grpc.CallOption) (*PublishReleaseResp, error)
	RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...grpc.CallOption) (*RollbackReleaseResp, error)
	QueryHistoryReleases(ctx context.Context, in *QueryHistoryReleasesReq, opts ...grpc.CallOption) (*QueryHistoryReleasesResp, error)
	CreateMultiRelease(ctx context.Context, in *CreateMultiReleaseReq, opts ...grpc.CallOption) (*CreateMultiReleaseResp, error)
	QueryMultiRelease(ctx context.Context, in *QueryMultiReleaseReq, opts ...grpc.CallOption) (*QueryMultiReleaseResp, error)
	UpdateMultiRelease(ctx context.Context, in *UpdateMultiReleaseReq, opts ...grpc.CallOption) (*UpdateMultiReleaseResp, error)
	CancelMultiRelease(ctx context.Context, in *CancelMultiReleaseReq, opts ...grpc.CallOption) (*CancelMultiReleaseResp, error)
	PublishMultiRelease(ctx context.Context, in *PublishMultiReleaseReq, opts ...grpc.CallOption) (*PublishMultiReleaseResp, error)
	RollbackMultiRelease(ctx context.Context, in *RollbackMultiReleaseReq, opts ...grpc.CallOption) (*RollbackMultiReleaseResp, error)
	QueryHistoryMultiReleases(ctx context.Context, in *QueryHistoryMultiReleasesReq, opts ...grpc.CallOption) (*QueryHistoryMultiReleasesResp, error)
	QueryHistoryAppInstances(ctx context.Context, in *QueryHistoryAppInstancesReq, opts ...grpc.CallOption) (*QueryHistoryAppInstancesResp, error)
	QueryReachableAppInstances(ctx context.Context, in *QueryReachableAppInstancesReq, opts ...grpc.CallOption) (*QueryReachableAppInstancesResp, error)
	QueryMatchedAppInstances(ctx context.Context, in *QueryMatchedAppInstancesReq, opts ...grpc.CallOption) (*QueryMatchedAppInstancesResp, error)
	QueryEffectedAppInstances(ctx context.Context, in *QueryEffectedAppInstancesReq, opts ...grpc.CallOption) (*QueryEffectedAppInstancesResp, error)
	QueryAppInstanceRelease(ctx context.Context, in *QueryAppInstanceReleaseReq, opts ...grpc.CallOption) (*QueryAppInstanceReleaseResp, error)
	CreateStrategy(ctx context.Context, in *CreateStrategyReq, opts ...grpc.CallOption) (*CreateStrategyResp, error)
	QueryStrategy(ctx context.Context, in *QueryStrategyReq, opts ...grpc.CallOption) (*QueryStrategyResp, error)
	QueryStrategyList(ctx context.Context, in *QueryStrategyListReq, opts ...grpc.CallOption) (*QueryStrategyListResp, error)
	DeleteStrategy(ctx context.Context, in *DeleteStrategyReq, opts ...grpc.CallOption) (*DeleteStrategyResp, error)
	CreateShardingDB(ctx context.Context, in *CreateShardingDBReq, opts ...grpc.CallOption) (*CreateShardingDBResp, error)
	QueryShardingDB(ctx context.Context, in *QueryShardingDBReq, opts ...grpc.CallOption) (*QueryShardingDBResp, error)
	QueryShardingDBList(ctx context.Context, in *QueryShardingDBListReq, opts ...grpc.CallOption) (*QueryShardingDBListResp, error)
	UpdateShardingDB(ctx context.Context, in *UpdateShardingDBReq, opts ...grpc.CallOption) (*UpdateShardingDBResp, error)
	CreateSharding(ctx context.Context, in *CreateShardingReq, opts ...grpc.CallOption) (*CreateShardingResp, error)
	QuerySharding(ctx context.Context, in *QueryShardingReq, opts ...grpc.CallOption) (*QueryShardingResp, error)
	UpdateSharding(ctx context.Context, in *UpdateShardingReq, opts ...grpc.CallOption) (*UpdateShardingResp, error)
	QueryAuditList(ctx context.Context, in *QueryAuditListReq, opts ...grpc.CallOption) (*QueryAuditListResp, error)
	Integrate(ctx context.Context, in *IntegrateReq, opts ...grpc.CallOption) (*IntegrateResp, error)
	CreateConfigTemplateSet(ctx context.Context, in *CreateConfigTemplateSetReq, opts ...grpc.CallOption) (*CreateConfigTemplateSetResp, error)
	DeleteConfigTemplateSet(ctx context.Context, in *DeleteConfigTemplateSetReq, opts ...grpc.CallOption) (*DeleteConfigTemplateSetResp, error)
	UpdateConfigTemplateSet(ctx context.Context, in *UpdateConfigTemplateSetReq, opts ...grpc.CallOption) (*UpdateConfigTemplateSetResp, error)
	QueryConfigTemplateSet(ctx context.Context, in *QueryConfigTemplateSetReq, opts ...grpc.CallOption) (*QueryConfigTemplateSetResp, error)
	QueryConfigTemplateSetList(ctx context.Context, in *QueryConfigTemplateSetListReq, opts ...grpc.CallOption) (*QueryConfigTemplateSetListResp, error)
	CreateConfigTemplate(ctx context.Context, in *CreateConfigTemplateReq, opts ...grpc.CallOption) (*CreateConfigTemplateResp, error)
	DeleteConfigTemplate(ctx context.Context, in *DeleteConfigTemplateReq, opts ...grpc.CallOption) (*DeleteConfigTemplateResp, error)
	UpdateConfigTemplate(ctx context.Context, in *UpdateConfigTemplateReq, opts ...grpc.CallOption) (*UpdateConfigTemplateResp, error)
	QueryConfigTemplate(ctx context.Context, in *QueryConfigTemplateReq, opts ...grpc.CallOption) (*QueryConfigTemplateResp, error)
	QueryConfigTemplateList(ctx context.Context, in *QueryConfigTemplateListReq, opts ...grpc.CallOption) (*QueryConfigTemplateListResp, error)
	CreateTemplateVersion(ctx context.Context, in *CreateTemplateVersionReq, opts ...grpc.CallOption) (*CreateTemplateVersionResp, error)
	DeleteTemplateVersion(ctx context.Context, in *DeleteTemplateVersionReq, opts ...grpc.CallOption) (*DeleteTemplateVersionResp, error)
	UpdateTemplateVersion(ctx context.Context, in *UpdateTemplateVersionReq, opts ...grpc.CallOption) (*UpdateTemplateVersionResp, error)
	QueryTemplateVersion(ctx context.Context, in *QueryTemplateVersionReq, opts ...grpc.CallOption) (*QueryTemplateVersionResp, error)
	QueryTemplateVersionList(ctx context.Context, in *QueryTemplateVersionListReq, opts ...grpc.CallOption) (*QueryTemplateVersionListResp, error)
	CreateConfigTemplateBinding(ctx context.Context, in *CreateConfigTemplateBindingReq, opts ...grpc.CallOption) (*CreateConfigTemplateBindingResp, error)
	DeleteConfigTemplateBinding(ctx context.Context, in *DeleteConfigTemplateBindingReq, opts ...grpc.CallOption) (*DeleteConfigTemplateBindingResp, error)
	SyncConfigTemplateBinding(ctx context.Context, in *SyncConfigTemplateBindingReq, opts ...grpc.CallOption) (*SyncConfigTemplateBindingResp, error)
	QueryConfigTemplateBinding(ctx context.Context, in *QueryConfigTemplateBindingReq, opts ...grpc.CallOption) (*QueryConfigTemplateBindingResp, error)
	QueryConfigTemplateBindingList(ctx context.Context, in *QueryConfigTemplateBindingListReq, opts ...grpc.CallOption) (*QueryConfigTemplateBindingListResp, error)
	CreateVariable(ctx context.Context, in *CreateVariableReq, opts ...grpc.CallOption) (*CreateVariableResp, error)
	UpdateVariable(ctx context.Context, in *UpdateVariableReq, opts ...grpc.CallOption) (*UpdateVariableResp, error)
	DeleteVariable(ctx context.Context, in *DeleteVariableReq, opts ...grpc.CallOption) (*DeleteVariableResp, error)
	QueryVariable(ctx context.Context, in *QueryVariableReq, opts ...grpc.CallOption) (*QueryVariableResp, error)
	QueryVariableList(ctx context.Context, in *QueryVariableListReq, opts ...grpc.CallOption) (*QueryVariableListResp, error)
}

type accessClient struct {
	cc *grpc.ClientConn
}

func NewAccessClient(cc *grpc.ClientConn) AccessClient {
	return &accessClient{cc}
}

func (c *accessClient) CreateBusiness(ctx context.Context, in *CreateBusinessReq, opts ...grpc.CallOption) (*CreateBusinessResp, error) {
	out := new(CreateBusinessResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateBusiness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryBusiness(ctx context.Context, in *QueryBusinessReq, opts ...grpc.CallOption) (*QueryBusinessResp, error) {
	out := new(QueryBusinessResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryBusiness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryBusinessList(ctx context.Context, in *QueryBusinessListReq, opts ...grpc.CallOption) (*QueryBusinessListResp, error) {
	out := new(QueryBusinessListResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryBusinessList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UpdateBusiness(ctx context.Context, in *UpdateBusinessReq, opts ...grpc.CallOption) (*UpdateBusinessResp, error) {
	out := new(UpdateBusinessResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UpdateBusiness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error) {
	out := new(CreateAppResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryApp(ctx context.Context, in *QueryAppReq, opts ...grpc.CallOption) (*QueryAppResp, error) {
	out := new(QueryAppResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryAppList(ctx context.Context, in *QueryAppListReq, opts ...grpc.CallOption) (*QueryAppListResp, error) {
	out := new(QueryAppListResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryAppList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*UpdateAppResp, error) {
	out := new(UpdateAppResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppResp, error) {
	out := new(DeleteAppResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/DeleteApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateCluster(ctx context.Context, in *CreateClusterReq, opts ...grpc.CallOption) (*CreateClusterResp, error) {
	out := new(CreateClusterResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryCluster(ctx context.Context, in *QueryClusterReq, opts ...grpc.CallOption) (*QueryClusterResp, error) {
	out := new(QueryClusterResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryClusterList(ctx context.Context, in *QueryClusterListReq, opts ...grpc.CallOption) (*QueryClusterListResp, error) {
	out := new(QueryClusterListResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryClusterList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UpdateCluster(ctx context.Context, in *UpdateClusterReq, opts ...grpc.CallOption) (*UpdateClusterResp, error) {
	out := new(UpdateClusterResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UpdateCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) DeleteCluster(ctx context.Context, in *DeleteClusterReq, opts ...grpc.CallOption) (*DeleteClusterResp, error) {
	out := new(DeleteClusterResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/DeleteCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateZone(ctx context.Context, in *CreateZoneReq, opts ...grpc.CallOption) (*CreateZoneResp, error) {
	out := new(CreateZoneResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateZone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryZone(ctx context.Context, in *QueryZoneReq, opts ...grpc.CallOption) (*QueryZoneResp, error) {
	out := new(QueryZoneResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryZone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryZoneList(ctx context.Context, in *QueryZoneListReq, opts ...grpc.CallOption) (*QueryZoneListResp, error) {
	out := new(QueryZoneListResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryZoneList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UpdateZone(ctx context.Context, in *UpdateZoneReq, opts ...grpc.CallOption) (*UpdateZoneResp, error) {
	out := new(UpdateZoneResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UpdateZone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) DeleteZone(ctx context.Context, in *DeleteZoneReq, opts ...grpc.CallOption) (*DeleteZoneResp, error) {
	out := new(DeleteZoneResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/DeleteZone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateConfigSet(ctx context.Context, in *CreateConfigSetReq, opts ...grpc.CallOption) (*CreateConfigSetResp, error) {
	out := new(CreateConfigSetResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateConfigSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryConfigSet(ctx context.Context, in *QueryConfigSetReq, opts ...grpc.CallOption) (*QueryConfigSetResp, error) {
	out := new(QueryConfigSetResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryConfigSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryConfigSetList(ctx context.Context, in *QueryConfigSetListReq, opts ...grpc.CallOption) (*QueryConfigSetListResp, error) {
	out := new(QueryConfigSetListResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryConfigSetList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UpdateConfigSet(ctx context.Context, in *UpdateConfigSetReq, opts ...grpc.CallOption) (*UpdateConfigSetResp, error) {
	out := new(UpdateConfigSetResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UpdateConfigSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) DeleteConfigSet(ctx context.Context, in *DeleteConfigSetReq, opts ...grpc.CallOption) (*DeleteConfigSetResp, error) {
	out := new(DeleteConfigSetResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/DeleteConfigSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) LockConfigSet(ctx context.Context, in *LockConfigSetReq, opts ...grpc.CallOption) (*LockConfigSetResp, error) {
	out := new(LockConfigSetResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/LockConfigSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UnlockConfigSet(ctx context.Context, in *UnlockConfigSetReq, opts ...grpc.CallOption) (*UnlockConfigSetResp, error) {
	out := new(UnlockConfigSetResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UnlockConfigSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryConfigs(ctx context.Context, in *QueryConfigsReq, opts ...grpc.CallOption) (*QueryConfigsResp, error) {
	out := new(QueryConfigsResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryConfigsList(ctx context.Context, in *QueryConfigsListReq, opts ...grpc.CallOption) (*QueryConfigsListResp, error) {
	out := new(QueryConfigsListResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryConfigsList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryReleaseConfigs(ctx context.Context, in *QueryReleaseConfigsReq, opts ...grpc.CallOption) (*QueryReleaseConfigsResp, error) {
	out := new(QueryReleaseConfigsResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryReleaseConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateCommit(ctx context.Context, in *CreateCommitReq, opts ...grpc.CallOption) (*CreateCommitResp, error) {
	out := new(CreateCommitResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryCommit(ctx context.Context, in *QueryCommitReq, opts ...grpc.CallOption) (*QueryCommitResp, error) {
	out := new(QueryCommitResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryHistoryCommits(ctx context.Context, in *QueryHistoryCommitsReq, opts ...grpc.CallOption) (*QueryHistoryCommitsResp, error) {
	out := new(QueryHistoryCommitsResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryHistoryCommits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UpdateCommit(ctx context.Context, in *UpdateCommitReq, opts ...grpc.CallOption) (*UpdateCommitResp, error) {
	out := new(UpdateCommitResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UpdateCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CancelCommit(ctx context.Context, in *CancelCommitReq, opts ...grpc.CallOption) (*CancelCommitResp, error) {
	out := new(CancelCommitResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CancelCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) ConfirmCommit(ctx context.Context, in *ConfirmCommitReq, opts ...grpc.CallOption) (*ConfirmCommitResp, error) {
	out := new(ConfirmCommitResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/ConfirmCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) PreviewCommit(ctx context.Context, in *PreviewCommitReq, opts ...grpc.CallOption) (*PreviewCommitResp, error) {
	out := new(PreviewCommitResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/PreviewCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateMultiCommit(ctx context.Context, in *CreateMultiCommitReq, opts ...grpc.CallOption) (*CreateMultiCommitResp, error) {
	out := new(CreateMultiCommitResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryMultiCommit(ctx context.Context, in *QueryMultiCommitReq, opts ...grpc.CallOption) (*QueryMultiCommitResp, error) {
	out := new(QueryMultiCommitResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryHistoryMultiCommits(ctx context.Context, in *QueryHistoryMultiCommitsReq, opts ...grpc.CallOption) (*QueryHistoryMultiCommitsResp, error) {
	out := new(QueryHistoryMultiCommitsResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryHistoryMultiCommits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UpdateMultiCommit(ctx context.Context, in *UpdateMultiCommitReq, opts ...grpc.CallOption) (*UpdateMultiCommitResp, error) {
	out := new(UpdateMultiCommitResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UpdateMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CancelMultiCommit(ctx context.Context, in *CancelMultiCommitReq, opts ...grpc.CallOption) (*CancelMultiCommitResp, error) {
	out := new(CancelMultiCommitResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CancelMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) ConfirmMultiCommit(ctx context.Context, in *ConfirmMultiCommitReq, opts ...grpc.CallOption) (*ConfirmMultiCommitResp, error) {
	out := new(ConfirmMultiCommitResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/ConfirmMultiCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateReleaseResp, error) {
	out := new(CreateReleaseResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryRelease(ctx context.Context, in *QueryReleaseReq, opts ...grpc.CallOption) (*QueryReleaseResp, error) {
	out := new(QueryReleaseResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UpdateRelease(ctx context.Context, in *UpdateReleaseReq, opts ...grpc.CallOption) (*UpdateReleaseResp, error) {
	out := new(UpdateReleaseResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UpdateRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CancelRelease(ctx context.Context, in *CancelReleaseReq, opts ...grpc.CallOption) (*CancelReleaseResp, error) {
	out := new(CancelReleaseResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CancelRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) PublishRelease(ctx context.Context, in *PublishReleaseReq, opts ...grpc.CallOption) (*PublishReleaseResp, error) {
	out := new(PublishReleaseResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/PublishRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...grpc.CallOption) (*RollbackReleaseResp, error) {
	out := new(RollbackReleaseResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/RollbackRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryHistoryReleases(ctx context.Context, in *QueryHistoryReleasesReq, opts ...grpc.CallOption) (*QueryHistoryReleasesResp, error) {
	out := new(QueryHistoryReleasesResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryHistoryReleases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateMultiRelease(ctx context.Context, in *CreateMultiReleaseReq, opts ...grpc.CallOption) (*CreateMultiReleaseResp, error) {
	out := new(CreateMultiReleaseResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryMultiRelease(ctx context.Context, in *QueryMultiReleaseReq, opts ...grpc.CallOption) (*QueryMultiReleaseResp, error) {
	out := new(QueryMultiReleaseResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UpdateMultiRelease(ctx context.Context, in *UpdateMultiReleaseReq, opts ...grpc.CallOption) (*UpdateMultiReleaseResp, error) {
	out := new(UpdateMultiReleaseResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UpdateMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CancelMultiRelease(ctx context.Context, in *CancelMultiReleaseReq, opts ...grpc.CallOption) (*CancelMultiReleaseResp, error) {
	out := new(CancelMultiReleaseResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CancelMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) PublishMultiRelease(ctx context.Context, in *PublishMultiReleaseReq, opts ...grpc.CallOption) (*PublishMultiReleaseResp, error) {
	out := new(PublishMultiReleaseResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/PublishMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) RollbackMultiRelease(ctx context.Context, in *RollbackMultiReleaseReq, opts ...grpc.CallOption) (*RollbackMultiReleaseResp, error) {
	out := new(RollbackMultiReleaseResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/RollbackMultiRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryHistoryMultiReleases(ctx context.Context, in *QueryHistoryMultiReleasesReq, opts ...grpc.CallOption) (*QueryHistoryMultiReleasesResp, error) {
	out := new(QueryHistoryMultiReleasesResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryHistoryMultiReleases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryHistoryAppInstances(ctx context.Context, in *QueryHistoryAppInstancesReq, opts ...grpc.CallOption) (*QueryHistoryAppInstancesResp, error) {
	out := new(QueryHistoryAppInstancesResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryHistoryAppInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryReachableAppInstances(ctx context.Context, in *QueryReachableAppInstancesReq, opts ...grpc.CallOption) (*QueryReachableAppInstancesResp, error) {
	out := new(QueryReachableAppInstancesResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryReachableAppInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryMatchedAppInstances(ctx context.Context, in *QueryMatchedAppInstancesReq, opts ...grpc.CallOption) (*QueryMatchedAppInstancesResp, error) {
	out := new(QueryMatchedAppInstancesResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryMatchedAppInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryEffectedAppInstances(ctx context.Context, in *QueryEffectedAppInstancesReq, opts ...grpc.CallOption) (*QueryEffectedAppInstancesResp, error) {
	out := new(QueryEffectedAppInstancesResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryEffectedAppInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryAppInstanceRelease(ctx context.Context, in *QueryAppInstanceReleaseReq, opts ...grpc.CallOption) (*QueryAppInstanceReleaseResp, error) {
	out := new(QueryAppInstanceReleaseResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryAppInstanceRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateStrategy(ctx context.Context, in *CreateStrategyReq, opts ...grpc.CallOption) (*CreateStrategyResp, error) {
	out := new(CreateStrategyResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryStrategy(ctx context.Context, in *QueryStrategyReq, opts ...grpc.CallOption) (*QueryStrategyResp, error) {
	out := new(QueryStrategyResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryStrategyList(ctx context.Context, in *QueryStrategyListReq, opts ...grpc.CallOption) (*QueryStrategyListResp, error) {
	out := new(QueryStrategyListResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryStrategyList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) DeleteStrategy(ctx context.Context, in *DeleteStrategyReq, opts ...grpc.CallOption) (*DeleteStrategyResp, error) {
	out := new(DeleteStrategyResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/DeleteStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateShardingDB(ctx context.Context, in *CreateShardingDBReq, opts ...grpc.CallOption) (*CreateShardingDBResp, error) {
	out := new(CreateShardingDBResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateShardingDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryShardingDB(ctx context.Context, in *QueryShardingDBReq, opts ...grpc.CallOption) (*QueryShardingDBResp, error) {
	out := new(QueryShardingDBResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryShardingDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryShardingDBList(ctx context.Context, in *QueryShardingDBListReq, opts ...grpc.CallOption) (*QueryShardingDBListResp, error) {
	out := new(QueryShardingDBListResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryShardingDBList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UpdateShardingDB(ctx context.Context, in *UpdateShardingDBReq, opts ...grpc.CallOption) (*UpdateShardingDBResp, error) {
	out := new(UpdateShardingDBResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UpdateShardingDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateSharding(ctx context.Context, in *CreateShardingReq, opts ...grpc.CallOption) (*CreateShardingResp, error) {
	out := new(CreateShardingResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateSharding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QuerySharding(ctx context.Context, in *QueryShardingReq, opts ...grpc.CallOption) (*QueryShardingResp, error) {
	out := new(QueryShardingResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QuerySharding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UpdateSharding(ctx context.Context, in *UpdateShardingReq, opts ...grpc.CallOption) (*UpdateShardingResp, error) {
	out := new(UpdateShardingResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UpdateSharding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryAuditList(ctx context.Context, in *QueryAuditListReq, opts ...grpc.CallOption) (*QueryAuditListResp, error) {
	out := new(QueryAuditListResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryAuditList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) Integrate(ctx context.Context, in *IntegrateReq, opts ...grpc.CallOption) (*IntegrateResp, error) {
	out := new(IntegrateResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/Integrate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateConfigTemplateSet(ctx context.Context, in *CreateConfigTemplateSetReq, opts ...grpc.CallOption) (*CreateConfigTemplateSetResp, error) {
	out := new(CreateConfigTemplateSetResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateConfigTemplateSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) DeleteConfigTemplateSet(ctx context.Context, in *DeleteConfigTemplateSetReq, opts ...grpc.CallOption) (*DeleteConfigTemplateSetResp, error) {
	out := new(DeleteConfigTemplateSetResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/DeleteConfigTemplateSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UpdateConfigTemplateSet(ctx context.Context, in *UpdateConfigTemplateSetReq, opts ...grpc.CallOption) (*UpdateConfigTemplateSetResp, error) {
	out := new(UpdateConfigTemplateSetResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UpdateConfigTemplateSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryConfigTemplateSet(ctx context.Context, in *QueryConfigTemplateSetReq, opts ...grpc.CallOption) (*QueryConfigTemplateSetResp, error) {
	out := new(QueryConfigTemplateSetResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryConfigTemplateSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryConfigTemplateSetList(ctx context.Context, in *QueryConfigTemplateSetListReq, opts ...grpc.CallOption) (*QueryConfigTemplateSetListResp, error) {
	out := new(QueryConfigTemplateSetListResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryConfigTemplateSetList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateConfigTemplate(ctx context.Context, in *CreateConfigTemplateReq, opts ...grpc.CallOption) (*CreateConfigTemplateResp, error) {
	out := new(CreateConfigTemplateResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateConfigTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) DeleteConfigTemplate(ctx context.Context, in *DeleteConfigTemplateReq, opts ...grpc.CallOption) (*DeleteConfigTemplateResp, error) {
	out := new(DeleteConfigTemplateResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/DeleteConfigTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UpdateConfigTemplate(ctx context.Context, in *UpdateConfigTemplateReq, opts ...grpc.CallOption) (*UpdateConfigTemplateResp, error) {
	out := new(UpdateConfigTemplateResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UpdateConfigTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryConfigTemplate(ctx context.Context, in *QueryConfigTemplateReq, opts ...grpc.CallOption) (*QueryConfigTemplateResp, error) {
	out := new(QueryConfigTemplateResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryConfigTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryConfigTemplateList(ctx context.Context, in *QueryConfigTemplateListReq, opts ...grpc.CallOption) (*QueryConfigTemplateListResp, error) {
	out := new(QueryConfigTemplateListResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryConfigTemplateList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateTemplateVersion(ctx context.Context, in *CreateTemplateVersionReq, opts ...grpc.CallOption) (*CreateTemplateVersionResp, error) {
	out := new(CreateTemplateVersionResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateTemplateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) DeleteTemplateVersion(ctx context.Context, in *DeleteTemplateVersionReq, opts ...grpc.CallOption) (*DeleteTemplateVersionResp, error) {
	out := new(DeleteTemplateVersionResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/DeleteTemplateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UpdateTemplateVersion(ctx context.Context, in *UpdateTemplateVersionReq, opts ...grpc.CallOption) (*UpdateTemplateVersionResp, error) {
	out := new(UpdateTemplateVersionResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UpdateTemplateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryTemplateVersion(ctx context.Context, in *QueryTemplateVersionReq, opts ...grpc.CallOption) (*QueryTemplateVersionResp, error) {
	out := new(QueryTemplateVersionResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryTemplateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryTemplateVersionList(ctx context.Context, in *QueryTemplateVersionListReq, opts ...grpc.CallOption) (*QueryTemplateVersionListResp, error) {
	out := new(QueryTemplateVersionListResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryTemplateVersionList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateConfigTemplateBinding(ctx context.Context, in *CreateConfigTemplateBindingReq, opts ...grpc.CallOption) (*CreateConfigTemplateBindingResp, error) {
	out := new(CreateConfigTemplateBindingResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateConfigTemplateBinding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) DeleteConfigTemplateBinding(ctx context.Context, in *DeleteConfigTemplateBindingReq, opts ...grpc.CallOption) (*DeleteConfigTemplateBindingResp, error) {
	out := new(DeleteConfigTemplateBindingResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/DeleteConfigTemplateBinding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) SyncConfigTemplateBinding(ctx context.Context, in *SyncConfigTemplateBindingReq, opts ...grpc.CallOption) (*SyncConfigTemplateBindingResp, error) {
	out := new(SyncConfigTemplateBindingResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/SyncConfigTemplateBinding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryConfigTemplateBinding(ctx context.Context, in *QueryConfigTemplateBindingReq, opts ...grpc.CallOption) (*QueryConfigTemplateBindingResp, error) {
	out := new(QueryConfigTemplateBindingResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryConfigTemplateBinding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryConfigTemplateBindingList(ctx context.Context, in *QueryConfigTemplateBindingListReq, opts ...grpc.CallOption) (*QueryConfigTemplateBindingListResp, error) {
	out := new(QueryConfigTemplateBindingListResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryConfigTemplateBindingList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) CreateVariable(ctx context.Context, in *CreateVariableReq, opts ...grpc.CallOption) (*CreateVariableResp, error) {
	out := new(CreateVariableResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/CreateVariable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) UpdateVariable(ctx context.Context, in *UpdateVariableReq, opts ...grpc.CallOption) (*UpdateVariableResp, error) {
	out := new(UpdateVariableResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/UpdateVariable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) DeleteVariable(ctx context.Context, in *DeleteVariableReq, opts ...grpc.CallOption) (*DeleteVariableResp, error) {
	out := new(DeleteVariableResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/DeleteVariable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryVariable(ctx context.Context, in *QueryVariableReq, opts ...grpc.CallOption) (*QueryVariableResp, error) {
	out := new(QueryVariableResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryVariable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) QueryVariableList(ctx context.Context, in *QueryVariableListReq, opts ...grpc.CallOption) (*QueryVariableListResp, error) {
	out := new(QueryVariableListResp)
	err := grpc.Invoke(ctx, "/accessserver.Access/QueryVariableList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Access service

type AccessServer interface {
	CreateBusiness(context.Context, *CreateBusinessReq) (*CreateBusinessResp, error)
	QueryBusiness(context.Context, *QueryBusinessReq) (*QueryBusinessResp, error)
	QueryBusinessList(context.Context, *QueryBusinessListReq) (*QueryBusinessListResp, error)
	UpdateBusiness(context.Context, *UpdateBusinessReq) (*UpdateBusinessResp, error)
	CreateApp(context.Context, *CreateAppReq) (*CreateAppResp, error)
	QueryApp(context.Context, *QueryAppReq) (*QueryAppResp, error)
	QueryAppList(context.Context, *QueryAppListReq) (*QueryAppListResp, error)
	UpdateApp(context.Context, *UpdateAppReq) (*UpdateAppResp, error)
	DeleteApp(context.Context, *DeleteAppReq) (*DeleteAppResp, error)
	CreateCluster(context.Context, *CreateClusterReq) (*CreateClusterResp, error)
	QueryCluster(context.Context, *QueryClusterReq) (*QueryClusterResp, error)
	QueryClusterList(context.Context, *QueryClusterListReq) (*QueryClusterListResp, error)
	UpdateCluster(context.Context, *UpdateClusterReq) (*UpdateClusterResp, error)
	DeleteCluster(context.Context, *DeleteClusterReq) (*DeleteClusterResp, error)
	CreateZone(context.Context, *CreateZoneReq) (*CreateZoneResp, error)
	QueryZone(context.Context, *QueryZoneReq) (*QueryZoneResp, error)
	QueryZoneList(context.Context, *QueryZoneListReq) (*QueryZoneListResp, error)
	UpdateZone(context.Context, *UpdateZoneReq) (*UpdateZoneResp, error)
	DeleteZone(context.Context, *DeleteZoneReq) (*DeleteZoneResp, error)
	CreateConfigSet(context.Context, *CreateConfigSetReq) (*CreateConfigSetResp, error)
	QueryConfigSet(context.Context, *QueryConfigSetReq) (*QueryConfigSetResp, error)
	QueryConfigSetList(context.Context, *QueryConfigSetListReq) (*QueryConfigSetListResp, error)
	UpdateConfigSet(context.Context, *UpdateConfigSetReq) (*UpdateConfigSetResp, error)
	DeleteConfigSet(context.Context, *DeleteConfigSetReq) (*DeleteConfigSetResp, error)
	LockConfigSet(context.Context, *LockConfigSetReq) (*LockConfigSetResp, error)
	UnlockConfigSet(context.Context, *UnlockConfigSetReq) (*UnlockConfigSetResp, error)
	QueryConfigs(context.Context, *QueryConfigsReq) (*QueryConfigsResp, error)
	QueryConfigsList(context.Context, *QueryConfigsListReq) (*QueryConfigsListResp, error)
	QueryReleaseConfigs(context.Context, *QueryReleaseConfigsReq) (*QueryReleaseConfigsResp, error)
	CreateCommit(context.Context, *CreateCommitReq) (*CreateCommitResp, error)
	QueryCommit(context.Context, *QueryCommitReq) (*QueryCommitResp, error)
	QueryHistoryCommits(context.Context, *QueryHistoryCommitsReq) (*QueryHistoryCommitsResp, error)
	UpdateCommit(context.Context, *UpdateCommitReq) (*UpdateCommitResp, error)
	CancelCommit(context.Context, *CancelCommitReq) (*CancelCommitResp, error)
	ConfirmCommit(context.Context, *ConfirmCommitReq) (*ConfirmCommitResp, error)
	PreviewCommit(context.Context, *PreviewCommitReq) (*PreviewCommitResp, error)
	CreateMultiCommit(context.Context, *CreateMultiCommitReq) (*CreateMultiCommitResp, error)
	QueryMultiCommit(context.Context, *QueryMultiCommitReq) (*QueryMultiCommitResp, error)
	QueryHistoryMultiCommits(context.Context, *QueryHistoryMultiCommitsReq) (*QueryHistoryMultiCommitsResp, error)
	UpdateMultiCommit(context.Context, *UpdateMultiCommitReq) (*UpdateMultiCommitResp, error)
	CancelMultiCommit(context.Context, *CancelMultiCommitReq) (*CancelMultiCommitResp, error)
	ConfirmMultiCommit(context.Context, *ConfirmMultiCommitReq) (*ConfirmMultiCommitResp, error)
	CreateRelease(context.Context, *CreateReleaseReq) (*CreateReleaseResp, error)
	QueryRelease(context.Context, *QueryReleaseReq) (*QueryReleaseResp, error)
	UpdateRelease(context.Context, *UpdateReleaseReq) (*UpdateReleaseResp, error)
	CancelRelease(context.Context, *CancelReleaseReq) (*CancelReleaseResp, error)
	PublishRelease(context.Context, *PublishReleaseReq) (*PublishReleaseResp, error)
	RollbackRelease(context.Context, *RollbackReleaseReq) (*RollbackReleaseResp, error)
	QueryHistoryReleases(context.Context, *QueryHistoryReleasesReq) (*QueryHistoryReleasesResp, error)
	CreateMultiRelease(context.Context, *CreateMultiReleaseReq) (*CreateMultiReleaseResp, error)
	QueryMultiRelease(context.Context, *QueryMultiReleaseReq) (*QueryMultiReleaseResp, error)
	UpdateMultiRelease(context.Context, *UpdateMultiReleaseReq) (*UpdateMultiReleaseResp, error)
	CancelMultiRelease(context.Context, *CancelMultiReleaseReq) (*CancelMultiReleaseResp, error)
	PublishMultiRelease(context.Context, *PublishMultiReleaseReq) (*PublishMultiReleaseResp, error)
	RollbackMultiRelease(context.Context, *RollbackMultiReleaseReq) (*RollbackMultiReleaseResp, error)
	QueryHistoryMultiReleases(context.Context, *QueryHistoryMultiReleasesReq) (*QueryHistoryMultiReleasesResp, error)
	QueryHistoryAppInstances(context.Context, *QueryHistoryAppInstancesReq) (*QueryHistoryAppInstancesResp, error)
	QueryReachableAppInstances(context.Context, *QueryReachableAppInstancesReq) (*QueryReachableAppInstancesResp, error)
	QueryMatchedAppInstances(context.Context, *QueryMatchedAppInstancesReq) (*QueryMatchedAppInstancesResp, error)
	QueryEffectedAppInstances(context.Context, *QueryEffectedAppInstancesReq) (*QueryEffectedAppInstancesResp, error)
	QueryAppInstanceRelease(context.Context, *QueryAppInstanceReleaseReq) (*QueryAppInstanceReleaseResp, error)
	CreateStrategy(context.Context, *CreateStrategyReq) (*CreateStrategyResp, error)
	QueryStrategy(context.Context, *QueryStrategyReq) (*QueryStrategyResp, error)
	QueryStrategyList(context.Context, *QueryStrategyListReq) (*QueryStrategyListResp, error)
	DeleteStrategy(context.Context, *DeleteStrategyReq) (*DeleteStrategyResp, error)
	CreateShardingDB(context.Context, *CreateShardingDBReq) (*CreateShardingDBResp, error)
	QueryShardingDB(context.Context, *QueryShardingDBReq) (*QueryShardingDBResp, error)
	QueryShardingDBList(context.Context, *QueryShardingDBListReq) (*QueryShardingDBListResp, error)
	UpdateShardingDB(context.Context, *UpdateShardingDBReq) (*UpdateShardingDBResp, error)
	CreateSharding(context.Context, *CreateShardingReq) (*CreateShardingResp, error)
	QuerySharding(context.Context, *QueryShardingReq) (*QueryShardingResp, error)
	UpdateSharding(context.Context, *UpdateShardingReq) (*UpdateShardingResp, error)
	QueryAuditList(context.Context, *QueryAuditListReq) (*QueryAuditListResp, error)
	Integrate(context.Context, *IntegrateReq) (*IntegrateResp, error)
	CreateConfigTemplateSet(context.Context, *CreateConfigTemplateSetReq) (*CreateConfigTemplateSetResp, error)
	DeleteConfigTemplateSet(context.Context, *DeleteConfigTemplateSetReq) (*DeleteConfigTemplateSetResp, error)
	UpdateConfigTemplateSet(context.Context, *UpdateConfigTemplateSetReq) (*UpdateConfigTemplateSetResp, error)
	QueryConfigTemplateSet(context.Context, *QueryConfigTemplateSetReq) (*QueryConfigTemplateSetResp, error)
	QueryConfigTemplateSetList(context.Context, *QueryConfigTemplateSetListReq) (*QueryConfigTemplateSetListResp, error)
	CreateConfigTemplate(context.Context, *CreateConfigTemplateReq) (*CreateConfigTemplateResp, error)
	DeleteConfigTemplate(context.Context, *DeleteConfigTemplateReq) (*DeleteConfigTemplateResp, error)
	UpdateConfigTemplate(context.Context, *UpdateConfigTemplateReq) (*UpdateConfigTemplateResp, error)
	QueryConfigTemplate(context.Context, *QueryConfigTemplateReq) (*QueryConfigTemplateResp, error)
	QueryConfigTemplateList(context.Context, *QueryConfigTemplateListReq) (*QueryConfigTemplateListResp, error)
	CreateTemplateVersion(context.Context, *CreateTemplateVersionReq) (*CreateTemplateVersionResp, error)
	DeleteTemplateVersion(context.Context, *DeleteTemplateVersionReq) (*DeleteTemplateVersionResp, error)
	UpdateTemplateVersion(context.Context, *UpdateTemplateVersionReq) (*UpdateTemplateVersionResp, error)
	QueryTemplateVersion(context.Context, *QueryTemplateVersionReq) (*QueryTemplateVersionResp, error)
	QueryTemplateVersionList(context.Context, *QueryTemplateVersionListReq) (*QueryTemplateVersionListResp, error)
	CreateConfigTemplateBinding(context.Context, *CreateConfigTemplateBindingReq) (*CreateConfigTemplateBindingResp, error)
	DeleteConfigTemplateBinding(context.Context, *DeleteConfigTemplateBindingReq) (*DeleteConfigTemplateBindingResp, error)
	SyncConfigTemplateBinding(context.Context, *SyncConfigTemplateBindingReq) (*SyncConfigTemplateBindingResp, error)
	QueryConfigTemplateBinding(context.Context, *QueryConfigTemplateBindingReq) (*QueryConfigTemplateBindingResp, error)
	QueryConfigTemplateBindingList(context.Context, *QueryConfigTemplateBindingListReq) (*QueryConfigTemplateBindingListResp, error)
	CreateVariable(context.Context, *CreateVariableReq) (*CreateVariableResp, error)
	UpdateVariable(context.Context, *UpdateVariableReq) (*UpdateVariableResp, error)
	DeleteVariable(context.Context, *DeleteVariableReq) (*DeleteVariableResp, error)
	QueryVariable(context.Context, *QueryVariableReq) (*QueryVariableResp, error)
	QueryVariableList(context.Context, *QueryVariableListReq) (*QueryVariableListResp, error)
}

func RegisterAccessServer(s *grpc.Server, srv AccessServer) {
	s.RegisterService(&_Access_serviceDesc, srv)
}

func _Access_CreateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateBusiness(ctx, req.(*CreateBusinessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBusinessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryBusiness(ctx, req.(*QueryBusinessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryBusinessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBusinessListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryBusinessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryBusinessList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryBusinessList(ctx, req.(*QueryBusinessListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UpdateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UpdateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UpdateBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UpdateBusiness(ctx, req.(*UpdateBusinessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateApp(ctx, req.(*CreateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryApp(ctx, req.(*QueryAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryAppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryAppList(ctx, req.(*QueryAppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UpdateApp(ctx, req.(*UpdateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).DeleteApp(ctx, req.(*DeleteAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateCluster(ctx, req.(*CreateClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryCluster(ctx, req.(*QueryClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryClusterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClusterListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryClusterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryClusterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryClusterList(ctx, req.(*QueryClusterListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UpdateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UpdateCluster(ctx, req.(*UpdateClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).DeleteCluster(ctx, req.(*DeleteClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateZone(ctx, req.(*CreateZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryZone(ctx, req.(*QueryZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryZoneList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryZoneListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryZoneList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryZoneList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryZoneList(ctx, req.(*QueryZoneListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UpdateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UpdateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UpdateZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UpdateZone(ctx, req.(*UpdateZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_DeleteZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).DeleteZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/DeleteZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).DeleteZone(ctx, req.(*DeleteZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateConfigSet(ctx, req.(*CreateConfigSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryConfigSet(ctx, req.(*QueryConfigSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryConfigSetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigSetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryConfigSetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryConfigSetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryConfigSetList(ctx, req.(*QueryConfigSetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UpdateConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UpdateConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UpdateConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UpdateConfigSet(ctx, req.(*UpdateConfigSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_DeleteConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).DeleteConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/DeleteConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).DeleteConfigSet(ctx, req.(*DeleteConfigSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_LockConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockConfigSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).LockConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/LockConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).LockConfigSet(ctx, req.(*LockConfigSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UnlockConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockConfigSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UnlockConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UnlockConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UnlockConfigSet(ctx, req.(*UnlockConfigSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryConfigs(ctx, req.(*QueryConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryConfigsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryConfigsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryConfigsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryConfigsList(ctx, req.(*QueryConfigsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryReleaseConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReleaseConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryReleaseConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryReleaseConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryReleaseConfigs(ctx, req.(*QueryReleaseConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateCommit(ctx, req.(*CreateCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryCommit(ctx, req.(*QueryCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryHistoryCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryHistoryCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryHistoryCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryHistoryCommits(ctx, req.(*QueryHistoryCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UpdateCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UpdateCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UpdateCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UpdateCommit(ctx, req.(*UpdateCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CancelCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CancelCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CancelCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CancelCommit(ctx, req.(*CancelCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_ConfirmCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).ConfirmCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/ConfirmCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).ConfirmCommit(ctx, req.(*ConfirmCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_PreviewCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).PreviewCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/PreviewCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).PreviewCommit(ctx, req.(*PreviewCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateMultiCommit(ctx, req.(*CreateMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryMultiCommit(ctx, req.(*QueryMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryHistoryMultiCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryMultiCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryHistoryMultiCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryHistoryMultiCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryHistoryMultiCommits(ctx, req.(*QueryHistoryMultiCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UpdateMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UpdateMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UpdateMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UpdateMultiCommit(ctx, req.(*UpdateMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CancelMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CancelMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CancelMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CancelMultiCommit(ctx, req.(*CancelMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_ConfirmMultiCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmMultiCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).ConfirmMultiCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/ConfirmMultiCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).ConfirmMultiCommit(ctx, req.(*ConfirmMultiCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateRelease(ctx, req.(*CreateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryRelease(ctx, req.(*QueryReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UpdateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UpdateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UpdateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UpdateRelease(ctx, req.(*UpdateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CancelRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CancelRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CancelRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CancelRelease(ctx, req.(*CancelReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_PublishRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).PublishRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/PublishRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).PublishRelease(ctx, req.(*PublishReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_RollbackRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).RollbackRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/RollbackRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).RollbackRelease(ctx, req.(*RollbackReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryHistoryReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryHistoryReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryHistoryReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryHistoryReleases(ctx, req.(*QueryHistoryReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateMultiRelease(ctx, req.(*CreateMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryMultiRelease(ctx, req.(*QueryMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UpdateMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UpdateMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UpdateMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UpdateMultiRelease(ctx, req.(*UpdateMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CancelMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CancelMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CancelMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CancelMultiRelease(ctx, req.(*CancelMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_PublishMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).PublishMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/PublishMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).PublishMultiRelease(ctx, req.(*PublishMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_RollbackMultiRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackMultiReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).RollbackMultiRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/RollbackMultiRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).RollbackMultiRelease(ctx, req.(*RollbackMultiReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryHistoryMultiReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryMultiReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryHistoryMultiReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryHistoryMultiReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryHistoryMultiReleases(ctx, req.(*QueryHistoryMultiReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryHistoryAppInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoryAppInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryHistoryAppInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryHistoryAppInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryHistoryAppInstances(ctx, req.(*QueryHistoryAppInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryReachableAppInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReachableAppInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryReachableAppInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryReachableAppInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryReachableAppInstances(ctx, req.(*QueryReachableAppInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryMatchedAppInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMatchedAppInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryMatchedAppInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryMatchedAppInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryMatchedAppInstances(ctx, req.(*QueryMatchedAppInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryEffectedAppInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEffectedAppInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryEffectedAppInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryEffectedAppInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryEffectedAppInstances(ctx, req.(*QueryEffectedAppInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryAppInstanceRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppInstanceReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryAppInstanceRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryAppInstanceRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryAppInstanceRelease(ctx, req.(*QueryAppInstanceReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateStrategy(ctx, req.(*CreateStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryStrategy(ctx, req.(*QueryStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryStrategyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStrategyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryStrategyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryStrategyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryStrategyList(ctx, req.(*QueryStrategyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_DeleteStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).DeleteStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/DeleteStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).DeleteStrategy(ctx, req.(*DeleteStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateShardingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShardingDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateShardingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateShardingDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateShardingDB(ctx, req.(*CreateShardingDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryShardingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShardingDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryShardingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryShardingDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryShardingDB(ctx, req.(*QueryShardingDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryShardingDBList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShardingDBListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryShardingDBList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryShardingDBList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryShardingDBList(ctx, req.(*QueryShardingDBListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UpdateShardingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShardingDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UpdateShardingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UpdateShardingDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UpdateShardingDB(ctx, req.(*UpdateShardingDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateSharding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShardingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateSharding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateSharding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateSharding(ctx, req.(*CreateShardingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QuerySharding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShardingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QuerySharding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QuerySharding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QuerySharding(ctx, req.(*QueryShardingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UpdateSharding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShardingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UpdateSharding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UpdateSharding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UpdateSharding(ctx, req.(*UpdateShardingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryAuditList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuditListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryAuditList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryAuditList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryAuditList(ctx, req.(*QueryAuditListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_Integrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).Integrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/Integrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).Integrate(ctx, req.(*IntegrateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateConfigTemplateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigTemplateSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateConfigTemplateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateConfigTemplateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateConfigTemplateSet(ctx, req.(*CreateConfigTemplateSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_DeleteConfigTemplateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigTemplateSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).DeleteConfigTemplateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/DeleteConfigTemplateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).DeleteConfigTemplateSet(ctx, req.(*DeleteConfigTemplateSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UpdateConfigTemplateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigTemplateSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UpdateConfigTemplateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UpdateConfigTemplateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UpdateConfigTemplateSet(ctx, req.(*UpdateConfigTemplateSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryConfigTemplateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigTemplateSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryConfigTemplateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryConfigTemplateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryConfigTemplateSet(ctx, req.(*QueryConfigTemplateSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryConfigTemplateSetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigTemplateSetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryConfigTemplateSetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryConfigTemplateSetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryConfigTemplateSetList(ctx, req.(*QueryConfigTemplateSetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateConfigTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateConfigTemplate(ctx, req.(*CreateConfigTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_DeleteConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).DeleteConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/DeleteConfigTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).DeleteConfigTemplate(ctx, req.(*DeleteConfigTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UpdateConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UpdateConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UpdateConfigTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UpdateConfigTemplate(ctx, req.(*UpdateConfigTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryConfigTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryConfigTemplate(ctx, req.(*QueryConfigTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryConfigTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigTemplateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryConfigTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryConfigTemplateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryConfigTemplateList(ctx, req.(*QueryConfigTemplateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateTemplateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateTemplateVersion(ctx, req.(*CreateTemplateVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_DeleteTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).DeleteTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/DeleteTemplateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).DeleteTemplateVersion(ctx, req.(*DeleteTemplateVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UpdateTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UpdateTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UpdateTemplateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UpdateTemplateVersion(ctx, req.(*UpdateTemplateVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTemplateVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryTemplateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryTemplateVersion(ctx, req.(*QueryTemplateVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryTemplateVersionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTemplateVersionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryTemplateVersionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryTemplateVersionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryTemplateVersionList(ctx, req.(*QueryTemplateVersionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateConfigTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateConfigTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateConfigTemplateBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateConfigTemplateBinding(ctx, req.(*CreateConfigTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_DeleteConfigTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).DeleteConfigTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/DeleteConfigTemplateBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).DeleteConfigTemplateBinding(ctx, req.(*DeleteConfigTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_SyncConfigTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncConfigTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).SyncConfigTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/SyncConfigTemplateBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).SyncConfigTemplateBinding(ctx, req.(*SyncConfigTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryConfigTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryConfigTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryConfigTemplateBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryConfigTemplateBinding(ctx, req.(*QueryConfigTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryConfigTemplateBindingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigTemplateBindingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryConfigTemplateBindingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryConfigTemplateBindingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryConfigTemplateBindingList(ctx, req.(*QueryConfigTemplateBindingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_CreateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).CreateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/CreateVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).CreateVariable(ctx, req.(*CreateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_UpdateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).UpdateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/UpdateVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).UpdateVariable(ctx, req.(*UpdateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_DeleteVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).DeleteVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/DeleteVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).DeleteVariable(ctx, req.(*DeleteVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryVariable(ctx, req.(*QueryVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_QueryVariableList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVariableListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).QueryVariableList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accessserver.Access/QueryVariableList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).QueryVariableList(ctx, req.(*QueryVariableListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Access_serviceDesc = grpc.ServiceDesc{
	ServiceName: "accessserver.Access",
	HandlerType: (*AccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBusiness",
			Handler:    _Access_CreateBusiness_Handler,
		},
		{
			MethodName: "QueryBusiness",
			Handler:    _Access_QueryBusiness_Handler,
		},
		{
			MethodName: "QueryBusinessList",
			Handler:    _Access_QueryBusinessList_Handler,
		},
		{
			MethodName: "UpdateBusiness",
			Handler:    _Access_UpdateBusiness_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _Access_CreateApp_Handler,
		},
		{
			MethodName: "QueryApp",
			Handler:    _Access_QueryApp_Handler,
		},
		{
			MethodName: "QueryAppList",
			Handler:    _Access_QueryAppList_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _Access_UpdateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _Access_DeleteApp_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _Access_CreateCluster_Handler,
		},
		{
			MethodName: "QueryCluster",
			Handler:    _Access_QueryCluster_Handler,
		},
		{
			MethodName: "QueryClusterList",
			Handler:    _Access_QueryClusterList_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _Access_UpdateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _Access_DeleteCluster_Handler,
		},
		{
			MethodName: "CreateZone",
			Handler:    _Access_CreateZone_Handler,
		},
		{
			MethodName: "QueryZone",
			Handler:    _Access_QueryZone_Handler,
		},
		{
			MethodName: "QueryZoneList",
			Handler:    _Access_QueryZoneList_Handler,
		},
		{
			MethodName: "UpdateZone",
			Handler:    _Access_UpdateZone_Handler,
		},
		{
			MethodName: "DeleteZone",
			Handler:    _Access_DeleteZone_Handler,
		},
		{
			MethodName: "CreateConfigSet",
			Handler:    _Access_CreateConfigSet_Handler,
		},
		{
			MethodName: "QueryConfigSet",
			Handler:    _Access_QueryConfigSet_Handler,
		},
		{
			MethodName: "QueryConfigSetList",
			Handler:    _Access_QueryConfigSetList_Handler,
		},
		{
			MethodName: "UpdateConfigSet",
			Handler:    _Access_UpdateConfigSet_Handler,
		},
		{
			MethodName: "DeleteConfigSet",
			Handler:    _Access_DeleteConfigSet_Handler,
		},
		{
			MethodName: "LockConfigSet",
			Handler:    _Access_LockConfigSet_Handler,
		},
		{
			MethodName: "UnlockConfigSet",
			Handler:    _Access_UnlockConfigSet_Handler,
		},
		{
			MethodName: "QueryConfigs",
			Handler:    _Access_QueryConfigs_Handler,
		},
		{
			MethodName: "QueryConfigsList",
			Handler:    _Access_QueryConfigsList_Handler,
		},
		{
			MethodName: "QueryReleaseConfigs",
			Handler:    _Access_QueryReleaseConfigs_Handler,
		},
		{
			MethodName: "CreateCommit",
			Handler:    _Access_CreateCommit_Handler,
		},
		{
			MethodName: "QueryCommit",
			Handler:    _Access_QueryCommit_Handler,
		},
		{
			MethodName: "QueryHistoryCommits",
			Handler:    _Access_QueryHistoryCommits_Handler,
		},
		{
			MethodName: "UpdateCommit",
			Handler:    _Access_UpdateCommit_Handler,
		},
		{
			MethodName: "CancelCommit",
			Handler:    _Access_CancelCommit_Handler,
		},
		{
			MethodName: "ConfirmCommit",
			Handler:    _Access_ConfirmCommit_Handler,
		},
		{
			MethodName: "PreviewCommit",
			Handler:    _Access_PreviewCommit_Handler,
		},
		{
			MethodName: "CreateMultiCommit",
			Handler:    _Access_CreateMultiCommit_Handler,
		},
		{
			MethodName: "QueryMultiCommit",
			Handler:    _Access_QueryMultiCommit_Handler,
		},
		{
			MethodName: "QueryHistoryMultiCommits",
			Handler:    _Access_QueryHistoryMultiCommits_Handler,
		},
		{
			MethodName: "UpdateMultiCommit",
			Handler:    _Access_UpdateMultiCommit_Handler,
		},
		{
			MethodName: "CancelMultiCommit",
			Handler:    _Access_CancelMultiCommit_Handler,
		},
		{
			MethodName: "ConfirmMultiCommit",
			Handler:    _Access_ConfirmMultiCommit_Handler,
		},
		{
			MethodName: "CreateRelease",
			Handler:    _Access_CreateRelease_Handler,
		},
		{
			MethodName: "QueryRelease",
			Handler:    _Access_QueryRelease_Handler,
		},
		{
			MethodName: "UpdateRelease",
			Handler:    _Access_UpdateRelease_Handler,
		},
		{
			MethodName: "CancelRelease",
			Handler:    _Access_CancelRelease_Handler,
		},
		{
			MethodName: "PublishRelease",
			Handler:    _Access_PublishRelease_Handler,
		},
		{
			MethodName: "RollbackRelease",
			Handler:    _Access_RollbackRelease_Handler,
		},
		{
			MethodName: "QueryHistoryReleases",
			Handler:    _Access_QueryHistoryReleases_Handler,
		},
		{
			MethodName: "CreateMultiRelease",
			Handler:    _Access_CreateMultiRelease_Handler,
		},
		{
			MethodName: "QueryMultiRelease",
			Handler:    _Access_QueryMultiRelease_Handler,
		},
		{
			MethodName: "UpdateMultiRelease",
			Handler:    _Access_UpdateMultiRelease_Handler,
		},
		{
			MethodName: "CancelMultiRelease",
			Handler:    _Access_CancelMultiRelease_Handler,
		},
		{
			MethodName: "PublishMultiRelease",
			Handler:    _Access_PublishMultiRelease_Handler,
		},
		{
			MethodName: "RollbackMultiRelease",
			Handler:    _Access_RollbackMultiRelease_Handler,
		},
		{
			MethodName: "QueryHistoryMultiReleases",
			Handler:    _Access_QueryHistoryMultiReleases_Handler,
		},
		{
			MethodName: "QueryHistoryAppInstances",
			Handler:    _Access_QueryHistoryAppInstances_Handler,
		},
		{
			MethodName: "QueryReachableAppInstances",
			Handler:    _Access_QueryReachableAppInstances_Handler,
		},
		{
			MethodName: "QueryMatchedAppInstances",
			Handler:    _Access_QueryMatchedAppInstances_Handler,
		},
		{
			MethodName: "QueryEffectedAppInstances",
			Handler:    _Access_QueryEffectedAppInstances_Handler,
		},
		{
			MethodName: "QueryAppInstanceRelease",
			Handler:    _Access_QueryAppInstanceRelease_Handler,
		},
		{
			MethodName: "CreateStrategy",
			Handler:    _Access_CreateStrategy_Handler,
		},
		{
			MethodName: "QueryStrategy",
			Handler:    _Access_QueryStrategy_Handler,
		},
		{
			MethodName: "QueryStrategyList",
			Handler:    _Access_QueryStrategyList_Handler,
		},
		{
			MethodName: "DeleteStrategy",
			Handler:    _Access_DeleteStrategy_Handler,
		},
		{
			MethodName: "CreateShardingDB",
			Handler:    _Access_CreateShardingDB_Handler,
		},
		{
			MethodName: "QueryShardingDB",
			Handler:    _Access_QueryShardingDB_Handler,
		},
		{
			MethodName: "QueryShardingDBList",
			Handler:    _Access_QueryShardingDBList_Handler,
		},
		{
			MethodName: "UpdateShardingDB",
			Handler:    _Access_UpdateShardingDB_Handler,
		},
		{
			MethodName: "CreateSharding",
			Handler:    _Access_CreateSharding_Handler,
		},
		{
			MethodName: "QuerySharding",
			Handler:    _Access_QuerySharding_Handler,
		},
		{
			MethodName: "UpdateSharding",
			Handler:    _Access_UpdateSharding_Handler,
		},
		{
			MethodName: "QueryAuditList",
			Handler:    _Access_QueryAuditList_Handler,
		},
		{
			MethodName: "Integrate",
			Handler:    _Access_Integrate_Handler,
		},
		{
			MethodName: "CreateConfigTemplateSet",
			Handler:    _Access_CreateConfigTemplateSet_Handler,
		},
		{
			MethodName: "DeleteConfigTemplateSet",
			Handler:    _Access_DeleteConfigTemplateSet_Handler,
		},
		{
			MethodName: "UpdateConfigTemplateSet",
			Handler:    _Access_UpdateConfigTemplateSet_Handler,
		},
		{
			MethodName: "QueryConfigTemplateSet",
			Handler:    _Access_QueryConfigTemplateSet_Handler,
		},
		{
			MethodName: "QueryConfigTemplateSetList",
			Handler:    _Access_QueryConfigTemplateSetList_Handler,
		},
		{
			MethodName: "CreateConfigTemplate",
			Handler:    _Access_CreateConfigTemplate_Handler,
		},
		{
			MethodName: "DeleteConfigTemplate",
			Handler:    _Access_DeleteConfigTemplate_Handler,
		},
		{
			MethodName: "UpdateConfigTemplate",
			Handler:    _Access_UpdateConfigTemplate_Handler,
		},
		{
			MethodName: "QueryConfigTemplate",
			Handler:    _Access_QueryConfigTemplate_Handler,
		},
		{
			MethodName: "QueryConfigTemplateList",
			Handler:    _Access_QueryConfigTemplateList_Handler,
		},
		{
			MethodName: "CreateTemplateVersion",
			Handler:    _Access_CreateTemplateVersion_Handler,
		},
		{
			MethodName: "DeleteTemplateVersion",
			Handler:    _Access_DeleteTemplateVersion_Handler,
		},
		{
			MethodName: "UpdateTemplateVersion",
			Handler:    _Access_UpdateTemplateVersion_Handler,
		},
		{
			MethodName: "QueryTemplateVersion",
			Handler:    _Access_QueryTemplateVersion_Handler,
		},
		{
			MethodName: "QueryTemplateVersionList",
			Handler:    _Access_QueryTemplateVersionList_Handler,
		},
		{
			MethodName: "CreateConfigTemplateBinding",
			Handler:    _Access_CreateConfigTemplateBinding_Handler,
		},
		{
			MethodName: "DeleteConfigTemplateBinding",
			Handler:    _Access_DeleteConfigTemplateBinding_Handler,
		},
		{
			MethodName: "SyncConfigTemplateBinding",
			Handler:    _Access_SyncConfigTemplateBinding_Handler,
		},
		{
			MethodName: "QueryConfigTemplateBinding",
			Handler:    _Access_QueryConfigTemplateBinding_Handler,
		},
		{
			MethodName: "QueryConfigTemplateBindingList",
			Handler:    _Access_QueryConfigTemplateBindingList_Handler,
		},
		{
			MethodName: "CreateVariable",
			Handler:    _Access_CreateVariable_Handler,
		},
		{
			MethodName: "UpdateVariable",
			Handler:    _Access_UpdateVariable_Handler,
		},
		{
			MethodName: "DeleteVariable",
			Handler:    _Access_DeleteVariable_Handler,
		},
		{
			MethodName: "QueryVariable",
			Handler:    _Access_QueryVariable_Handler,
		},
		{
			MethodName: "QueryVariableList",
			Handler:    _Access_QueryVariableList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accessserver.proto",
}

func init() { proto.RegisterFile("accessserver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 23515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0xbd, 0x09, 0x7c, 0x15, 0xd7,
	0x75, 0x30, 0xfe, 0xdd, 0xf7, 0xb4, 0xc0, 0x35, 0xb6, 0x61, 0x0c, 0xb6, 0x2c, 0x6c, 0xfc, 0x18,
	0x13, 0x2f, 0x63, 0x04, 0xd2, 0x88, 0xf5, 0xd9, 0x89, 0xb9, 0x42, 0x60, 0x2b, 0xde, 0xf0, 0xf3,
	0xbe, 0x60, 0xe7, 0x49, 0x7a, 0x80, 0x8c, 0x90, 0x9e, 0x35, 0x02, 0x84, 0x5d, 0xa5, 0x02, 0x04,
	0x08, 0x23, 0x10, 0xbe, 0x88, 0xc5, 0x02, 0xb3, 0x99, 0xcd, 0x0b, 0x12, 0xc6, 0x0e, 0x08, 0x21,
	0x20, 0x69, 0xda, 0x26, 0x69, 0xd2, 0xa4, 0xa6, 0x59, 0x9a, 0x34, 0x4d, 0x9a, 0x46, 0xf3, 0x9e,
	0xd4, 0xfc, 0x5b, 0x9a, 0x36, 0x4d, 0xda, 0xa4, 0x4d, 0xff, 0xbf, 0x99, 0x7b, 0x67, 0xde, 0x9d,
	0x99, 0x3b, 0x6f, 0x11, 0x12, 0x08, 0x1e, 0xfd, 0xbe, 0x24, 0xe8, 0xdd, 0x33, 0x77, 0x39, 0xf7,
	0x6c, 0xf7, 0x9c, 0x73, 0xcf, 0x85, 0x42, 0xb0, 0xac, 0x2c, 0xa4, 0x28, 0x4a, 0xa8, 0x66, 0x59,
	0xa8, 0x66, 0x52, 0xb8, 0xa6, 0xba, 0xb6, 0x5a, 0x18, 0xc1, 0xfe, 0x96, 0x9b, 0x57, 0xba, 0x38,
	0xaf, 0x54, 0x29, 0x0b, 0x4f, 0xae, 0xa8, 0xaa, 0x0d, 0xd5, 0x54, 0x05, 0x2b, 0x27, 0xeb, 0x50,
	0x65, 0xd5, 0x95, 0x93, 0xcb, 0xaa, 0x97, 0x2c, 0xa9, 0xae, 0xa2, 0xff, 0x43, 0x3e, 0xce, 0xbd,
	0x6d, 0x61, 0x75, 0xf5, 0xc2, 0xca, 0xd0, 0xe4, 0x60, 0xb8, 0x62, 0x72, 0xb0, 0xaa, 0xaa, 0xba,
	0x36, 0x58, 0x5b, 0x51, 0x5d, 0xa5, 0xd0, 0xd6, 0x89, 0xe4, 0xdb, 0xbc, 0x85, 0xa1, 0xaa, 0x3c,
	0x65, 0x79, 0x70, 0xe1, 0xc2, 0x50, 0xcd, 0xe4, 0xea, 0xb0, 0x0e, 0xe1, 0x84, 0x16, 0x7f, 0x97,
	0x0d, 0x47, 0xcd, 0xae, 0x09, 0x05, 0x6b, 0x43, 0x45, 0x4b, 0x95, 0x8a, 0xaa, 0x90, 0xa2, 0x04,
	0x42, 0xaf, 0x0b, 0x4b, 0xa0, 0x57, 0x09, 0xbd, 0x9e, 0x03, 0x7c, 0xe0, 0x9e, 0x8c, 0xa2, 0x97,
	0x30, 0x7a, 0x5e, 0xba, 0xb1, 0xb7, 0xe3, 0x64, 0xe4, 0xe3, 0x55, 0x6a, 0x57, 0x8b, 0xda, 0xb4,
	0x5d, 0x6d, 0x39, 0x29, 0xcf, 0xe9, 0x3d, 0xb6, 0x3a, 0xda, 0x7a, 0x24, 0xb2, 0xed, 0x54, 0xb4,
	0xad, 0xd1, 0xd6, 0x78, 0xa1, 0xbb, 0x39, 0xda, 0x7a, 0xa4, 0xa7, 0x6b, 0x53, 0xa4, 0x79, 0x9d,
	0xda, 0xde, 0x16, 0xd9, 0x7e, 0xa2, 0x6f, 0xfb, 0xa7, 0xea, 0xda, 0x35, 0x91, 0xbd, 0xeb, 0x7a,
	0x3b, 0xd6, 0x46, 0xf6, 0x6c, 0x8e, 0x7c, 0xb4, 0x8f, 0x7c, 0x12, 0xd0, 0xc6, 0x11, 0xe6, 0xc1,
	0x8c, 0xaa, 0xe0, 0x92, 0x50, 0x8e, 0xc7, 0x07, 0xee, 0x19, 0x5e, 0xf4, 0x00, 0x46, 0x33, 0xa5,
	0x11, 0x3d, 0x9d, 0x6d, 0xea, 0x5b, 0xfb, 0xd4, 0xcd, 0x1b, 0xa3, 0x87, 0x8f, 0xc9, 0x77, 0x47,
	0xb6, 0x1d, 0x63, 0x7f, 0x50, 0xd7, 0x1c, 0x51, 0x3f, 0x6e, 0x50, 0x5b, 0x3b, 0x7a, 0x3a, 0x1b,
	0x7a, 0x3a, 0x37, 0xaa, 0x2d, 0x1d, 0x7d, 0xeb, 0x36, 0xaa, 0x07, 0x36, 0xd6, 0xcd, 0x0a, 0xe8,
	0x3d, 0x09, 0x0f, 0xc3, 0xcc, 0xf2, 0x50, 0xb8, 0xa2, 0x3c, 0xc7, 0xab, 0x77, 0x29, 0x63, 0x34,
	0x59, 0x1a, 0xd6, 0xb7, 0xfa, 0x48, 0xdf, 0xf6, 0x23, 0x25, 0xc5, 0xf2, 0x78, 0x75, 0xed, 0x9a,
	0xbe, 0xd5, 0x47, 0xa2, 0xa7, 0x1b, 0xa3, 0xa7, 0xd7, 0x45, 0x76, 0x9f, 0x88, 0xec, 0x6e, 0xec,
	0xe9, 0x3c, 0x4a, 0x9a, 0xc9, 0x1c, 0xeb, 0x66, 0x05, 0x48, 0x07, 0xc2, 0x5a, 0x00, 0x33, 0xca,
	0x4b, 0x2b, 0xca, 0x73, 0x32, 0xf4, 0x9e, 0x6a, 0x30, 0xaa, 0x96, 0x46, 0xa9, 0x4d, 0x6b, 0xa3,
	0xeb, 0xd7, 0x45, 0xb6, 0x1e, 0x8b, 0x6c, 0x6c, 0x57, 0xbb, 0xb6, 0x94, 0x14, 0xcb, 0xcf, 0x3b,
	0x7e, 0x32, 0x91, 0xd0, 0xd7, 0xb0, 0x5e, 0x6d, 0x6f, 0x53, 0x4f, 0x7d, 0xa2, 0xb6, 0x1c, 0xd3,
	0x90, 0x40, 0x70, 0x62, 0x00, 0xaa, 0xed, 0xbb, 0x7b, 0xce, 0x6e, 0x98, 0xe8, 0xeb, 0xe9, 0x6c,
	0xe8, 0x6d, 0xfa, 0x28, 0xda, 0xfa, 0x71, 0xb4, 0x7d, 0x5f, 0x74, 0xf3, 0x5a, 0xf5, 0xed, 0x1d,
	0x6a, 0xd3, 0xda, 0xbe, 0x35, 0xfa, 0x92, 0xb4, 0xf1, 0x85, 0x35, 0x00, 0x66, 0x95, 0x97, 0xea,
	0x78, 0xca, 0xd4, 0xa7, 0xb2, 0x04, 0xa3, 0xd7, 0xa4, 0x11, 0xb1, 0x8e, 0x36, 0x6f, 0x94, 0x9f,
	0x67, 0xff, 0xba, 0xd0, 0xdd, 0x4c, 0xc6, 0x22, 0x53, 0xeb, 0xe9, 0x7c, 0x2b, 0xb2, 0xbe, 0xa1,
	0xe7, 0xcc, 0xb9, 0x68, 0xeb, 0x91, 0x68, 0x5b, 0xe3, 0x63, 0x2b, 0x9e, 0x7a, 0xf2, 0x51, 0x5f,
	0x79, 0xb0, 0x36, 0x58, 0x1a, 0x54, 0x42, 0x04, 0xad, 0x71, 0x67, 0x41, 0x07, 0x17, 0x5e, 0x80,
	0xd9, 0x65, 0x1a, 0xc1, 0x54, 0xd7, 0xe4, 0x64, 0xe9, 0xf3, 0x78, 0x10, 0xa3, 0x07, 0xa4, 0xe1,
	0x6a, 0xd3, 0x4e, 0xf5, 0x74, 0x57, 0x6f, 0xc3, 0x1a, 0x39, 0xcf, 0xfc, 0x27, 0xe9, 0xd5, 0x44,
	0x44, 0xef, 0xbe, 0x23, 0x91, 0x1d, 0x9b, 0xcc, 0xd6, 0xde, 0xae, 0x0f, 0x7b, 0x4e, 0x9f, 0xa9,
	0x9b, 0x15, 0x30, 0xfa, 0x13, 0xee, 0x85, 0x19, 0x4b, 0x42, 0x4b, 0xaa, 0x73, 0xb2, 0xf5, 0x7e,
	0xc7, 0x60, 0x24, 0x48, 0x59, 0xea, 0x81, 0x75, 0x91, 0x4f, 0x8e, 0xc8, 0xf4, 0x7f, 0x35, 0x6c,
	0x68, 0x20, 0xc2, 0xb3, 0x30, 0x23, 0xb8, 0xb4, 0x76, 0x51, 0xce, 0x30, 0x1d, 0xb4, 0x08, 0xa3,
	0x07, 0xa5, 0x91, 0x91, 0x4d, 0x4d, 0x91, 0x77, 0x57, 0xa3, 0x67, 0x9e, 0x7e, 0xb8, 0xe7, 0xdc,
	0xbe, 0xc8, 0xca, 0x0e, 0xf9, 0xde, 0xc8, 0xde, 0x6e, 0xb5, 0xbb, 0xe5, 0x42, 0x77, 0xdb, 0x33,
	0x4f, 0xcd, 0x09, 0xf8, 0xe7, 0xa1, 0xa7, 0x9e, 0x7a, 0xee, 0x89, 0x40, 0xf1, 0x44, 0x5f, 0xf4,
	0x40, 0x57, 0xcf, 0xd9, 0x0d, 0x7e, 0x5f, 0xb0, 0x7c, 0x49, 0x45, 0x95, 0x3f, 0xbc, 0xbc, 0x5c,
	0xeb, 0x57, 0xeb, 0xcf, 0x1f, 0x05, 0x18, 0xfd, 0x12, 0xc0, 0x17, 0x24, 0x27, 0x57, 0xc8, 0x63,
	0xc8, 0xd4, 0x4d, 0x5a, 0x24, 0x24, 0x7c, 0x1e, 0x68, 0x34, 0x7c, 0x1e, 0xe8, 0x84, 0x77, 0x1e,
	0x10, 0xb2, 0x39, 0x0f, 0xf4, 0x4d, 0x3b, 0x0f, 0x28, 0xd6, 0xce, 0x03, 0x63, 0x91, 0xf2, 0x1a,
	0x20, 0xac, 0x02, 0x6f, 0xfa, 0x44, 0x25, 0xf4, 0xba, 0xe8, 0xf7, 0x89, 0x05, 0xe2, 0x44, 0x9f,
	0xa8, 0x81, 0x68, 0x7f, 0x2c, 0x59, 0x51, 0x4a, 0xc7, 0xd3, 0x7e, 0xd5, 0x7b, 0xd2, 0x7e, 0x2e,
	0xad, 0x5c, 0x1a, 0x5a, 0x5c, 0x51, 0xb5, 0x50, 0xff, 0xb1, 0x94, 0xfc, 0x56, 0x5e, 0x9a, 0x5f,
	0x40, 0xfe, 0x36, 0x3e, 0xae, 0x0d, 0x29, 0xb5, 0xe5, 0xa5, 0xda, 0x6f, 0x74, 0x28, 0xbd, 0xc7,
	0x50, 0x65, 0xb5, 0xf6, 0x93, 0x86, 0x34, 0xed, 0x6f, 0x82, 0x46, 0xd1, 0x57, 0x2f, 0xfe, 0xa7,
	0x17, 0x0a, 0xf6, 0x35, 0x2a, 0x61, 0x61, 0x1d, 0x60, 0x79, 0x7f, 0x29, 0x46, 0x35, 0xd2, 0x8d,
	0xea, 0x96, 0x8d, 0x6a, 0x57, 0x6b, 0x8c, 0xf7, 0x5f, 0xb5, 0xfd, 0xa0, 0xd1, 0xcd, 0xa6, 0x38,
	0xf2, 0x40, 0xa3, 0xaa, 0x75, 0x9f, 0xa6, 0x2a, 0x15, 0x66, 0xc2, 0xec, 0x50, 0x4d, 0xcd, 0xec,
	0xea, 0x72, 0x22, 0x18, 0x6e, 0x90, 0x6f, 0x9c, 0x44, 0xc5, 0xe0, 0x1c, 0xf2, 0x73, 0xd1, 0x0d,
	0x18, 0x5d, 0x27, 0x0d, 0xef, 0x6b, 0x7d, 0xa7, 0xb7, 0xa3, 0x23, 0xba, 0x77, 0x65, 0xc0, 0x80,
	0x17, 0xee, 0x85, 0x59, 0xa1, 0x9a, 0x9a, 0xc7, 0x94, 0x85, 0x94, 0xff, 0x47, 0x61, 0x74, 0x83,
	0x34, 0x82, 0x00, 0x46, 0x5a, 0x5a, 0x7a, 0xcf, 0x1d, 0x0b, 0x50, 0x00, 0xa1, 0x18, 0x7a, 0x63,
	0xdc, 0xad, 0xcb, 0x89, 0xeb, 0xcc, 0x0d, 0x2e, 0x29, 0x96, 0x7d, 0x74, 0xcf, 0x9b, 0x36, 0xab,
	0x6f, 0xed, 0x51, 0x37, 0x6f, 0xea, 0x3d, 0xd7, 0xaa, 0xee, 0xdc, 0xcd, 0x40, 0x04, 0xb4, 0xcf,
	0xfd, 0x47, 0x00, 0x46, 0x07, 0x00, 0x2c, 0x96, 0x38, 0x28, 0x75, 0xd0, 0x0d, 0xc1, 0x9e, 0x41,
	0x37, 0xc6, 0xa4, 0xcf, 0x03, 0x3a, 0x25, 0xf9, 0x65, 0xe1, 0x45, 0x1b, 0x7d, 0x50, 0x10, 0xd1,
	0xef, 0xcb, 0x27, 0x7f, 0x3d, 0xa6, 0x2c, 0xd4, 0x1a, 0x9f, 0x78, 0x44, 0x6b, 0xa5, 0x14, 0xb1,
	0x60, 0xc6, 0xf4, 0x99, 0xc1, 0xd2, 0x19, 0x0b, 0xf2, 0xca, 0xa6, 0x87, 0xa6, 0xe6, 0x15, 0x14,
	0x84, 0x66, 0xe6, 0xcd, 0x2c, 0x2f, 0x9b, 0x9a, 0x37, 0x55, 0x9e, 0x3a, 0x25, 0x3f, 0x7f, 0xc1,
	0xcc, 0x99, 0xf2, 0xf4, 0x19, 0x62, 0xbd, 0xf8, 0x43, 0x2f, 0x1c, 0xf9, 0xe4, 0xd2, 0x50, 0xcd,
	0x8a, 0xcb, 0x28, 0xf0, 0x9f, 0x27, 0x48, 0x27, 0xf2, 0x7e, 0x2e, 0x46, 0xb3, 0xa5, 0x1b, 0xa2,
	0x3b, 0xdb, 0x23, 0x7b, 0xd7, 0x99, 0x78, 0x9f, 0xac, 0x49, 0xcd, 0x7d, 0x1f, 0x5e, 0xe8, 0x6e,
	0xee, 0x7b, 0x77, 0x77, 0xf4, 0xfd, 0xae, 0xc8, 0xf6, 0x13, 0xea, 0xb1, 0xb5, 0xea, 0x9e, 0xae,
	0x9e, 0xae, 0x4d, 0x56, 0xd0, 0xc8, 0x9e, 0x83, 0xbd, 0x1d, 0xfb, 0xeb, 0x66, 0xe9, 0x1b, 0x21,
	0x94, 0x52, 0x55, 0x42, 0xf6, 0xfd, 0x71, 0x8c, 0x1e, 0x91, 0x04, 0x16, 0x9e, 0x2a, 0x94, 0xc2,
	0x24, 0xbb, 0x27, 0xe0, 0xe6, 0x10, 0x7a, 0xdf, 0xfe, 0x56, 0x80, 0xd1, 0x66, 0x00, 0x67, 0x48,
	0x0e, 0x3c, 0xca, 0xe3, 0x08, 0x28, 0x41, 0x03, 0xe9, 0x82, 0xc8, 0x22, 0x56, 0x56, 0xc8, 0x4f,
	0x0b, 0x01, 0xdb, 0x06, 0xa7, 0xb2, 0x85, 0x7c, 0x79, 0x51, 0x2f, 0xfe, 0x47, 0x26, 0x1c, 0x65,
	0x9b, 0x50, 0x1a, 0xf2, 0x73, 0x1d, 0x1c, 0x66, 0xe0, 0x44, 0x67, 0xea, 0xeb, 0xe4, 0x91, 0xc6,
	0x30, 0x06, 0x5e, 0x8a, 0xbe, 0x88, 0xd1, 0x43, 0x56, 0xb2, 0xa0, 0x0a, 0x23, 0x8f, 0x6e, 0x9f,
	0xce, 0xed, 0x91, 0xed, 0x27, 0x08, 0xb7, 0xb3, 0x80, 0xbd, 0x1d, 0x87, 0xa2, 0xa7, 0xd7, 0x12,
	0xf0, 0x36, 0x0f, 0xc8, 0x0a, 0x98, 0xa3, 0xf9, 0xff, 0xc3, 0x83, 0xd1, 0x05, 0x0f, 0x7c, 0x54,
	0x72, 0xee, 0x82, 0x3b, 0x5d, 0x24, 0x92, 0x05, 0xbb, 0x3d, 0xc2, 0x4e, 0x4f, 0x6a, 0xd2, 0xc0,
	0xa0, 0x08, 0xff, 0x9b, 0x84, 0xac, 0x52, 0xa4, 0x2a, 0xbe, 0x12, 0xb2, 0xe8, 0x20, 0x53, 0xbf,
	0x98, 0xea, 0xa5, 0x32, 0xa8, 0xd4, 0x3e, 0x56, 0x5d, 0x5e, 0xb1, 0x60, 0x45, 0xd1, 0x0a, 0xe6,
	0x67, 0xa2, 0x75, 0x0c, 0xa5, 0x33, 0xd1, 0x27, 0x2a, 0xb5, 0xc1, 0x5a, 0x63, 0xe2, 0x7a, 0x2f,
	0xa1, 0x72, 0x54, 0x2b, 0xfa, 0x45, 0x39, 0xbf, 0x60, 0x66, 0x5e, 0xfe, 0xf4, 0x3c, 0x79, 0xa6,
	0xaf, 0xa0, 0xc0, 0x3f, 0x75, 0xba, 0x5f, 0xce, 0xd7, 0xc0, 0x97, 0x86, 0xcb, 0xe3, 0x82, 0xd4,
	0xd7, 0x8b, 0x3f, 0xf2, 0xc0, 0xd1, 0x16, 0x7c, 0x3f, 0x5a, 0xa1, 0xd4, 0x5e, 0x06, 0x91, 0x76,
	0x37, 0xcc, 0xac, 0xa8, 0x2a, 0x0f, 0xd5, 0xe9, 0xb4, 0x9d, 0x49, 0x29, 0x94, 0xec, 0x7a, 0xf4,
	0xd3, 0xfd, 0x6a, 0xf7, 0xd6, 0x00, 0x69, 0x17, 0xf2, 0x61, 0x66, 0x65, 0xc5, 0x92, 0x8a, 0x5a,
	0x9d, 0x94, 0x33, 0x8b, 0x72, 0x31, 0xba, 0xc5, 0x00, 0x8c, 0x6c, 0x3d, 0xd6, 0xb7, 0xae, 0xe5,
	0x85, 0xff, 0xa7, 0xff, 0xdf, 0x0b, 0xb3, 0x02, 0x04, 0xd0, 0xaf, 0x31, 0x2d, 0x9c, 0x2b, 0x71,
	0x97, 0x29, 0xe7, 0x90, 0x4f, 0xa9, 0xb8, 0x6a, 0xda, 0xde, 0xbb, 0xef, 0x88, 0xd5, 0x2e, 0x21,
	0xc3, 0x9e, 0x07, 0xa4, 0x33, 0xf9, 0x1e, 0xe1, 0x2e, 0x1b, 0x39, 0xe9, 0xed, 0x74, 0x4f, 0x74,
	0x18, 0xd1, 0xef, 0x9b, 0x9a, 0x5f, 0x2f, 0xfe, 0x2a, 0x13, 0x8e, 0xe1, 0x0c, 0x99, 0x86, 0x32,
	0xe5, 0x35, 0x08, 0x0d, 0x96, 0x08, 0x69, 0x52, 0xc5, 0xcb, 0x95, 0x2a, 0x33, 0x30, 0x9a, 0x6a,
	0x9e, 0x5b, 0xf4, 0x8d, 0x90, 0xc7, 0x73, 0xe5, 0x09, 0x0b, 0xd2, 0xe6, 0x01, 0x20, 0xc0, 0xf4,
	0xee, 0xff, 0x4f, 0x0f, 0x46, 0xbf, 0xf6, 0xc0, 0x2f, 0x4a, 0x7c, 0xdc, 0xf3, 0xf6, 0x3b, 0x91,
	0x0c, 0xd9, 0xef, 0x11, 0xf6, 0xf4, 0x4f, 0x86, 0x84, 0x14, 0xd1, 0xff, 0x52, 0x1a, 0x88, 0x91,
	0xf9, 0xf5, 0xe2, 0x4f, 0x33, 0xe1, 0xa8, 0x67, 0x74, 0xb8, 0xcb, 0x68, 0x17, 0xdd, 0xcd, 0xda,
	0x45, 0xfa, 0xf9, 0xc7, 0x66, 0x17, 0x19, 0x66, 0xce, 0xfd, 0x16, 0x33, 0xe7, 0x6e, 0x8c, 0x26,
	0xd8, 0x4e, 0xcc, 0x42, 0x64, 0xe7, 0xa7, 0xb6, 0x43, 0xb3, 0x79, 0x38, 0x7e, 0xc6, 0x38, 0x1c,
	0x67, 0xc4, 0xce, 0x6f, 0x39, 0x14, 0xf2, 0x0c, 0x56, 0x3f, 0xde, 0xcd, 0x9e, 0x84, 0xe5, 0x71,
	0x96, 0x9e, 0x1c, 0xed, 0xb1, 0x93, 0xf2, 0xfd, 0xf4, 0xf4, 0x96, 0x19, 0x9b, 0x93, 0x71, 0x7a,
	0xcb, 0xb1, 0xf4, 0xa1, 0xff, 0x46, 0xd4, 0x9f, 0x79, 0x9e, 0x9b, 0x01, 0x33, 0xf5, 0x4d, 0xd5,
	0xcf, 0x94, 0x99, 0x45, 0x22, 0x46, 0x77, 0x48, 0x59, 0xd1, 0xb7, 0x4e, 0x44, 0x1a, 0x56, 0xca,
	0x23, 0xc8, 0xd7, 0xe4, 0x2f, 0x2a, 0x1d, 0xff, 0xed, 0xc1, 0x00, 0xf9, 0x40, 0x90, 0xe1, 0xb0,
	0xea, 0x70, 0xa8, 0x46, 0x3f, 0x90, 0x92, 0x83, 0xe3, 0xcd, 0x18, 0xdd, 0x24, 0xdd, 0x18, 0xd9,
	0xb2, 0xb1, 0xe7, 0xcc, 0x2e, 0xf3, 0x14, 0x5a, 0x37, 0x2b, 0x60, 0xc2, 0xf9, 0x2f, 0x00, 0x8c,
	0x7e, 0x05, 0xe0, 0x17, 0x25, 0xe7, 0x96, 0x1b, 0xeb, 0x8d, 0x6f, 0xc2, 0x9d, 0x07, 0x5e, 0xfd,
	0x78, 0x67, 0x76, 0x29, 0xef, 0x02, 0xc2, 0x3b, 0x60, 0xc0, 0xad, 0x3a, 0xb7, 0x53, 0xa0, 0xed,
	0x38, 0x67, 0x63, 0x09, 0x63, 0x52, 0xe6, 0x01, 0xb0, 0x5e, 0x6c, 0xf2, 0x42, 0xc1, 0xbe, 0xd6,
	0xf4, 0x93, 0xe4, 0xfe, 0x95, 0x00, 0xa3, 0x2f, 0xc3, 0xc7, 0x24, 0x0e, 0x2e, 0xdc, 0x37, 0x3e,
	0x91, 0x7c, 0xcd, 0x13, 0xee, 0x4b, 0x5e, 0xba, 0xd6, 0x8b, 0x1b, 0x32, 0xe1, 0x08, 0x72, 0x4a,
	0x44, 0xe1, 0xf0, 0x65, 0x10, 0x32, 0x85, 0xac, 0x90, 0x19, 0x8f, 0xd1, 0x38, 0x29, 0x37, 0xb2,
	0xed, 0x98, 0xda, 0xd5, 0xaa, 0x0d, 0xb0, 0xbe, 0x81, 0xb0, 0xb8, 0x5d, 0xe0, 0xdc, 0x6d, 0x11,
	0x38, 0x37, 0x61, 0x34, 0x52, 0x1a, 0x41, 0x3e, 0xb1, 0x09, 0x97, 0x3a, 0x08, 0xcb, 0x43, 0xe1,
	0xca, 0xea, 0x15, 0x4f, 0xaf, 0x08, 0x87, 0x74, 0x09, 0x93, 0x59, 0xf4, 0x3c, 0x46, 0xcf, 0x48,
	0x42, 0xdf, 0xea, 0x23, 0xd1, 0x33, 0xc7, 0xa3, 0x9b, 0x3a, 0xd4, 0xfd, 0xab, 0xa3, 0x1f, 0x9f,
	0x56, 0x77, 0x6f, 0x90, 0xa7, 0xb1, 0x7f, 0x5d, 0xe8, 0x6e, 0xf6, 0xe5, 0xfb, 0x7d, 0x45, 0xb3,
	0x9f, 0x52, 0xdb, 0x4f, 0xa9, 0xef, 0x1c, 0x21, 0x6d, 0x3e, 0x5f, 0x81, 0xdf, 0xf7, 0xd0, 0x53,
	0x73, 0x7a, 0xcf, 0xed, 0x8c, 0x1e, 0xd9, 0x40, 0x7e, 0x8b, 0xc9, 0x00, 0x66, 0x2c, 0x21, 0x3f,
	0xe6, 0x98, 0xca, 0x64, 0xe4, 0x80, 0xcd, 0x1b, 0xc5, 0xfa, 0x9b, 0xc6, 0x53, 0x89, 0x45, 0xfc,
	0x58, 0xd7, 0x63, 0x04, 0x25, 0x9b, 0x9f, 0xc9, 0xff, 0x33, 0x80, 0xd1, 0x4f, 0x00, 0x7c, 0x42,
	0xb2, 0x6c, 0x19, 0x73, 0xa4, 0x27, 0x48, 0xe0, 0xc9, 0x06, 0xea, 0x10, 0x62, 0xa6, 0xc8, 0x78,
	0x81, 0xd6, 0x02, 0x61, 0xf5, 0x80, 0x89, 0x8b, 0x60, 0x38, 0x4c, 0x25, 0x05, 0x1d, 0x88, 0x55,
	0x8d, 0x71, 0xfd, 0x40, 0xf5, 0xe2, 0x6f, 0xbc, 0xf0, 0x7a, 0x66, 0x69, 0x69, 0x68, 0xdd, 0x3d,
	0x02, 0x33, 0x83, 0xe1, 0x98, 0x3a, 0x9c, 0x8a, 0x91, 0xac, 0xfb, 0x80, 0xc8, 0xce, 0x96, 0x14,
	0xcb, 0x77, 0x52, 0xef, 0x8f, 0xbe, 0xe5, 0xac, 0x0f, 0x88, 0x40, 0x44, 0xdb, 0x1a, 0x4b, 0x8a,
	0x03, 0xa4, 0x0f, 0xff, 0x41, 0x80, 0xd1, 0x3e, 0x00, 0x1f, 0x94, 0xac, 0x48, 0x75, 0x10, 0x4c,
	0x22, 0x99, 0xf2, 0x8a, 0xf0, 0x72, 0x4a, 0x16, 0x9b, 0x3e, 0xba, 0xf6, 0x67, 0x7e, 0xe9, 0xb4,
	0xe9, 0xc1, 0xe9, 0x33, 0x67, 0xe4, 0x85, 0x66, 0x96, 0x15, 0x10, 0xea, 0x99, 0x51, 0x26, 0x17,
	0xda, 0xbd, 0x40, 0x5f, 0xc9, 0x80, 0xd7, 0xe9, 0x06, 0xe6, 0xe5, 0x91, 0x41, 0xf9, 0xac, 0x0c,
	0x1a, 0x87, 0xd1, 0x58, 0xe9, 0x96, 0x04, 0x02, 0xe8, 0x65, 0x63, 0x97, 0xbc, 0x0e, 0xa7, 0x91,
	0xb9, 0x51, 0x89, 0x9d, 0x46, 0x06, 0xa8, 0xe9, 0xd1, 0x21, 0x9d, 0x9a, 0x6e, 0xa3, 0x0c, 0x87,
	0xdb, 0x88, 0x15, 0x72, 0x49, 0xb8, 0x8d, 0x58, 0x70, 0x9b, 0xdb, 0xe8, 0xcf, 0x00, 0x46, 0x67,
	0x01, 0x9c, 0x29, 0xb1, 0x88, 0xb7, 0x7a, 0x06, 0xc8, 0xd7, 0x6e, 0xe6, 0x86, 0xdc, 0x00, 0x84,
	0x2f, 0x5f, 0x9c, 0xcc, 0x48, 0x8d, 0x4c, 0x1c, 0x42, 0xa6, 0x5e, 0xfc, 0x7d, 0x26, 0x1c, 0x11,
	0x9b, 0x7e, 0x1a, 0x4a, 0x8b, 0xc5, 0xd0, 0x1b, 0x0c, 0x87, 0xa9, 0x6b, 0xe9, 0x3a, 0x63, 0x04,
	0x14, 0x0e, 0x17, 0x3d, 0x8a, 0x51, 0x89, 0x94, 0xc3, 0x92, 0x01, 0xeb, 0x2c, 0x92, 0xf3, 0xe8,
	0x29, 0x50, 0xdf, 0x6e, 0x53, 0x8a, 0xb8, 0x81, 0x07, 0xb4, 0x51, 0xfc, 0xcd, 0x5e, 0x8c, 0x9a,
	0xbc, 0xf0, 0x21, 0xc9, 0x82, 0x73, 0x77, 0x9a, 0x49, 0x24, 0x55, 0xba, 0x3d, 0xc2, 0x29, 0x4f,
	0xaa, 0x72, 0x45, 0xf4, 0xfb, 0x92, 0x3d, 0x02, 0x32, 0x24, 0x96, 0x22, 0x85, 0x25, 0xa3, 0xc5,
	0x92, 0x3c, 0x26, 0xd6, 0x86, 0x94, 0xda, 0xc1, 0xf1, 0x35, 0x1d, 0xf5, 0xc2, 0x1b, 0x8d, 0x8d,
	0xb8, 0x6c, 0x6e, 0xa6, 0x24, 0x4f, 0x88, 0xa6, 0x3f, 0xca, 0x9b, 0xac, 0x3f, 0x2a, 0x23, 0x59,
	0x7f, 0xd4, 0x21, 0x80, 0xd1, 0x7e, 0x00, 0x1f, 0x92, 0xec, 0xc8, 0x30, 0x9c, 0x13, 0x54, 0x08,
	0x72, 0x9c, 0x51, 0xc4, 0x32, 0xb2, 0xb9, 0xa4, 0x9e, 0x13, 0x9e, 0xb9, 0x38, 0xa9, 0xe6, 0xe6,
	0xc1, 0xfa, 0x43, 0x26, 0x0d, 0x75, 0x98, 0x53, 0x4c, 0x43, 0x81, 0xb5, 0x10, 0x66, 0x04, 0xc3,
	0x61, 0xc3, 0x6d, 0x65, 0x91, 0x58, 0xba, 0x12, 0x1d, 0xc1, 0xee, 0x96, 0x5c, 0x18, 0x47, 0x4a,
	0xd1, 0x33, 0x51, 0xe7, 0x86, 0x68, 0x5b, 0x23, 0xfb, 0x51, 0x40, 0x1f, 0xc0, 0xbf, 0xd1, 0x8b,
	0xd1, 0x7a, 0x2f, 0x9c, 0x23, 0x39, 0x70, 0xce, 0xa3, 0x8b, 0x44, 0xa2, 0xea, 0x9c, 0x47, 0xe8,
	0x4e, 0x59, 0x54, 0x29, 0xa2, 0xdf, 0xf7, 0xd2, 0x35, 0x61, 0x45, 0x3c, 0x5a, 0x27, 0xb3, 0xe0,
	0x08, 0x72, 0xcc, 0x1d, 0x32, 0xe7, 0x4c, 0x56, 0xdb, 0x69, 0x96, 0x9e, 0xd3, 0xcc, 0xbb, 0xcf,
	0x6a, 0xe6, 0xb1, 0x12, 0xce, 0xb0, 0xdd, 0x62, 0x56, 0xdb, 0xfd, 0x16, 0xab, 0x8d, 0x78, 0xc1,
	0x2c, 0xf6, 0x1a, 0xf5, 0x82, 0x71, 0x0f, 0xaa, 0x8f, 0x5b, 0x0e, 0xaa, 0x99, 0xba, 0xf0, 0x9b,
	0x84, 0xd1, 0x7d, 0xd2, 0x08, 0x7a, 0x50, 0x25, 0x47, 0x54, 0xda, 0x05, 0xfb, 0x1b, 0xff, 0xf8,
	0x39, 0xd5, 0x72, 0x98, 0xd4, 0xd7, 0x6b, 0xb8, 0xbf, 0x8c, 0x69, 0xf0, 0x1c, 0x5f, 0xc5, 0x86,
	0xe3, 0x2b, 0x9b, 0x99, 0x01, 0x3d, 0x58, 0x10, 0xf7, 0x97, 0x65, 0x11, 0x49, 0x38, 0xc1, 0x86,
	0x25, 0xe9, 0x04, 0xdb, 0xee, 0xc1, 0x68, 0x8b, 0x47, 0x33, 0x2e, 0x58, 0x2a, 0x31, 0x7c, 0x75,
	0xf1, 0x4d, 0xd1, 0xf3, 0x80, 0x6c, 0x01, 0xeb, 0x01, 0xfb, 0x06, 0x10, 0xfe, 0x1c, 0x5c, 0x26,
	0xf3, 0xb4, 0x2a, 0xb4, 0xdc, 0xa7, 0xff, 0x9b, 0xc7, 0x93, 0x29, 0x3b, 0xcb, 0x7e, 0xe7, 0x81,
	0xd7, 0x33, 0x38, 0x49, 0x43, 0x3f, 0xd9, 0x32, 0x8c, 0x14, 0x58, 0x24, 0x59, 0xb1, 0xc0, 0x23,
	0x8d, 0x01, 0xf6, 0x8d, 0xf5, 0x78, 0xe1, 0x88, 0xe2, 0x50, 0x65, 0xe8, 0xea, 0x95, 0x59, 0x2c,
	0xa7, 0x66, 0x24, 0xc9, 0xa9, 0xdf, 0x05, 0x18, 0xfd, 0x15, 0x80, 0x48, 0xb2, 0xe0, 0x46, 0x16,
	0xd4, 0xa6, 0xbd, 0x7d, 0xef, 0x1c, 0x70, 0xf7, 0x40, 0x39, 0x79, 0xb4, 0x11, 0x08, 0x2b, 0x2f,
	0x35, 0x8f, 0x72, 0x18, 0xec, 0xd7, 0x1e, 0x78, 0x3d, 0xb3, 0x94, 0x34, 0x64, 0xb0, 0x30, 0x46,
	0x4b, 0xe0, 0x03, 0x92, 0x15, 0x0b, 0xd6, 0x1d, 0x1d, 0x60, 0xd6, 0xfa, 0x66, 0x16, 0x1c, 0x49,
	0x7c, 0x52, 0xb3, 0x2b, 0x97, 0x2a, 0xb5, 0xa1, 0x9a, 0xcb, 0xc0, 0x5e, 0x79, 0x2c, 0x7b, 0x8d,
	0xc5, 0x28, 0x47, 0x1a, 0xdd, 0xb7, 0x73, 0x6d, 0xf4, 0xec, 0x01, 0x3e, 0x63, 0xf1, 0x9c, 0xce,
	0x04, 0xde, 0xa6, 0xcb, 0x0b, 0xac, 0x2e, 0x3c, 0x67, 0xcf, 0x4e, 0x3e, 0x5c, 0x0c, 0x61, 0x0d,
	0x45, 0x44, 0x45, 0x39, 0x75, 0x18, 0x3f, 0x82, 0xd1, 0xc3, 0x92, 0x40, 0xbe, 0x8b, 0xae, 0x7f,
	0x3f, 0xba, 0x79, 0x2d, 0x8d, 0x81, 0xe5, 0x1b, 0x79, 0x91, 0xfa, 0x5a, 0xf5, 0x9d, 0xa4, 0xf3,
	0x68, 0xdf, 0xdd, 0xf7, 0xce, 0x1a, 0x02, 0x4b, 0x4c, 0x04, 0x53, 0xbd, 0x33, 0xdd, 0xb3, 0xae,
	0xe9, 0xac, 0xd4, 0x5c, 0xd3, 0xd9, 0xae, 0xae, 0x69, 0xe1, 0x39, 0x98, 0x55, 0x19, 0x2c, 0x0d,
	0x55, 0x2a, 0x54, 0xe3, 0xeb, 0x71, 0x3c, 0x8a, 0x9f, 0xc8, 0xde, 0x75, 0xd1, 0xa3, 0x67, 0xe5,
	0x7b, 0x7b, 0x3a, 0x4f, 0xf7, 0x1e, 0x5a, 0x49, 0xe6, 0xad, 0xe2, 0xe6, 0xd9, 0xb3, 0x7b, 0x3a,
	0x8f, 0xaa, 0x1f, 0xaf, 0x8a, 0x76, 0x1d, 0x26, 0xab, 0x50, 0x57, 0xb6, 0xa9, 0x6b, 0x3e, 0xe9,
	0x5d, 0xd9, 0x5a, 0xd7, 0x00, 0x02, 0xb4, 0x3b, 0xff, 0x6e, 0x0f, 0x46, 0x6d, 0x1e, 0xf8, 0xb8,
	0xe4, 0xa0, 0x17, 0xc6, 0x8d, 0x49, 0xc6, 0x89, 0xe3, 0xf7, 0x36, 0x84, 0x8f, 0xe9, 0xf2, 0x1e,
	0x00, 0xfb, 0xc0, 0x50, 0xf7, 0xca, 0xa2, 0x50, 0xd5, 0x1b, 0x8b, 0x42, 0x55, 0x79, 0x65, 0x64,
	0x6a, 0xfd, 0x92, 0x4b, 0xb1, 0xfd, 0xd1, 0xbb, 0x7c, 0xa3, 0xbc, 0x4c, 0x4c, 0xd2, 0x67, 0xbe,
	0x26, 0xc3, 0x48, 0x9a, 0x36, 0x51, 0x93, 0x86, 0x07, 0xcb, 0x79, 0x70, 0x78, 0x99, 0xc9, 0x40,
	0xb6, 0xfc, 0x49, 0x42, 0x1d, 0x25, 0xc5, 0xb2, 0xcf, 0xcd, 0x77, 0x6e, 0x40, 0x04, 0x62, 0x9d,
	0xf8, 0x8f, 0x02, 0x8c, 0xde, 0x07, 0x70, 0xb6, 0xe4, 0xc4, 0xae, 0x83, 0xf2, 0x12, 0x49, 0xc7,
	0x52, 0xe1, 0x4b, 0x29, 0x9d, 0x1e, 0xcb, 0x58, 0x62, 0x90, 0x83, 0xd3, 0x0b, 0x67, 0xcc, 0x98,
	0x96, 0x9f, 0xc0, 0x89, 0xfe, 0xaf, 0x59, 0xd4, 0x1f, 0x74, 0xc5, 0x48, 0xd4, 0xd5, 0xc0, 0x6a,
	0xab, 0xe8, 0x39, 0xe4, 0x5c, 0x49, 0x29, 0xcf, 0x4b, 0xe8, 0xeb, 0xe6, 0x7d, 0xa6, 0xe2, 0x66,
	0x56, 0x42, 0xf7, 0x9e, 0xdb, 0xd9, 0xbb, 0xaf, 0xd9, 0xee, 0x6d, 0x7f, 0xd5, 0x49, 0x39, 0x08,
	0xa3, 0x2f, 0x48, 0xc3, 0x4c, 0xb2, 0xc9, 0x37, 0x07, 0xf7, 0xc5, 0x1f, 0x9d, 0x71, 0xe5, 0xc7,
	0xfa, 0x14, 0x56, 0x50, 0xc5, 0x41, 0xc4, 0x7a, 0x08, 0xa3, 0x52, 0xab, 0xe2, 0x18, 0x94, 0xc5,
	0x11, 0x55, 0x14, 0x93, 0xca, 0x59, 0x03, 0x2b, 0x95, 0x57, 0x7a, 0x30, 0xfa, 0x5f, 0x00, 0xa7,
	0x4b, 0x76, 0x92, 0x33, 0xbc, 0x2b, 0x64, 0x0c, 0xd7, 0xe0, 0xc1, 0xd7, 0x80, 0x70, 0x76, 0x28,
	0x89, 0xdf, 0xfe, 0x30, 0xdc, 0xdf, 0x66, 0x51, 0x87, 0x5e, 0x3a, 0xcb, 0xdd, 0xe5, 0x30, 0x9b,
	0xe2, 0x8e, 0x46, 0x21, 0xcc, 0x51, 0x28, 0x56, 0x2c, 0x91, 0x08, 0x43, 0x4f, 0x27, 0x19, 0x89,
	0x70, 0x82, 0x07, 0x8c, 0xd1, 0xfc, 0x3f, 0xf0, 0x62, 0xf4, 0x59, 0xcc, 0xc1, 0xc7, 0x4a, 0x67,
	0x0e, 0x09, 0x26, 0x12, 0xd0, 0xeb, 0xbc, 0x42, 0xa3, 0xb7, 0x3f, 0x22, 0x3a, 0x85, 0x78, 0x84,
	0xed, 0xcc, 0xd2, 0x1f, 0xda, 0x4c, 0x8e, 0x34, 0x63, 0xae, 0x41, 0x1e, 0x6f, 0xb0, 0x96, 0x86,
	0xd3, 0xd0, 0xb8, 0xec, 0x61, 0x8d, 0xaf, 0x67, 0xc2, 0x9b, 0xd8, 0x1d, 0x1d, 0xea, 0xa1, 0x8d,
	0x8b, 0x0d, 0x05, 0x1b, 0x40, 0x7c, 0xe5, 0xb4, 0x08, 0x66, 0x07, 0xc3, 0xe1, 0xc7, 0x2f, 0x32,
	0x1a, 0xcc, 0x02, 0xda, 0xc6, 0x31, 0xba, 0x8f, 0x85, 0x68, 0x32, 0x93, 0x0d, 0xd1, 0x64, 0x25,
	0x1b, 0xa2, 0xf9, 0x37, 0x80, 0xd1, 0xff, 0x07, 0xe0, 0x23, 0x12, 0x6f, 0x63, 0xad, 0xdc, 0x9a,
	0x74, 0x98, 0x66, 0x00, 0x32, 0xdc, 0xe8, 0xca, 0x59, 0x0f, 0x7a, 0xca, 0x7a, 0xc3, 0x2d, 0xd8,
	0xf3, 0xcd, 0x2c, 0x9a, 0x08, 0x6e, 0x59, 0x6c, 0x1a, 0xea, 0x87, 0x20, 0x1c, 0x46, 0x65, 0x8f,
	0x11, 0xf4, 0x71, 0x28, 0x88, 0x29, 0x18, 0x15, 0x98, 0x16, 0x91, 0x91, 0xaa, 0xcc, 0x53, 0x0a,
	0x2c, 0x48, 0xc0, 0xec, 0xd6, 0xff, 0x53, 0x2f, 0x46, 0x7f, 0xe7, 0x85, 0x25, 0x12, 0x17, 0xe3,
	0x3c, 0xfa, 0x4a, 0xa4, 0x0d, 0xde, 0xf2, 0x0a, 0xeb, 0xfa, 0xa5, 0x0d, 0x52, 0x0a, 0xf9, 0x5c,
	0xd3, 0x07, 0x49, 0x45, 0x8e, 0x3e, 0xce, 0x86, 0x23, 0x89, 0xe7, 0xf7, 0xf2, 0x1d, 0x6c, 0x5c,
	0x3d, 0xb1, 0xf1, 0x8e, 0x37, 0x85, 0xec, 0xc1, 0xc2, 0xe9, 0x8d, 0x35, 0x8e, 0x0c, 0xd6, 0xc3,
	0x02, 0x2f, 0x8a, 0x64, 0x39, 0x2c, 0x18, 0x21, 0x20, 0x9e, 0xe7, 0xe9, 0x29, 0x8e, 0x1b, 0xa9,
	0x10, 0xa3, 0x7c, 0xae, 0x1b, 0x29, 0x87, 0xed, 0x88, 0x6d, 0xb1, 0xb9, 0x8b, 0x06, 0x32, 0x94,
	0x44, 0x07, 0xb3, 0x84, 0x92, 0xd8, 0xdf, 0x06, 0x22, 0x94, 0xc4, 0x1c, 0x7a, 0x86, 0x0f, 0xec,
	0xa1, 0xe7, 0xb0, 0x07, 0xa3, 0xf7, 0x3c, 0xf0, 0x09, 0xc9, 0x41, 0x8f, 0x56, 0x64, 0xba, 0xc7,
	0xa9, 0x62, 0x1b, 0xcd, 0xfa, 0xc1, 0xbf, 0x07, 0x84, 0xef, 0x5c, 0xa4, 0x2e, 0x4b, 0xfd, 0xfc,
	0x12, 0x13, 0x0a, 0x6c, 0xb8, 0x8a, 0xef, 0x86, 0x4a, 0x39, 0x66, 0xf5, 0x7f, 0x1e, 0xe3, 0xfe,
	0x42, 0x1a, 0x9f, 0x8d, 0xfc, 0x6f, 0x60, 0xb4, 0x1c, 0xce, 0x95, 0x9c, 0x98, 0xe0, 0x91, 0xcb,
	0x00, 0x3b, 0xd8, 0xff, 0xc7, 0x0b, 0x47, 0x12, 0x77, 0x7e, 0x3a, 0x48, 0xcd, 0xfe, 0xc4, 0xb1,
	0x7e, 0x02, 0x30, 0xfa, 0x21, 0x80, 0x25, 0x92, 0x03, 0x4f, 0x46, 0xe4, 0xc3, 0xdd, 0xab, 0xcc,
	0xe7, 0xe3, 0x26, 0x20, 0xac, 0xb9, 0x1c, 0x7c, 0xcc, 0x61, 0xc0, 0xff, 0xf6, 0xc0, 0x51, 0xb6,
	0x65, 0xa5, 0x21, 0x03, 0xd6, 0x62, 0xf4, 0x3a, 0x9c, 0x25, 0x39, 0x31, 0x61, 0xdd, 0xe1, 0x01,
	0x66, 0xbd, 0xbf, 0xcb, 0x34, 0x92, 0xd8, 0x5f, 0xac, 0xae, 0x0a, 0x0d, 0x0d, 0x37, 0xac, 0x7a,
	0xe0, 0xb0, 0xda, 0xdc, 0xc5, 0xe7, 0xb8, 0x02, 0xeb, 0x09, 0xd6, 0xf9, 0x81, 0x33, 0x5e, 0x35,
	0xd3, 0xe9, 0x33, 0x75, 0x7e, 0xc6, 0x67, 0xd5, 0xbb, 0x2d, 0xde, 0xd0, 0x38, 0x61, 0xb4, 0xc1,
	0x08, 0x53, 0xf9, 0xbb, 0x3d, 0x18, 0x75, 0x7a, 0xe0, 0x73, 0x92, 0x75, 0x87, 0xd8, 0x8c, 0x78,
	0x7d, 0x05, 0xf1, 0x02, 0xd8, 0x2c, 0xf3, 0x67, 0xd8, 0xea, 0x69, 0xfc, 0x14, 0x08, 0x3f, 0xbe,
	0xd4, 0x21, 0xed, 0x8b, 0xd0, 0xfd, 0x3e, 0xb1, 0x36, 0x54, 0x99, 0x47, 0x6a, 0x77, 0x24, 0x13,
	0x6b, 0xfa, 0xad, 0x17, 0xde, 0xc0, 0x22, 0x2e, 0x0d, 0x0f, 0xb4, 0x5f, 0x84, 0x59, 0x6f, 0x54,
	0x57, 0x85, 0x9c, 0x51, 0x26, 0x42, 0x38, 0xf1, 0xa2, 0x4c, 0x06, 0x44, 0x80, 0xf6, 0xe0, 0x3f,
	0x0c, 0x30, 0x7a, 0x0f, 0xc0, 0x59, 0x92, 0x0d, 0xa9, 0x0e, 0x72, 0x4c, 0x24, 0xa1, 0x5e, 0x15,
	0xe6, 0xa7, 0x74, 0x5c, 0x25, 0xe3, 0x6b, 0x7f, 0x07, 0x67, 0x94, 0x4e, 0x2d, 0x28, 0x9f, 0xba,
	0x20, 0x2f, 0x14, 0x5a, 0x90, 0x4f, 0xe8, 0x25, 0x18, 0xcc, 0x0f, 0xd9, 0x7d, 0xdd, 0x38, 0x8b,
	0x66, 0xda, 0x5f, 0x19, 0x22, 0xad, 0xde, 0x2a, 0xd2, 0x16, 0x62, 0x54, 0xce, 0x17, 0x69, 0xf2,
	0x17, 0xd5, 0x96, 0x8e, 0xbe, 0x86, 0xf5, 0xf1, 0x2e, 0x51, 0x70, 0x3e, 0x53, 0x71, 0x33, 0xdd,
	0x18, 0xeb, 0xdd, 0x0a, 0x2a, 0x1e, 0x5f, 0xb1, 0xd1, 0x88, 0xc5, 0x29, 0x68, 0x90, 0xc9, 0xe4,
	0x24, 0x47, 0x66, 0x82, 0x4a, 0xb4, 0x57, 0x5e, 0x44, 0x49, 0x60, 0x3f, 0xa1, 0x47, 0xc5, 0x81,
	0x5d, 0x1b, 0xb9, 0x37, 0xb2, 0xde, 0x83, 0xd1, 0x1a, 0x0f, 0x7c, 0x54, 0xb2, 0x90, 0x83, 0x99,
	0x53, 0xab, 0x7f, 0x98, 0x38, 0x4f, 0x8f, 0x2e, 0x84, 0xca, 0x4f, 0xf9, 0x53, 0x20, 0x7c, 0x7c,
	0xa9, 0xa5, 0x66, 0x8a, 0x2c, 0xe0, 0x14, 0x99, 0xf5, 0xe2, 0x5f, 0x67, 0xc1, 0xeb, 0x19, 0x2c,
	0xa4, 0xa1, 0x30, 0x5c, 0x04, 0x33, 0x34, 0x3c, 0xd2, 0xd0, 0xcf, 0x08, 0x63, 0x08, 0x0d, 0x1f,
	0x84, 0xe8, 0x73, 0x58, 0x3a, 0xb3, 0xc4, 0x7d, 0xee, 0xe6, 0xba, 0xf8, 0x9c, 0x80, 0x01, 0x7d,
	0x04, 0xff, 0x2f, 0xbc, 0x18, 0xfd, 0x83, 0x17, 0x16, 0x49, 0x56, 0x8c, 0xf3, 0x08, 0x2f, 0x91,
	0xb0, 0xdc, 0xe6, 0x15, 0xb6, 0x78, 0x53, 0x16, 0x97, 0x43, 0x34, 0xd0, 0x63, 0x90, 0xb1, 0x58,
	0x58, 0x2a, 0x97, 0x4e, 0x29, 0xcf, 0x0f, 0x25, 0x79, 0xe8, 0xe7, 0xe8, 0xfd, 0xcb, 0x1e, 0xfa,
	0x39, 0x35, 0x8c, 0x06, 0x54, 0xb5, 0xdd, 0xbd, 0x4c, 0x71, 0x9f, 0xf1, 0xac, 0xa2, 0xb9, 0x11,
	0xa3, 0x11, 0xd2, 0x30, 0xbb, 0x72, 0x59, 0x6e, 0x55, 0x2e, 0x41, 0x8c, 0x5e, 0x91, 0x86, 0xc5,
	0x32, 0x15, 0xfa, 0x2b, 0x74, 0x59, 0xa3, 0x99, 0xaf, 0x56, 0xd6, 0x01, 0x78, 0x1d, 0xa5, 0x11,
	0x26, 0x22, 0xc4, 0x4b, 0x28, 0x18, 0x84, 0x39, 0xb0, 0x23, 0x0b, 0xaf, 0xb1, 0xf6, 0x3f, 0xd1,
	0x42, 0x7a, 0x98, 0x37, 0x96, 0x33, 0x71, 0x7f, 0x4a, 0x53, 0x88, 0x97, 0x3e, 0x61, 0x06, 0xa6,
	0xb2, 0x92, 0x0d, 0x4c, 0x65, 0x27, 0x19, 0x98, 0x12, 0xb6, 0x00, 0x78, 0x3d, 0x1d, 0xe8, 0x51,
	0x36, 0x79, 0x8d, 0x14, 0x33, 0xb4, 0x78, 0x0c, 0x9f, 0x1b, 0x38, 0x94, 0x4e, 0x26, 0x5d, 0xd2,
	0xb5, 0x36, 0x80, 0x80, 0x75, 0x0e, 0xfe, 0xe3, 0x1e, 0x8c, 0xda, 0x3d, 0xf0, 0x61, 0xc9, 0xc1,
	0x0c, 0x56, 0x69, 0x97, 0x74, 0xac, 0xec, 0x17, 0x40, 0xf8, 0xd9, 0x65, 0x3a, 0x94, 0x3c, 0x1e,
	0x27, 0x49, 0xa3, 0x5f, 0xe7, 0x96, 0x38, 0x01, 0xb7, 0x51, 0x36, 0x74, 0xa5, 0xa1, 0x3e, 0x7e,
	0x1e, 0x66, 0x6a, 0x0a, 0xc1, 0x08, 0xb5, 0x59, 0x15, 0x32, 0x89, 0xb3, 0xb1, 0xb4, 0xe3, 0x12,
	0x67, 0x63, 0x41, 0x02, 0xa4, 0x43, 0x7f, 0xaf, 0x17, 0xa3, 0x1e, 0x2f, 0x9c, 0x2b, 0x39, 0xb1,
	0xcc, 0xa3, 0xca, 0x44, 0x3a, 0xf8, 0x1d, 0xaf, 0xb0, 0x2d, 0x75, 0x1d, 0x3c, 0x64, 0xc3, 0x6b,
	0x57, 0x8f, 0x16, 0x9e, 0x5f, 0x2f, 0xfe, 0x53, 0xa6, 0x71, 0xe1, 0xe4, 0x32, 0x1d, 0xf6, 0xdc,
	0xef, 0x3d, 0xc4, 0x39, 0xf2, 0xe5, 0x99, 0x67, 0x2e, 0xce, 0xc5, 0x07, 0x7a, 0x90, 0x62, 0x8e,
	0x50, 0xdc, 0xdb, 0x5a, 0xec, 0xe1, 0xc9, 0x8c, 0x6d, 0xc5, 0x7e, 0x33, 0x5d, 0x53, 0x89, 0x8b,
	0x0b, 0xd1, 0xcf, 0xe2, 0x06, 0xc6, 0xb2, 0xd8, 0x3b, 0x56, 0x3a, 0xbc, 0xed, 0x8e, 0x15, 0xf3,
	0xdb, 0x80, 0x14, 0x1a, 0xa2, 0x67, 0xb7, 0x12, 0xc9, 0xba, 0xbd, 0xd6, 0x39, 0xbb, 0x1f, 0xde,
	0xcc, 0x43, 0x5b, 0xcc, 0xe3, 0x7d, 0x12, 0x08, 0x9f, 0x5e, 0xa4, 0x66, 0xe9, 0xff, 0x39, 0xac,
	0x2a, 0xb4, 0xdc, 0xa7, 0x5b, 0xe6, 0xfd, 0x89, 0x50, 0xfd, 0xb7, 0x07, 0xde, 0xc0, 0x62, 0x21,
	0x0d, 0xbd, 0xe3, 0xcb, 0x31, 0xaa, 0x85, 0xb3, 0x25, 0x1b, 0x1a, 0x78, 0xd4, 0x30, 0xc0, 0x0e,
	0xf2, 0x7f, 0xf6, 0x1a, 0x17, 0x6e, 0xae, 0x62, 0x01, 0xd3, 0x9f, 0x90, 0xd4, 0x67, 0x00, 0xa3,
	0xbf, 0x06, 0x70, 0xb6, 0x64, 0x45, 0x8f, 0x79, 0x13, 0xc7, 0xd5, 0x35, 0xcd, 0x61, 0x4d, 0x5e,
	0x65, 0xe7, 0x41, 0x67, 0x4d, 0x0e, 0xa3, 0xfd, 0x87, 0x07, 0xde, 0xc0, 0xae, 0x26, 0x0d, 0x19,
	0xed, 0x75, 0x8c, 0xaa, 0xe0, 0xe7, 0x25, 0x1b, 0x1a, 0xac, 0xbb, 0x3a, 0xc0, 0x2c, 0x76, 0x28,
	0xd3, 0xa8, 0xa7, 0x3d, 0xbb, 0xba, 0x6a, 0x41, 0xc5, 0xc2, 0xa7, 0x42, 0x43, 0x24, 0x89, 0x32,
	0x85, 0x4b, 0x8b, 0x6e, 0xc1, 0xa7, 0x7c, 0x8b, 0xea, 0xbe, 0x0d, 0xa3, 0x5b, 0xa5, 0x31, 0x91,
	0x6d, 0xc7, 0xfa, 0xd6, 0x6c, 0x8c, 0x9e, 0x69, 0xef, 0xdb, 0xb9, 0x56, 0xdd, 0xdc, 0xe4, 0x1e,
	0x4a, 0x1a, 0xb0, 0x62, 0x5c, 0xc2, 0x34, 0x98, 0xb9, 0x20, 0x1c, 0xac, 0x5d, 0x44, 0xd5, 0xaf,
	0x0f, 0xa3, 0xdb, 0xa5, 0x1c, 0xfb, 0x3c, 0x8e, 0x6e, 0xee, 0x3d, 0xd9, 0xa1, 0x9e, 0x6d, 0xac,
	0x6b, 0x18, 0x16, 0x20, 0xe0, 0xfe, 0x0d, 0x1e, 0x8c, 0xd6, 0x79, 0xe0, 0xb3, 0x12, 0x67, 0x83,
	0xe4, 0xb1, 0xb1, 0x8b, 0x25, 0x4c, 0x37, 0xf1, 0x5c, 0xa9, 0xf6, 0x08, 0xd4, 0x47, 0x40, 0x78,
	0xff, 0x72, 0x5d, 0x7c, 0xa6, 0xaf, 0x4a, 0xac, 0x08, 0x2e, 0xa9, 0x4c, 0x36, 0xa2, 0xb4, 0x23,
	0x03, 0xde, 0xe4, 0xc0, 0x43, 0x1a, 0x9e, 0xdc, 0x5e, 0x84, 0xc3, 0xca, 0x16, 0x2c, 0x54, 0x42,
	0xb5, 0x66, 0xd0, 0xe0, 0x0b, 0x18, 0xdd, 0x2f, 0x8d, 0xb2, 0x51, 0x42, 0x49, 0xb1, 0x7c, 0x97,
	0xeb, 0x25, 0x26, 0x0b, 0x5c, 0xc0, 0xec, 0xcf, 0xff, 0x29, 0xc0, 0xe8, 0x98, 0x9e, 0x7f, 0xcb,
	0xc1, 0xb4, 0x0b, 0xc9, 0x25, 0x92, 0x47, 0x41, 0xe1, 0xd5, 0xd4, 0x12, 0x24, 0xe9, 0x64, 0xb4,
	0x5f, 0xa6, 0xc9, 0xd3, 0x66, 0xcc, 0x98, 0x59, 0x1a, 0x4c, 0x70, 0xbf, 0xe2, 0xbf, 0xb2, 0xe9,
	0x91, 0xfe, 0x72, 0x8a, 0xb0, 0x99, 0xac, 0x08, 0xd3, 0x2d, 0x7d, 0x1f, 0x4d, 0x44, 0x61, 0x90,
	0xc5, 0x17, 0x6a, 0xbb, 0x6c, 0xd7, 0x9b, 0xd6, 0x00, 0x8c, 0x56, 0x02, 0xf7, 0xef, 0x4d, 0x17,
	0xe2, 0x4b, 0x09, 0x7d, 0x4d, 0xee, 0x1f, 0xab, 0xb8, 0xd9, 0x29, 0x08, 0xef, 0xd3, 0x04, 0x8f,
	0xdd, 0x9b, 0x58, 0xe5, 0xa0, 0xb8, 0x00, 0x46, 0x4f, 0x48, 0xa3, 0x9d, 0x23, 0x94, 0x14, 0xcb,
	0x53, 0x53, 0x9a, 0x12, 0xe3, 0xc8, 0x33, 0xc7, 0x10, 0x36, 0x03, 0x4b, 0xd4, 0xea, 0x4f, 0x30,
	0x5a, 0x61, 0x5e, 0x0b, 0x71, 0xcc, 0x78, 0xb0, 0x71, 0x40, 0xf4, 0xc2, 0x66, 0x60, 0xc8, 0x70,
	0x22, 0xe7, 0xdf, 0xc0, 0x68, 0xb9, 0x34, 0x86, 0x2b, 0xc0, 0x07, 0x77, 0x42, 0x31, 0xed, 0xb0,
	0xda, 0x83, 0xd1, 0xff, 0x01, 0xf8, 0xa0, 0xe4, 0x24, 0x7d, 0xa3, 0xd2, 0x16, 0xdb, 0x95, 0xeb,
	0x05, 0xab, 0xd3, 0x40, 0xe8, 0x1c, 0x2a, 0x6a, 0x20, 0x75, 0xd6, 0xff, 0x56, 0x16, 0x14, 0xec,
	0xeb, 0x4f, 0x43, 0xa5, 0x50, 0x0f, 0x87, 0x97, 0x19, 0x08, 0xa0, 0x31, 0xb6, 0x51, 0x66, 0xf6,
	0xbc, 0xd1, 0x60, 0xbd, 0x60, 0xe5, 0xa0, 0x0d, 0x97, 0x0b, 0x56, 0x56, 0xf3, 0x82, 0x09, 0xb7,
	0xc5, 0x46, 0xf4, 0x7f, 0xdd, 0x8b, 0xd1, 0x39, 0x2f, 0x7c, 0x4c, 0xe2, 0xec, 0x85, 0x3b, 0x31,
	0x26, 0xd2, 0x1c, 0xff, 0xe2, 0x11, 0xfe, 0x39, 0xb5, 0x5a, 0x4a, 0xe6, 0x8c, 0xf4, 0x18, 0x5c,
	0x8c, 0x9c, 0x92, 0xa3, 0x26, 0x26, 0xfb, 0xdd, 0x4a, 0x97, 0x83, 0xec, 0x46, 0xbc, 0x38, 0x87,
	0x1e, 0xd7, 0x9f, 0x57, 0x90, 0x9f, 0x97, 0x3f, 0xc3, 0x57, 0x30, 0xd3, 0x3f, 0xc5, 0xd5, 0x9f,
	0x47, 0x40, 0xe4, 0x7c, 0x7f, 0x7e, 0xa1, 0x3f, 0x7f, 0x9a, 0x58, 0x5f, 0x2f, 0xfe, 0x83, 0x51,
	0x39, 0xdf, 0xdc, 0xbf, 0xa1, 0x73, 0xa5, 0x8a, 0xaf, 0x38, 0x93, 0xba, 0x52, 0x95, 0x38, 0x1e,
	0xe3, 0x52, 0x5d, 0x33, 0x85, 0x2b, 0x55, 0x49, 0x8e, 0x61, 0x8b, 0x94, 0x5d, 0x8a, 0x2b, 0x55,
	0x4d, 0x1e, 0x8c, 0x1a, 0x3d, 0xb0, 0x54, 0xe2, 0x6f, 0xad, 0xf1, 0x76, 0x08, 0x3b, 0xcb, 0x68,
	0x5b, 0xa3, 0x45, 0x09, 0x25, 0x1b, 0x3d, 0x7a, 0x17, 0x08, 0x6d, 0x97, 0x5a, 0x93, 0x98, 0x57,
	0xb3, 0x98, 0x82, 0xc2, 0x6e, 0x91, 0x9f, 0x1f, 0x67, 0xc1, 0x9b, 0x79, 0x48, 0x48, 0x43, 0x7d,
	0xa1, 0x40, 0x68, 0xca, 0x4a, 0x23, 0x06, 0xc4, 0x51, 0x18, 0xb3, 0x30, 0xfa, 0xbc, 0x24, 0x38,
	0x89, 0xc1, 0x25, 0x27, 0xc3, 0x09, 0x18, 0x60, 0x86, 0xf1, 0xff, 0xd8, 0x8b, 0xd1, 0x0f, 0xbc,
	0xf0, 0x4b, 0x92, 0xcb, 0x2e, 0x24, 0x4d, 0x8b, 0x89, 0x14, 0xc7, 0xbf, 0x79, 0x84, 0x7f, 0xe9,
	0xa7, 0xe2, 0xa0, 0x81, 0xa3, 0x6b, 0xaa, 0x23, 0x15, 0xd5, 0x31, 0xbf, 0x5e, 0xfc, 0xbb, 0x2c,
	0xa3, 0x50, 0xff, 0x15, 0xe1, 0x46, 0x9a, 0xce, 0x1c, 0x69, 0xd8, 0x64, 0x66, 0xde, 0x09, 0xc5,
	0x72, 0x36, 0x79, 0xc8, 0xe2, 0x52, 0xa2, 0x57, 0xa6, 0x9c, 0x87, 0x12, 0xe3, 0xda, 0x86, 0xbb,
	0xa7, 0x69, 0xaa, 0x25, 0x32, 0x94, 0xf4, 0x65, 0xa9, 0x79, 0xd6, 0x98, 0x90, 0x1f, 0xa3, 0xe9,
	0xd6, 0x09, 0xd0, 0xc8, 0x10, 0x67, 0x02, 0x03, 0x17, 0x1f, 0xd2, 0x66, 0x41, 0x4e, 0x43, 0x24,
	0x0b, 0x42, 0x9f, 0x85, 0xcb, 0x69, 0x68, 0x2c, 0x07, 0x13, 0x1c, 0x5f, 0xd7, 0x0e, 0x0f, 0x46,
	0xad, 0xba, 0xaf, 0xcb, 0x49, 0x45, 0xc6, 0x13, 0x07, 0xc9, 0x1c, 0x67, 0xce, 0x03, 0x73, 0xaf,
	0x58, 0x1f, 0xf7, 0x29, 0x20, 0x9c, 0xb8, 0xd8, 0x0b, 0x17, 0xa9, 0x1e, 0x4e, 0x5c, 0xea, 0xfc,
	0xa5, 0x1c, 0x80, 0x7a, 0xcb, 0x0b, 0x6f, 0x72, 0x20, 0x25, 0x0d, 0x9d, 0xe3, 0xab, 0x00, 0x46,
	0x7f, 0x0a, 0x1f, 0x97, 0x78, 0xc8, 0x70, 0x27, 0x91, 0x81, 0xbf, 0x2d, 0x25, 0xd0, 0x4b, 0x22,
	0x57, 0xb5, 0x9c, 0xeb, 0x4f, 0x50, 0xea, 0x1f, 0x01, 0x46, 0x3f, 0x05, 0x70, 0x9e, 0xc4, 0xc1,
	0x90, 0x9c, 0x43, 0xef, 0xd1, 0x24, 0x70, 0x56, 0x73, 0xb9, 0x77, 0x1d, 0x10, 0x1a, 0x2f, 0x03,
	0xf7, 0x72, 0x78, 0x71, 0xb5, 0x17, 0xde, 0xe4, 0x58, 0x5c, 0x1a, 0xf2, 0xe2, 0x9f, 0x60, 0xb4,
	0x02, 0x3e, 0x2c, 0xf1, 0x70, 0xc1, 0xdb, 0xe9, 0x01, 0x66, 0xc2, 0xd3, 0x19, 0x70, 0xe4, 0xa3,
	0xd5, 0x65, 0x8b, 0xaf, 0xb1, 0xa0, 0x5d, 0x31, 0x8f, 0xb7, 0x58, 0x15, 0xdc, 0x8b, 0x4d, 0x7f,
	0x04, 0x18, 0xfd, 0x1e, 0xc0, 0xc7, 0x25, 0x07, 0x0a, 0xe5, 0x9c, 0xbe, 0xd6, 0x95, 0x6a, 0x7b,
	0x5b, 0xbf, 0x78, 0xf4, 0x30, 0x10, 0x0e, 0x0c, 0x05, 0x1e, 0x65, 0x34, 0xec, 0xf3, 0xcf, 0x47,
	0xd7, 0x37, 0x45, 0x76, 0x7d, 0xa4, 0xb6, 0xbc, 0xad, 0x76, 0xae, 0x26, 0x6b, 0x13, 0xeb, 0xc5,
	0x13, 0x99, 0x70, 0x94, 0x6d, 0xe9, 0x69, 0x78, 0x02, 0xfc, 0x53, 0x98, 0x55, 0x59, 0x5d, 0xb6,
	0x38, 0x64, 0xd0, 0x96, 0x7e, 0xf3, 0x65, 0x0c, 0x41, 0x12, 0xa1, 0xb0, 0x9e, 0x2e, 0x23, 0xc3,
	0xe9, 0x11, 0xf2, 0x33, 0xc7, 0x05, 0x7f, 0xe0, 0xe3, 0xde, 0x4f, 0x0f, 0x46, 0xb6, 0x9f, 0xb8,
	0xd0, 0xdd, 0xdc, 0xbb, 0xe1, 0xa0, 0x7a, 0xf2, 0x78, 0xef, 0xfe, 0x0f, 0x09, 0xb0, 0xda, 0xf4,
	0x0e, 0x8d, 0x37, 0x59, 0x3b, 0x0b, 0xd0, 0x61, 0x85, 0x7a, 0x38, 0x4c, 0xfb, 0xd7, 0xd3, 0x15,
	0xa6, 0xa3, 0x5f, 0xcf, 0x8f, 0x16, 0xd8, 0x29, 0x10, 0x5c, 0xc9, 0x0f, 0x5f, 0xfc, 0xf8, 0xa4,
	0xa7, 0x80, 0x39, 0xa4, 0xff, 0x18, 0xc0, 0xe8, 0x23, 0x00, 0xe7, 0x4a, 0x4e, 0x5a, 0xe0, 0xf1,
	0xc1, 0x40, 0xd7, 0xed, 0x23, 0x48, 0x60, 0xa9, 0xd6, 0x98, 0x99, 0x9e, 0xe3, 0xca, 0x39, 0x88,
	0x11, 0xdb, 0xe3, 0x99, 0xaa, 0xca, 0x6b, 0x82, 0x2f, 0xae, 0xed, 0xe1, 0xc4, 0x90, 0x9c, 0xd3,
	0x7b, 0xf8, 0xbd, 0xbe, 0xd6, 0x95, 0x57, 0x81, 0xed, 0xe1, 0x58, 0x5c, 0x1a, 0xdb, 0x1e, 0x1c,
	0x5c, 0xf0, 0x76, 0x7a, 0x80, 0x6d, 0x8f, 0x03, 0xc3, 0x8c, 0xe2, 0x99, 0xfa, 0xc0, 0xca, 0x55,
	0x93, 0x2c, 0x93, 0x44, 0x75, 0x4b, 0xd3, 0xcb, 0xdd, 0xbb, 0xe1, 0x20, 0x71, 0x74, 0xab, 0x4d,
	0xef, 0x50, 0x9f, 0xdd, 0xe9, 0x4f, 0xd5, 0xae, 0x43, 0x6a, 0x93, 0x51, 0xa4, 0x45, 0xff, 0xd3,
	0x7a, 0x3d, 0xe3, 0x05, 0x33, 0x2d, 0x2e, 0x93, 0xe9, 0xdd, 0xbc, 0xe5, 0x98, 0x54, 0xef, 0x34,
	0xd3, 0xd5, 0xe8, 0xdd, 0x48, 0xa1, 0x63, 0x45, 0x4d, 0x56, 0x2a, 0xa2, 0x66, 0x06, 0x1c, 0xa6,
	0x51, 0x68, 0x85, 0xf6, 0x61, 0x36, 0x93, 0x25, 0x44, 0x3e, 0x8c, 0xb4, 0x6c, 0xee, 0xe9, 0x3a,
	0x30, 0x5b, 0x07, 0xf0, 0xd1, 0x2f, 0x29, 0xb4, 0x50, 0x6f, 0xb8, 0xec, 0x87, 0xc5, 0xd4, 0xe7,
	0x38, 0x32, 0x92, 0xba, 0x76, 0x8d, 0xda, 0xae, 0xed, 0x73, 0xdf, 0xfe, 0x77, 0xd5, 0x03, 0xdb,
	0x22, 0xeb, 0xdf, 0x27, 0x4e, 0x7c, 0x79, 0x56, 0x64, 0xfd, 0xfb, 0xea, 0xc7, 0x5b, 0xc9, 0x5f,
	0x17, 0xba, 0x9b, 0xd5, 0x43, 0xab, 0x48, 0x3d, 0x99, 0xf6, 0xdd, 0x3d, 0x67, 0x37, 0x44, 0xdb,
	0x1a, 0x4b, 0xe6, 0x51, 0xbf, 0x86, 0x5e, 0x7a, 0x8d, 0xf4, 0x16, 0xd9, 0x7a, 0x2c, 0xb2, 0xb1,
	0x9d, 0x7c, 0xa3, 0xed, 0x96, 0x3e, 0xaa, 0xff, 0x5d, 0x2f, 0x46, 0xef, 0x78, 0xe1, 0x33, 0x92,
	0x9d, 0x18, 0xcd, 0x2a, 0x56, 0xcc, 0x54, 0xe2, 0x16, 0x59, 0x67, 0x84, 0x9e, 0xb1, 0x38, 0xee,
	0x2b, 0x26, 0x43, 0xf2, 0x72, 0x7a, 0x2c, 0xf1, 0x30, 0xd9, 0x7c, 0xfa, 0xfe, 0x08, 0x63, 0x03,
	0x2f, 0x3a, 0x2e, 0x82, 0x33, 0xcb, 0xe4, 0xf2, 0xd2, 0x02, 0xed, 0x9b, 0x29, 0xee, 0x71, 0xe9,
	0xaf, 0x65, 0x1b, 0x25, 0x3f, 0x8d, 0x9d, 0x49, 0x43, 0x1b, 0xb3, 0x0a, 0x66, 0x13, 0xc7, 0xba,
	0xe2, 0x28, 0xf9, 0x49, 0x7e, 0x2e, 0x9a, 0x8d, 0xd1, 0x2c, 0x69, 0x04, 0x4b, 0xab, 0x72, 0x3e,
	0x37, 0xb4, 0x40, 0xd6, 0x45, 0x18, 0xdf, 0x8c, 0x09, 0x90, 0x2f, 0x02, 0xc6, 0x20, 0xfe, 0xef,
	0x64, 0x60, 0xf4, 0xcd, 0x8c, 0x58, 0xa5, 0xcf, 0x18, 0xea, 0x79, 0x5c, 0x91, 0x48, 0x31, 0xfc,
	0xd1, 0x2b, 0xfc, 0xc1, 0xdb, 0x8f, 0x28, 0x82, 0x12, 0xbb, 0x00, 0xea, 0x1b, 0x3c, 0xcf, 0xff,
	0x45, 0x91, 0xb1, 0x58, 0x56, 0x5e, 0x38, 0x25, 0x34, 0x2d, 0x3f, 0x98, 0x17, 0x2a, 0x9b, 0x49,
	0xa7, 0x55, 0x5a, 0x50, 0x90, 0xef, 0xf8, 0xc4, 0x16, 0x37, 0x28, 0xa3, 0x2c, 0x3d, 0x6d, 0x26,
	0x92, 0x8b, 0xe7, 0x4e, 0xcb, 0x9f, 0x3a, 0x67, 0xa6, 0x3c, 0x65, 0x6e, 0x61, 0xe1, 0x8c, 0xa2,
	0xa2, 0xc2, 0x69, 0xd3, 0x0a, 0x50, 0x81, 0x5c, 0x54, 0x30, 0x73, 0x46, 0xd1, 0xdc, 0xa9, 0x45,
	0xd3, 0xf2, 0xe7, 0x4e, 0x9f, 0x31, 0x55, 0x2e, 0x9c, 0x5e, 0x30, 0xb5, 0x70, 0xea, 0xcc, 0x82,
	0x39, 0xc5, 0x85, 0xd3, 0x66, 0x4c, 0x9f, 0x3b, 0x65, 0x4e, 0x21, 0x9a, 0x36, 0xb5, 0x98, 0xe2,
	0xaa, 0x36, 0x54, 0x55, 0xab, 0x75, 0x57, 0xfe, 0xd0, 0xa2, 0x70, 0xd9, 0x8a, 0x22, 0xed, 0x3f,
	0x8b, 0x4a, 0x1e, 0x7a, 0x76, 0xca, 0x0b, 0xcf, 0x15, 0x2c, 0x2f, 0x7d, 0xe8, 0x99, 0xcf, 0xbb,
	0x64, 0x06, 0xba, 0x84, 0x38, 0x06, 0xfe, 0x96, 0x69, 0xbb, 0x59, 0x60, 0x94, 0xec, 0xeb, 0x50,
	0x8f, 0x86, 0xf7, 0xdb, 0xe0, 0x66, 0xb5, 0x60, 0x46, 0x4a, 0x5a, 0x70, 0x10, 0x03, 0xd7, 0xc7,
	0x3c, 0x18, 0x7d, 0xe4, 0x81, 0x0b, 0x25, 0xde, 0x1e, 0x58, 0x93, 0x4a, 0x28, 0x3f, 0xbb, 0xc6,
	0xa9, 0x79, 0x3a, 0xce, 0x11, 0xbd, 0xfe, 0x2a, 0x10, 0xce, 0x5c, 0x06, 0x43, 0x3f, 0x65, 0xdd,
	0x12, 0x27, 0xc0, 0xfd, 0x59, 0xb6, 0x51, 0x4b, 0x94, 0x45, 0x56, 0x1a, 0x2a, 0x9e, 0x25, 0x84,
	0x13, 0x2a, 0x2b, 0x94, 0x5a, 0x47, 0x2d, 0x51, 0xaa, 0x79, 0xd8, 0xd0, 0x36, 0x4b, 0x3f, 0x71,
	0x43, 0xdb, 0x2c, 0x60, 0xc0, 0x1c, 0xc2, 0xff, 0xe3, 0x0c, 0x8c, 0x7e, 0x90, 0x01, 0x9f, 0x90,
	0xb8, 0xd8, 0x77, 0xa7, 0xd5, 0x44, 0x1a, 0x68, 0x65, 0x86, 0xf0, 0x47, 0x6f, 0xca, 0xc9, 0xb3,
	0xda, 0x94, 0x98, 0xeb, 0x8f, 0xd7, 0x74, 0xd0, 0x95, 0xab, 0x83, 0xe6, 0xd7, 0x8b, 0x7f, 0x18,
	0x46, 0x93, 0x56, 0x02, 0xa1, 0xca, 0x50, 0x50, 0x09, 0x5d, 0x6d, 0xc7, 0xce, 0x42, 0xe7, 0xb1,
	0x93, 0xfd, 0x80, 0x5f, 0x1a, 0x2c, 0xcf, 0x76, 0x94, 0xb4, 0x0c, 0xe1, 0xbc, 0x61, 0x75, 0x19,
	0x8e, 0x87, 0x15, 0x70, 0x58, 0xb0, 0x54, 0xa9, 0xad, 0x09, 0x96, 0xd5, 0xea, 0x27, 0xc4, 0x61,
	0x45, 0x8f, 0x61, 0xf4, 0x45, 0xe9, 0xe1, 0xc8, 0x8e, 0x0e, 0x75, 0xf3, 0xa1, 0xde, 0x4d, 0x27,
	0xd5, 0x96, 0x6d, 0xd1, 0xf6, 0x86, 0xe8, 0xd6, 0x83, 0xe4, 0xc4, 0xa7, 0x9d, 0x06, 0x37, 0x7e,
	0xd2, 0xd3, 0xb9, 0x91, 0x9a, 0xbb, 0xfa, 0xa1, 0x8f, 0xca, 0x8a, 0x96, 0x0f, 0x68, 0xa9, 0x7b,
	0x06, 0x3e, 0x60, 0x76, 0x2f, 0x54, 0x1b, 0x3a, 0x98, 0x14, 0x31, 0x7d, 0x01, 0xa3, 0x67, 0x25,
	0x81, 0x3d, 0x69, 0xd2, 0xf4, 0xce, 0x2f, 0xa8, 0x87, 0x56, 0xf5, 0xbe, 0xb5, 0x2a, 0xba, 0xea,
	0x54, 0xc9, 0xbc, 0xe8, 0xd1, 0xf5, 0xe6, 0xb8, 0x3d, 0xa7, 0x0f, 0x46, 0x8e, 0x1e, 0x88, 0xbc,
	0x7b, 0x50, 0x5d, 0xd9, 0x46, 0x3f, 0x33, 0xcc, 0x6c, 0x7a, 0x92, 0xb5, 0x9d, 0x3d, 0xe9, 0x0d,
	0xef, 0xe5, 0x92, 0x0b, 0x61, 0x1a, 0x02, 0x8f, 0x78, 0xdf, 0x93, 0x3d, 0x88, 0xb2, 0xc5, 0xd2,
	0x62, 0xb7, 0xd4, 0x78, 0xa7, 0xd3, 0x5e, 0x8f, 0xa0, 0x0e, 0xd4, 0xe9, 0x34, 0xb1, 0xdc, 0x2a,
	0x90, 0xe5, 0x02, 0xc7, 0xf9, 0x34, 0x99, 0xcf, 0xac, 0xe7, 0xd3, 0x44, 0x5f, 0x14, 0xce, 0x98,
	0x32, 0xfd, 0x52, 0xda, 0x10, 0x06, 0xf9, 0x88, 0x7e, 0xdf, 0x82, 0x60, 0xa5, 0x12, 0x62, 0xcc,
	0x0a, 0xf1, 0xf9, 0x49, 0xda, 0xff, 0x2b, 0x10, 0xeb, 0xc5, 0xf3, 0xd9, 0xf0, 0x16, 0xee, 0x26,
	0xa7, 0xe5, 0x13, 0xda, 0x89, 0x4e, 0xb3, 0x4e, 0x9b, 0x22, 0x6e, 0x09, 0x23, 0x27, 0x60, 0xec,
	0x28, 0x4b, 0x4d, 0x8a, 0x80, 0xe4, 0x86, 0x7e, 0x77, 0x26, 0xbb, 0x76, 0xae, 0xbd, 0x66, 0x53,
	0xc4, 0x3d, 0xd7, 0x7e, 0xf7, 0x3a, 0x78, 0xa3, 0x71, 0xbf, 0x4b, 0xc3, 0xdc, 0x55, 0x63, 0x4b,
	0x4c, 0x77, 0x5c, 0x54, 0x4a, 0x52, 0xcf, 0x07, 0xa0, 0xa7, 0x3a, 0x4c, 0xcf, 0xb0, 0x45, 0x18,
	0x3d, 0x28, 0x8d, 0x20, 0xb1, 0x26, 0xfa, 0x98, 0xee, 0x64, 0xf6, 0xaf, 0x89, 0xbe, 0xbe, 0xd3,
	0x3b, 0x7a, 0xdb, 0x0f, 0xe4, 0xfb, 0x7d, 0x6a, 0x67, 0x67, 0xef, 0xe1, 0xc6, 0x9e, 0x73, 0xed,
	0x91, 0xd6, 0x53, 0xd4, 0x59, 0xab, 0x03, 0x06, 0x3c, 0xd5, 0x61, 0x4b, 0x14, 0x2b, 0x2b, 0xc9,
	0xf0, 0x7d, 0x19, 0x84, 0xb5, 0xa1, 0x25, 0xe1, 0xca, 0x60, 0x6d, 0xc8, 0xb4, 0x38, 0x74, 0x17,
	0xd9, 0x0d, 0xb4, 0xfb, 0x23, 0xfb, 0x22, 0xef, 0x9e, 0x2b, 0x29, 0x96, 0x27, 0x12, 0x67, 0xf9,
	0x44, 0x1f, 0x2d, 0x4c, 0xae, 0x57, 0x20, 0x57, 0x0f, 0x6c, 0xeb, 0x5b, 0x7d, 0x84, 0xc0, 0x44,
	0xdb, 0xf7, 0x59, 0xca, 0xb4, 0xc7, 0xba, 0x15, 0x9a, 0x00, 0x1c, 0x66, 0xfc, 0x49, 0xbd, 0xd7,
	0x95, 0x18, 0x55, 0x18, 0x6e, 0x38, 0xf2, 0xbd, 0xfc, 0xb4, 0x31, 0x02, 0xfb, 0x2b, 0x11, 0x30,
	0x9a, 0xad, 0xa2, 0xa7, 0xb6, 0x3f, 0xf4, 0x84, 0xef, 0x69, 0xda, 0x91, 0xda, 0xbd, 0x35, 0xb2,
	0x65, 0xd3, 0x44, 0x5f, 0xdf, 0xae, 0x06, 0x8b, 0xf3, 0xba, 0xf3, 0x78, 0x64, 0xcf, 0x96, 0xc8,
	0xf6, 0x13, 0x3d, 0xdd, 0x7b, 0xfb, 0x1a, 0x70, 0x5d, 0x43, 0x43, 0x03, 0x08, 0x98, 0xa3, 0x0b,
	0x5b, 0x01, 0x1c, 0x61, 0xfc, 0x11, 0x58, 0x5a, 0x19, 0xa2, 0x26, 0xcc, 0xeb, 0x18, 0x55, 0x19,
	0x72, 0x94, 0x0c, 0xdc, 0x7b, 0xb8, 0x51, 0x6d, 0x7a, 0x87, 0x3f, 0x29, 0xd2, 0x76, 0x51, 0x93,
	0x9a, 0x15, 0xb0, 0x4c, 0x43, 0xf8, 0x93, 0x98, 0xa8, 0x87, 0x3e, 0x70, 0xcf, 0x88, 0xa2, 0x52,
	0x8c, 0x5e, 0xb5, 0xf9, 0x29, 0x99, 0x9a, 0x89, 0xe4, 0xe7, 0x4d, 0x7b, 0xd4, 0xc3, 0x1b, 0x4c,
	0x0c, 0xf5, 0xbd, 0xbb, 0xdb, 0x32, 0xda, 0x91, 0x7d, 0x6a, 0x77, 0x8b, 0x39, 0xe6, 0x44, 0x5f,
	0x69, 0x50, 0x09, 0x4d, 0x9b, 0xa2, 0x9e, 0xd9, 0xaf, 0x76, 0xb7, 0x10, 0xb4, 0x18, 0x43, 0x0a,
	0x4b, 0x60, 0x76, 0xd9, 0xa2, 0x60, 0xd5, 0xc2, 0x90, 0x92, 0x73, 0x9d, 0x8e, 0x8f, 0xa7, 0x30,
	0x9a, 0x27, 0xe5, 0xd0, 0x61, 0x5a, 0x76, 0x44, 0x76, 0x7e, 0xaa, 0x9e, 0x6c, 0x57, 0xbb, 0x57,
	0x11, 0x05, 0xc5, 0xde, 0x70, 0xd0, 0x29, 0xb3, 0xa7, 0xb3, 0x2b, 0xfa, 0x7e, 0xd7, 0x44, 0x5f,
	0xa4, 0x6d, 0x55, 0x4f, 0xe7, 0x46, 0x75, 0x73, 0x47, 0xb4, 0xf5, 0x08, 0xfb, 0x81, 0x31, 0x1c,
	0x19, 0xc3, 0xcc, 0x19, 0x19, 0xe1, 0x9e, 0x33, 0xb2, 0xcb, 0x8b, 0xd1, 0x0e, 0x2f, 0x0c, 0x48,
	0x76, 0xb9, 0xc1, 0xd4, 0x1f, 0x25, 0xd6, 0x70, 0xb2, 0xa1, 0x06, 0x33, 0xbe, 0xfa, 0x35, 0x8f,
	0x70, 0xf6, 0x92, 0x87, 0x1a, 0xfa, 0x15, 0x90, 0x75, 0xcb, 0xd0, 0x9c, 0xe8, 0x13, 0x63, 0xdc,
	0xa5, 0x97, 0x7d, 0x0c, 0x57, 0x56, 0x94, 0xd3, 0x6a, 0x3d, 0x46, 0x8b, 0xf6, 0xfb, 0x9b, 0x6f,
	0xfa, 0x26, 0xf9, 0xea, 0xeb, 0xd9, 0x9f, 0x35, 0x6a, 0xd3, 0x9b, 0xea, 0xad, 0x7a, 0x36, 0xae,
	0xee, 0x70, 0x5c, 0x8d, 0x6e, 0xcb, 0x30, 0xdf, 0x48, 0xa5, 0x1b, 0x93, 0x96, 0x15, 0x26, 0xed,
	0x4e, 0x4c, 0x72, 0xdd, 0xcd, 0xcc, 0x0a, 0xb5, 0x1d, 0xd7, 0x8c, 0xeb, 0x6e, 0x6e, 0xd7, 0xa3,
	0x6d, 0xe0, 0xb1, 0xb3, 0x9d, 0xff, 0x43, 0x80, 0xd1, 0x61, 0x00, 0x8b, 0x24, 0x07, 0xd2, 0x1d,
	0xec, 0x30, 0xe0, 0x97, 0xa3, 0x19, 0x4b, 0x3f, 0x29, 0x5b, 0xa7, 0x5e, 0xec, 0xf4, 0xc2, 0x1b,
	0xa8, 0x5b, 0xea, 0x32, 0x29, 0xfb, 0x8b, 0xb8, 0x19, 0xfd, 0x05, 0x66, 0x53, 0x09, 0x05, 0x88,
	0x18, 0xdd, 0x21, 0x8d, 0x65, 0xbf, 0x8f, 0x73, 0x0c, 0xf7, 0x9f, 0x06, 0x18, 0x9d, 0x04, 0x10,
	0x49, 0x36, 0x14, 0x18, 0xf1, 0x20, 0xf2, 0x6d, 0xbc, 0x64, 0x72, 0xe3, 0xd0, 0x59, 0x23, 0x84,
	0x2f, 0xd2, 0x39, 0x9c, 0xfa, 0xd6, 0xed, 0xc9, 0x36, 0x73, 0x0d, 0xd2, 0x96, 0xad, 0x9b, 0x01,
	0xcc, 0x22, 0xa8, 0xa3, 0xa7, 0xae, 0x1b, 0x62, 0xa7, 0x2e, 0xed, 0xd7, 0xa2, 0x72, 0x8c, 0x82,
	0x86, 0x72, 0x64, 0x49, 0x81, 0x1e, 0xbd, 0xe6, 0xc4, 0x7b, 0x35, 0x90, 0xa5, 0x3f, 0xb2, 0x68,
	0xa6, 0x03, 0xcb, 0x65, 0x57, 0x3a, 0x07, 0x7f, 0x73, 0x06, 0x46, 0x4d, 0x19, 0xb0, 0x58, 0xb2,
	0x6f, 0x0c, 0x8f, 0xa2, 0x12, 0x71, 0xff, 0x39, 0xaf, 0xd0, 0xed, 0xed, 0x07, 0xff, 0x93, 0xdb,
	0xad, 0xa9, 0x9f, 0x7a, 0x06, 0xf9, 0x32, 0x52, 0xea, 0x77, 0xa6, 0x62, 0xba, 0xd4, 0x5d, 0x95,
	0x52, 0x45, 0x5a, 0x43, 0x4e, 0xc0, 0x7a, 0xf7, 0x05, 0x0b, 0x42, 0x53, 0xcb, 0x83, 0xd3, 0x4b,
	0xf3, 0x42, 0xa1, 0x05, 0x53, 0xe3, 0x14, 0x19, 0xa2, 0xa7, 0x3c, 0xc7, 0x4d, 0x8b, 0x02, 0x97,
	0x7b, 0x4f, 0x05, 0xb2, 0xaf, 0x20, 0xdf, 0x5f, 0x20, 0xfb, 0xa7, 0x4e, 0x75, 0xbb, 0xf7, 0x44,
	0x41, 0xa6, 0xf8, 0x0b, 0x65, 0xed, 0x28, 0xf5, 0x83, 0x6c, 0xea, 0x9d, 0x7d, 0xb8, 0x42, 0xa9,
	0xad, 0x36, 0xe8, 0x41, 0xb9, 0xb2, 0x84, 0xec, 0xe7, 0xad, 0x67, 0xac, 0xf8, 0x1f, 0x0f, 0xe0,
	0xa9, 0xeb, 0x35, 0xe6, 0x84, 0x94, 0x19, 0xbb, 0x60, 0x7b, 0xa3, 0x3d, 0xfd, 0x74, 0x5a, 0x9c,
	0xcc, 0xa0, 0xde, 0x8e, 0x83, 0x26, 0x78, 0xb4, 0xad, 0x91, 0x1a, 0xa1, 0xed, 0xc7, 0xd4, 0x33,
	0x5b, 0x2d, 0x27, 0xab, 0x2f, 0xc3, 0xe1, 0xaf, 0x6b, 0xfb, 0xf4, 0xf4, 0x8a, 0xb0, 0x71, 0x77,
	0xea, 0x4b, 0x18, 0xcd, 0x97, 0x46, 0x90, 0x5b, 0x51, 0xf4, 0xa0, 0x57, 0x6c, 0x8e, 0x94, 0xef,
	0x57, 0xd7, 0x1c, 0xe9, 0x5b, 0x7d, 0x84, 0x34, 0xfb, 0x0a, 0xfc, 0x6a, 0xd3, 0xbb, 0x9a, 0x79,
	0xdf, 0xbc, 0x2d, 0xda, 0xd6, 0xe8, 0x93, 0xfd, 0xea, 0xc9, 0xe3, 0xd1, 0x7d, 0xed, 0xbd, 0xed,
	0x07, 0xb4, 0x3f, 0x0b, 0xb5, 0x3f, 0x23, 0xf8, 0x40, 0x5f, 0x6b, 0x43, 0xb4, 0xad, 0x91, 0x46,
	0x32, 0x87, 0xcd, 0x0a, 0xc4, 0x86, 0x8c, 0x05, 0x4a, 0xb3, 0x93, 0x0d, 0x94, 0x0e, 0x4b, 0x36,
	0x50, 0xfa, 0x99, 0x07, 0xa3, 0xbf, 0xf6, 0xc0, 0x85, 0x92, 0x0b, 0x25, 0x1a, 0x9e, 0x22, 0x75,
	0xd3, 0x5a, 0xb5, 0xe5, 0x38, 0x2b, 0x28, 0x93, 0x34, 0xd6, 0x87, 0x42, 0x91, 0xd8, 0x01, 0x4a,
	0x0d, 0x37, 0x37, 0x84, 0xca, 0x57, 0xb7, 0x48, 0xea, 0x07, 0x86, 0xdf, 0xd3, 0x8e, 0xcd, 0xb4,
	0xcc, 0x14, 0xcf, 0x26, 0xba, 0xc6, 0xb8, 0x28, 0x6c, 0xd7, 0xc0, 0xcf, 0x60, 0x14, 0x90, 0x04,
	0x42, 0x5e, 0xd4, 0xec, 0x25, 0xa1, 0xd4, 0x07, 0x92, 0xd4, 0xbd, 0xd1, 0xb6, 0x46, 0xe7, 0xd7,
	0x01, 0x63, 0x54, 0xff, 0xbb, 0x19, 0x18, 0xbd, 0x13, 0xf3, 0x85, 0x3a, 0xb7, 0xc4, 0x9d, 0xc2,
	0x13, 0x69, 0xe0, 0x3f, 0xf3, 0x0a, 0xe7, 0xfa, 0xa3, 0x81, 0x8d, 0x6b, 0xc2, 0x57, 0xa7, 0x0e,
	0x7e, 0xfa, 0x0a, 0xd2, 0xc1, 0xf3, 0xeb, 0xc5, 0xe8, 0x30, 0x78, 0xa3, 0x71, 0x27, 0xf0, 0xca,
	0x3b, 0xe2, 0x4c, 0x77, 0x1c, 0x71, 0x9c, 0xea, 0x93, 0x10, 0xb3, 0x2d, 0xc4, 0xf8, 0x88, 0xc5,
	0x59, 0x48, 0x34, 0xef, 0x7d, 0x18, 0xdd, 0xe3, 0x70, 0x16, 0x8e, 0x66, 0xef, 0x46, 0x1a, 0xbf,
	0xda, 0x9c, 0x82, 0x73, 0x19, 0x9f, 0x20, 0xd1, 0xc5, 0x12, 0x46, 0x77, 0xdb, 0x7c, 0x82, 0x82,
	0xb3, 0x23, 0xbb, 0x47, 0xef, 0x05, 0x9b, 0x43, 0x8f, 0x78, 0x3e, 0xa7, 0x62, 0x24, 0x73, 0x1d,
	0x7a, 0x39, 0xce, 0x1e, 0x49, 0x0b, 0xc7, 0x29, 0x17, 0x88, 0x39, 0xe5, 0xb2, 0x75, 0xa7, 0xdc,
	0x0c, 0x8c, 0xa6, 0xda, 0x9c, 0x72, 0x3e, 0xb6, 0x3f, 0xf2, 0x5b, 0x5c, 0x57, 0xdb, 0xbc, 0x98,
	0xab, 0x8d, 0x78, 0x42, 0xa7, 0x61, 0x54, 0x68, 0x86, 0x70, 0x58, 0x27, 0x9b, 0x65, 0xa6, 0x71,
	0xbc, 0x69, 0xc6, 0xbd, 0xee, 0xe1, 0xa9, 0xdd, 0xeb, 0x66, 0xbd, 0xc5, 0xd0, 0xe1, 0x2d, 0x36,
	0x6d, 0x21, 0xcb, 0x9d, 0x87, 0x0b, 0x1e, 0x8c, 0x7e, 0xe5, 0x81, 0x4f, 0x49, 0x76, 0xea, 0xb7,
	0xde, 0x86, 0x4d, 0xfa, 0x8c, 0xcb, 0xba, 0xe5, 0xb6, 0x78, 0x84, 0xcd, 0x9e, 0x81, 0x3b, 0xf0,
	0x26, 0x1b, 0x95, 0xbc, 0xb4, 0x8e, 0xb4, 0x78, 0x97, 0xc7, 0x38, 0xd7, 0xb3, 0xeb, 0xc5, 0x35,
	0x5e, 0xf3, 0x85, 0xd9, 0xb4, 0x3d, 0x91, 0xfb, 0x1b, 0x00, 0x46, 0xf5, 0xf0, 0x11, 0xc9, 0x81,
	0x09, 0x77, 0xb2, 0x4b, 0xa4, 0x86, 0x27, 0x09, 0x13, 0x93, 0x57, 0xc2, 0xbe, 0x7a, 0x71, 0x53,
	0x06, 0xbc, 0x71, 0x76, 0xb0, 0xaa, 0x2c, 0x54, 0x79, 0x25, 0x4a, 0xfc, 0xcf, 0x3b, 0x24, 0xbe,
	0xe5, 0xc9, 0x4b, 0xf6, 0x7b, 0x9e, 0xdc, 0x8f, 0x7f, 0x3d, 0x8a, 0x2f, 0x2a, 0xfe, 0x01, 0x60,
	0xf4, 0x63, 0x00, 0x1f, 0x93, 0xec, 0x68, 0x93, 0x73, 0xd4, 0x96, 0x6d, 0x91, 0x13, 0x4d, 0x89,
	0x8e, 0x05, 0x5c, 0x21, 0x31, 0x10, 0x77, 0xa3, 0xfa, 0x21, 0x24, 0x38, 0x77, 0xa3, 0xfe, 0xe8,
	0x81, 0x23, 0xad, 0x2b, 0x4b, 0xd7, 0x57, 0x64, 0xe7, 0x48, 0x0e, 0x44, 0xf0, 0xf6, 0x78, 0xa0,
	0x39, 0x72, 0x73, 0x06, 0x1c, 0xa9, 0x67, 0x27, 0xd4, 0x2c, 0xb9, 0xc6, 0x92, 0x49, 0xb1, 0xe4,
	0xcf, 0x00, 0x46, 0x3f, 0xd1, 0xef, 0x61, 0xdb, 0xf1, 0x26, 0xe7, 0x10, 0xd7, 0xc2, 0x15, 0xce,
	0x93, 0x0d, 0x5e, 0x38, 0xca, 0xb6, 0xb4, 0x34, 0x64, 0xca, 0x37, 0x31, 0xaa, 0x83, 0x73, 0x25,
	0x27, 0x26, 0x78, 0xbb, 0x3c, 0xd0, 0x5c, 0xf9, 0xdf, 0x5e, 0x38, 0x72, 0x5e, 0x4d, 0x68, 0x59,
	0x45, 0x68, 0xf9, 0x35, 0xae, 0x4c, 0x8a, 0x2b, 0xbf, 0x01, 0x30, 0xfa, 0x3a, 0x80, 0x2f, 0x4a,
	0x0e, 0xbc, 0xc9, 0x13, 0xfa, 0xf6, 0x37, 0xf6, 0x1e, 0xb6, 0x48, 0x51, 0x12, 0xdb, 0x8f, 0x9e,
	0xde, 0x12, 0xd9, 0xbd, 0x2b, 0x69, 0x0e, 0x0d, 0x09, 0x65, 0x7c, 0xfe, 0x2c, 0xad, 0xd3, 0xfe,
	0x2f, 0x8f, 0xf9, 0xef, 0xba, 0x3a, 0x47, 0xe4, 0xc8, 0x01, 0xe3, 0xe0, 0xbe, 0x60, 0x8d, 0xa2,
	0xed, 0xfd, 0xbf, 0x7b, 0xe1, 0x28, 0xdb, 0x1a, 0xd2, 0xd0, 0x79, 0xf5, 0x50, 0xe2, 0x9b, 0x00,
	0xba, 0x8b, 0x75, 0x0c, 0x41, 0xb2, 0x7e, 0x69, 0x53, 0xdb, 0x65, 0xb2, 0xa7, 0x4c, 0x8e, 0xff,
	0x7b, 0x00, 0xa3, 0x3d, 0x00, 0xce, 0x97, 0x9c, 0x48, 0x4d, 0x44, 0x19, 0x09, 0xb8, 0x9a, 0xfa,
	0x5a, 0xb5, 0x51, 0xe4, 0x2f, 0x08, 0x0f, 0xf4, 0x3b, 0xdf, 0x7f, 0xbe, 0xaf, 0x5e, 0xfc, 0x5e,
	0x36, 0x1c, 0x4d, 0x82, 0xd2, 0x8f, 0x2d, 0xad, 0xac, 0xad, 0xb8, 0xca, 0xf2, 0xbb, 0x06, 0xa7,
	0x22, 0x8a, 0xf0, 0x02, 0x1c, 0xbe, 0x24, 0x54, 0x1b, 0x2c, 0x0f, 0xd6, 0x06, 0x95, 0x9c, 0x2c,
	0x9d, 0x48, 0x6e, 0xb6, 0xba, 0x38, 0x1f, 0xa3, 0xcd, 0x45, 0x77, 0x62, 0xe4, 0x93, 0xc6, 0x45,
	0x4f, 0x37, 0x92, 0x7c, 0x1e, 0x8b, 0xec, 0x5e, 0xb3, 0x9a, 0x64, 0x6d, 0x07, 0x62, 0xbd, 0x09,
	0xdf, 0x03, 0xf0, 0xfa, 0x9a, 0xd0, 0x52, 0x85, 0x9e, 0x92, 0xcc, 0xa4, 0xae, 0x23, 0x00, 0xa3,
	0x03, 0x40, 0x1a, 0xad, 0x9e, 0x6c, 0xef, 0x5b, 0xd7, 0xd2, 0xb7, 0x6e, 0x63, 0x6f, 0xc7, 0x56,
	0xf5, 0xc0, 0x46, 0x52, 0xb1, 0x74, 0x03, 0x50, 0x0f, 0xb4, 0x59, 0xba, 0x5e, 0xd7, 0x15, 0xdd,
	0x74, 0xac, 0x6f, 0xf5, 0x11, 0xb5, 0x69, 0x2d, 0x75, 0x40, 0x18, 0x85, 0x2f, 0xd4, 0x96, 0x0e,
	0x92, 0xf6, 0x44, 0x36, 0xa6, 0xa4, 0x98, 0xed, 0x71, 0x92, 0x4f, 0x3d, 0xb3, 0xa5, 0x6f, 0x57,
	0x43, 0xef, 0xa1, 0x95, 0x24, 0x49, 0xad, 0xe7, 0xcc, 0x96, 0xbe, 0x0f, 0x1a, 0xd5, 0x55, 0xc7,
	0x23, 0xdb, 0x4f, 0xf4, 0x9c, 0xda, 0xa3, 0xb6, 0x74, 0xf4, 0x9c, 0x39, 0x17, 0x6d, 0x3d, 0xd2,
	0xdb, 0x71, 0x90, 0x2c, 0x88, 0xa4, 0x49, 0x19, 0x47, 0x37, 0xed, 0x93, 0x80, 0x75, 0xfe, 0xfe,
	0x7f, 0xf1, 0x60, 0xd4, 0xe7, 0x81, 0x65, 0x12, 0x97, 0xce, 0x64, 0x1f, 0x37, 0x1f, 0xe8, 0x1e,
	0x13, 0x63, 0xf7, 0xba, 0x44, 0x1b, 0x8c, 0xfd, 0x3a, 0x0f, 0x62, 0xd8, 0x93, 0x57, 0x7a, 0x84,
	0x3f, 0x5e, 0xea, 0x48, 0x43, 0x72, 0x3e, 0x01, 0x73, 0x8e, 0xf6, 0x72, 0x91, 0xa9, 0x64, 0xad,
	0x52, 0x1f, 0x85, 0xbb, 0x8b, 0xa2, 0x7e, 0x7e, 0xbd, 0xb8, 0x3f, 0x1b, 0x8e, 0xe1, 0x60, 0x3a,
	0x0d, 0x45, 0x79, 0x0f, 0x80, 0xd7, 0x2f, 0x89, 0xe1, 0xc0, 0xf4, 0x79, 0x9e, 0x01, 0x18, 0x9d,
	0x02, 0x71, 0x12, 0x7d, 0x76, 0x01, 0x93, 0xfc, 0xe8, 0x43, 0x1e, 0x71, 0x33, 0x7d, 0x26, 0xfa,
	0xa2, 0xad, 0x1f, 0x6b, 0x8b, 0xdf, 0xd1, 0x61, 0xe3, 0xc3, 0x0b, 0xdd, 0xcd, 0x84, 0x9b, 0x22,
	0x1d, 0xad, 0x6a, 0xc7, 0x29, 0x72, 0x97, 0x43, 0x3d, 0x79, 0x9c, 0x84, 0x0a, 0xa9, 0xe0, 0xd7,
	0x43, 0x1e, 0x13, 0x7d, 0xea, 0xc7, 0x0d, 0x1a, 0xc3, 0xea, 0x9c, 0x4b, 0xb8, 0x55, 0x6d, 0xe9,
	0xd0, 0xd0, 0x7e, 0xf4, 0x80, 0x95, 0x49, 0x03, 0xd6, 0x45, 0x09, 0x2f, 0xc1, 0xeb, 0x94, 0xa5,
	0x65, 0x65, 0xb3, 0x75, 0x92, 0x52, 0x72, 0x32, 0x75, 0x79, 0x34, 0xda, 0x2a, 0x8f, 0x02, 0x21,
	0x65, 0x69, 0x65, 0x2d, 0x95, 0x46, 0xea, 0xc9, 0xe3, 0xec, 0xd0, 0xb1, 0xdb, 0xd1, 0x24, 0x8c,
	0xc2, 0xf6, 0x26, 0xbc, 0x0d, 0xe0, 0x75, 0x0b, 0x82, 0x15, 0x95, 0x46, 0xef, 0x59, 0x71, 0x7a,
	0xd7, 0x2f, 0x92, 0x8c, 0x8f, 0xec, 0xfa, 0xa0, 0x77, 0xf5, 0x19, 0x1a, 0xc8, 0xd1, 0x87, 0xb1,
	0x0d, 0x20, 0x17, 0xc4, 0xc4, 0x08, 0x89, 0xef, 0xb4, 0x35, 0x5a, 0x56, 0x44, 0x64, 0x8a, 0x65,
	0xc9, 0xec, 0x1c, 0xfc, 0x5f, 0x05, 0x18, 0x75, 0x03, 0x18, 0x90, 0xf8, 0x74, 0xee, 0x10, 0x29,
	0x84, 0xa4, 0x39, 0x22, 0xc5, 0x69, 0x2f, 0x2f, 0x10, 0xca, 0x53, 0x52, 0xa7, 0x96, 0x79, 0xa7,
	0x90, 0xa8, 0xf3, 0x0b, 0x2f, 0xbd, 0x29, 0x7c, 0x79, 0xb5, 0xee, 0x45, 0x98, 0xda, 0x0f, 0xdb,
	0x79, 0x2b, 0xf9, 0x6c, 0x2b, 0xeb, 0x87, 0xfe, 0x1f, 0x00, 0x8c, 0x3e, 0x03, 0xf0, 0x59, 0x89,
	0x87, 0x11, 0xf9, 0x4e, 0xb7, 0xbc, 0x2b, 0x57, 0x15, 0x61, 0xed, 0x5e, 0x5e, 0x2e, 0x2c, 0xbd,
	0x38, 0x8d, 0xd0, 0xdf, 0x3d, 0xfe, 0xaa, 0x71, 0xb9, 0x36, 0xdd, 0xe5, 0xf0, 0x72, 0x78, 0x1d,
	0x83, 0x43, 0x9a, 0x95, 0x75, 0x93, 0x31, 0x12, 0x83, 0x1d, 0x72, 0x1f, 0xc6, 0x3d, 0x35, 0x8b,
	0xff, 0xa6, 0x28, 0x0b, 0x12, 0x60, 0x47, 0x12, 0x5e, 0x66, 0xed, 0xb4, 0xcc, 0xb8, 0x76, 0xda,
	0x5d, 0x18, 0xdd, 0x29, 0x8d, 0xe7, 0xda, 0x69, 0xd1, 0xb6, 0x46, 0x9e, 0xa9, 0xe6, 0xff, 0x47,
	0x2f, 0x46, 0x3f, 0xf5, 0xc2, 0xa7, 0x25, 0xee, 0x2e, 0xf3, 0x08, 0x37, 0x05, 0x41, 0xb4, 0xda,
	0x2b, 0x34, 0x78, 0xfb, 0x2b, 0x8a, 0xf4, 0x74, 0x2f, 0x1b, 0xd9, 0x0e, 0x91, 0x78, 0x33, 0x27,
	0x78, 0xac, 0x4f, 0x34, 0x30, 0x24, 0xb3, 0xb5, 0xfe, 0x3d, 0x0b, 0x8e, 0x65, 0x53, 0x08, 0x98,
	0x3d, 0x4e, 0xaf, 0x94, 0xad, 0xd7, 0x1c, 0x07, 0xa9, 0x4b, 0x94, 0x79, 0x95, 0x79, 0x19, 0x33,
	0xaf, 0x06, 0xfc, 0x55, 0x70, 0xff, 0x7e, 0x0f, 0x46, 0xbb, 0x3d, 0xb0, 0x52, 0x8a, 0x47, 0x55,
	0xf2, 0xbd, 0xf1, 0xd3, 0xaf, 0x12, 0x9e, 0x8d, 0x6c, 0xe9, 0x57, 0x47, 0x81, 0xf0, 0xc1, 0x50,
	0x38, 0x14, 0x25, 0x9b, 0x4a, 0xb5, 0x2b, 0x1b, 0xde, 0xe6, 0x8e, 0x9e, 0x34, 0xd4, 0x9f, 0xdb,
	0x01, 0x1c, 0xc1, 0x48, 0x73, 0x23, 0xab, 0x8a, 0xab, 0x41, 0x5f, 0xc1, 0xe8, 0x25, 0x6e, 0x6a,
	0x55, 0xbc, 0xb4, 0x66, 0xfa, 0xd6, 0x48, 0xd3, 0xda, 0xe8, 0xe9, 0xc6, 0x9e, 0xce, 0x0d, 0x84,
	0xe4, 0xf8, 0x39, 0x56, 0x96, 0x89, 0xf8, 0x7f, 0xed, 0xc5, 0xe8, 0x5f, 0xbc, 0xb0, 0x54, 0x8a,
	0xbb, 0x61, 0xee, 0x04, 0x9d, 0x82, 0x42, 0x5c, 0xeb, 0x15, 0x56, 0xf7, 0x5b, 0x21, 0xd2, 0x53,
	0xf7, 0x35, 0x95, 0x38, 0x00, 0xc9, 0x53, 0x17, 0x32, 0xe1, 0x68, 0x12, 0xc8, 0xbf, 0x62, 0xcf,
	0x2e, 0x88, 0x7f, 0x76, 0x89, 0x9b, 0x46, 0x65, 0x3b, 0x74, 0x1b, 0x59, 0x3b, 0x19, 0xfd, 0xcf,
	0xda, 0xc9, 0x4c, 0x32, 0xc2, 0xf0, 0x47, 0x0f, 0x46, 0xbf, 0xf7, 0xc0, 0x1f, 0x02, 0x89, 0x8b,
	0x77, 0x79, 0x1b, 0x88, 0x9f, 0xbc, 0x13, 0x63, 0xaf, 0x89, 0x3e, 0x4d, 0x07, 0x6f, 0x3a, 0xa8,
	0xb6, 0xbc, 0xa7, 0xb6, 0x7c, 0x10, 0xd9, 0xd1, 0x41, 0x3e, 0x24, 0x9e, 0xec, 0xc8, 0xae, 0x8f,
	0x7a, 0xbb, 0x3e, 0xd4, 0xb8, 0x7e, 0x4f, 0x57, 0x74, 0x5f, 0x83, 0x59, 0xed, 0xc1, 0xd9, 0x39,
	0xbd, 0x80, 0xae, 0x9f, 0xe0, 0xc9, 0x09, 0x9c, 0xf4, 0x19, 0x6d, 0x6b, 0xd4, 0x5d, 0x7f, 0x49,
	0x9c, 0xca, 0xd8, 0xf0, 0xc6, 0x6e, 0x20, 0xec, 0x04, 0x03, 0x7c, 0x44, 0xeb, 0x77, 0x14, 0x92,
	0x77, 0x5b, 0x6e, 0xa7, 0x17, 0x8e, 0xe1, 0x60, 0x3e, 0x0d, 0x63, 0x93, 0x6f, 0x03, 0x8c, 0x36,
	0x02, 0xf8, 0x92, 0xc4, 0xc7, 0x87, 0x7c, 0x6f, 0xfc, 0x7c, 0x9e, 0xa4, 0x04, 0x7d, 0xaa, 0x21,
	0xcb, 0x93, 0x19, 0x70, 0x34, 0x49, 0x60, 0xb8, 0x62, 0xe5, 0xd1, 0x43, 0x7c, 0x79, 0x94, 0x44,
	0xec, 0xd2, 0x26, 0x95, 0xfa, 0x13, 0xc0, 0xfc, 0x1d, 0xc0, 0xe8, 0x3f, 0x00, 0x2c, 0x95, 0xb8,
	0x58, 0x94, 0xef, 0x74, 0x4b, 0xf7, 0x49, 0xd2, 0xff, 0xc2, 0x72, 0x7a, 0x33, 0x10, 0xd6, 0x0f,
	0x19, 0x4e, 0xaf, 0x17, 0xb7, 0x7a, 0xe1, 0x18, 0xce, 0x9a, 0xd3, 0x90, 0xaf, 0x37, 0x00, 0x8c,
	0xd6, 0x01, 0xf8, 0x8c, 0xc4, 0xc7, 0x07, 0x8f, 0x08, 0x06, 0x91, 0xa3, 0x4f, 0x65, 0xc0, 0x31,
	0x34, 0xfb, 0xe1, 0x1a, 0x4b, 0xf7, 0x87, 0xa5, 0xff, 0x0b, 0x60, 0xf4, 0x1b, 0x00, 0xcb, 0x24,
	0x3e, 0x1a, 0xe5, 0x3b, 0xdd, 0xd2, 0x85, 0xae, 0x7c, 0x9e, 0xde, 0xe6, 0x85, 0x37, 0xf3, 0x16,
	0x7d, 0x8d, 0xa9, 0x2f, 0x33, 0x53, 0xff, 0x36, 0xd3, 0x28, 0x39, 0x40, 0xcf, 0x35, 0x57, 0x16,
	0x3f, 0xe7, 0xd3, 0x67, 0xdc, 0xbc, 0x4c, 0x51, 0x37, 0xcd, 0xc8, 0xd7, 0x5f, 0x0a, 0xa1, 0xaf,
	0x86, 0x58, 0xdf, 0x6b, 0x9b, 0xee, 0x28, 0x2f, 0x90, 0xe4, 0x35, 0x8d, 0x00, 0x84, 0x4a, 0x6d,
	0x4d, 0xb0, 0x36, 0xb4, 0x70, 0x85, 0x59, 0xaf, 0x4e, 0xc6, 0x68, 0xb2, 0x74, 0x03, 0x1d, 0xed,
	0xe8, 0xb6, 0xe8, 0xd6, 0x83, 0x25, 0xc5, 0xf2, 0x58, 0xd3, 0x05, 0x46, 0xcb, 0xb9, 0x30, 0xcd,
	0x75, 0xb3, 0x02, 0x4c, 0x2f, 0x66, 0x52, 0x43, 0x96, 0x7b, 0x52, 0x43, 0x3e, 0x34, 0x1e, 0xfa,
	0x4f, 0xf0, 0xaa, 0x9b, 0x01, 0xe6, 0x7f, 0xcf, 0x83, 0xd1, 0x1e, 0x0f, 0x7c, 0x4d, 0x72, 0x6c,
	0x2c, 0xf3, 0xf2, 0x3b, 0x8b, 0x21, 0x5e, 0xc6, 0x93, 0x8e, 0xac, 0xf8, 0xd5, 0xc5, 0xcf, 0x03,
	0x63, 0x48, 0xf9, 0x18, 0x10, 0x8e, 0x5e, 0xa4, 0xb4, 0x31, 0x9e, 0x58, 0x63, 0x27, 0xd6, 0xdf,
	0x24, 0x46, 0x67, 0x9c, 0xdf, 0x5e, 0xa6, 0xa9, 0x5e, 0xdc, 0x91, 0x01, 0x47, 0xd9, 0xf0, 0x93,
	0x86, 0x3e, 0xac, 0x97, 0xe1, 0x70, 0xf3, 0x32, 0x18, 0x65, 0x87, 0x2f, 0x60, 0x74, 0xbf, 0x34,
	0xca, 0x46, 0x22, 0x25, 0xc5, 0xf2, 0x5d, 0x6e, 0x65, 0x36, 0xac, 0x70, 0x81, 0x58, 0x87, 0xfe,
	0x4f, 0x01, 0x46, 0xc7, 0x00, 0x2c, 0x91, 0x9c, 0x98, 0x76, 0x21, 0xc5, 0x44, 0x89, 0x93, 0x65,
	0x42, 0x30, 0x25, 0x67, 0x13, 0x73, 0xd3, 0xcd, 0x97, 0x9c, 0xb7, 0xc6, 0x57, 0x2f, 0x7e, 0xe8,
	0xa5, 0xe5, 0x1a, 0x2e, 0x9f, 0x48, 0x4c, 0x3a, 0xef, 0x6a, 0x26, 0xbb, 0x81, 0x4e, 0x7f, 0x89,
	0x75, 0x6f, 0xea, 0x66, 0xb1, 0xbb, 0xf3, 0xe7, 0x00, 0xa3, 0xaf, 0x6a, 0xbb, 0x63, 0x5f, 0xac,
	0x79, 0x0d, 0x93, 0xf9, 0xd8, 0xfd, 0xda, 0x51, 0xac, 0x47, 0x59, 0x11, 0x5e, 0xbf, 0x38, 0x21,
	0x90, 0xfa, 0x76, 0xd5, 0x8b, 0xef, 0x19, 0x15, 0xfa, 0xd3, 0x99, 0x8f, 0x97, 0xc3, 0x6c, 0x8a,
	0x3b, 0x7b, 0x4d, 0x43, 0x8a, 0x15, 0xcb, 0x9b, 0xf1, 0xce, 0x8d, 0x75, 0x79, 0x33, 0xde, 0x0d,
	0x3c, 0x60, 0x8c, 0xe6, 0x3f, 0x98, 0x81, 0xd1, 0xbe, 0x0c, 0xf8, 0x88, 0xe4, 0xd8, 0x03, 0x77,
	0x2a, 0x4a, 0xc4, 0xe4, 0x9f, 0x79, 0x85, 0xef, 0x7a, 0xfb, 0xc3, 0xe6, 0x7a, 0x80, 0x55, 0x27,
	0x9e, 0xfc, 0x7e, 0x11, 0x53, 0x1c, 0x35, 0x74, 0x49, 0xea, 0x1f, 0xea, 0xdf, 0x18, 0xcf, 0x60,
	0xdb, 0x1e, 0x20, 0x76, 0x3e, 0x11, 0x6c, 0xaf, 0x7d, 0x98, 0x6a, 0x2a, 0xc4, 0xa5, 0x2b, 0x55,
	0xe8, 0xab, 0x17, 0xf1, 0x30, 0xeb, 0x45, 0x7c, 0x4a, 0x28, 0xca, 0x55, 0x59, 0x87, 0x3f, 0x7e,
	0x58, 0xd6, 0x34, 0xda, 0x52, 0x09, 0xcb, 0x52, 0x4b, 0xcd, 0x19, 0x96, 0xdd, 0x0e, 0x9c, 0x71,
	0xd9, 0x15, 0x18, 0x2d, 0xb3, 0xc5, 0x65, 0xe7, 0x9b, 0x43, 0xb1, 0x3f, 0xfb, 0xdc, 0x83, 0xb4,
	0x24, 0x42, 0x4b, 0xd9, 0xc0, 0x88, 0xd0, 0x92, 0xa3, 0x89, 0xf6, 0xe7, 0x14, 0xfd, 0xcf, 0x9d,
	0xbb, 0x23, 0xa7, 0xdb, 0x2e, 0x7d, 0xc0, 0x56, 0x78, 0x0f, 0xc0, 0xe1, 0xd5, 0x35, 0xe5, 0xa1,
	0x1a, 0x7d, 0xd1, 0xa4, 0xc2, 0x46, 0x23, 0xc0, 0xa8, 0x01, 0x48, 0x23, 0x22, 0x9b, 0xb0, 0xda,
	0xd5, 0x42, 0x97, 0xbd, 0xd0, 0x5c, 0x36, 0xfb, 0xb3, 0x2f, 0xff, 0x1e, 0x52, 0x61, 0xef, 0x5e,
	0x3f, 0x35, 0x3b, 0x4c, 0x19, 0x7f, 0x7a, 0x93, 0x7a, 0xe0, 0xb0, 0xda, 0x74, 0x4c, 0x3d, 0xd6,
	0x72, 0x0f, 0x69, 0xd3, 0x2c, 0x94, 0xa6, 0x63, 0x91, 0xed, 0x87, 0xef, 0xf5, 0x15, 0xf8, 0x89,
	0x23, 0x95, 0x90, 0x58, 0xcf, 0xe9, 0x4d, 0x66, 0x5b, 0xec, 0x35, 0xe6, 0xd8, 0xbc, 0xfc, 0xbb,
	0x3d, 0x18, 0xb5, 0x79, 0xe0, 0x02, 0xc9, 0x8d, 0xf2, 0xe5, 0x09, 0x6c, 0x04, 0xce, 0x62, 0x92,
	0xeb, 0x1b, 0x9d, 0xe0, 0x0d, 0x04, 0x5b, 0x40, 0xb9, 0x03, 0x08, 0x1f, 0x5d, 0xd6, 0x17, 0xce,
	0x52, 0x0e, 0x29, 0x1f, 0xcf, 0x86, 0x39, 0x7c, 0xd4, 0xa4, 0xe7, 0x5b, 0x07, 0x54, 0x63, 0x29,
	0xf6, 0x1b, 0x0e, 0x86, 0x0e, 0x27, 0x75, 0x89, 0x9d, 0x74, 0xe2, 0x52, 0x97, 0xd8, 0x09, 0x18,
	0x30, 0x87, 0xf0, 0x9f, 0xc8, 0xc0, 0xe8, 0x78, 0x06, 0x7c, 0x41, 0x72, 0xdd, 0x81, 0x44, 0xd4,
	0x99, 0x48, 0x8d, 0x7f, 0xdf, 0x2b, 0x7c, 0xd6, 0x2f, 0x35, 0x4e, 0xc3, 0xc2, 0xd7, 0x14, 0xf9,
	0x90, 0x53, 0xe4, 0xf3, 0x7d, 0xf5, 0xe2, 0xcf, 0x33, 0x8d, 0xbb, 0xf3, 0x43, 0xd0, 0x63, 0xc4,
	0xee, 0xf6, 0x40, 0x1f, 0x98, 0x84, 0x79, 0xd4, 0xd9, 0x44, 0x54, 0xfa, 0x03, 0x18, 0xcd, 0x34,
	0x99, 0x51, 0x77, 0xee, 0x50, 0xad, 0x3e, 0x3e, 0xa6, 0x73, 0x48, 0xc4, 0xd9, 0x01, 0x62, 0x3a,
	0xa3, 0xbe, 0x60, 0xb9, 0xd4, 0xa2, 0x57, 0xea, 0x30, 0xc2, 0xd5, 0x63, 0xed, 0xbd, 0x24, 0x8a,
	0x5b, 0x27, 0x59, 0x9b, 0xd8, 0xbf, 0xc7, 0x83, 0xd1, 0x4e, 0x0f, 0x9c, 0x2f, 0x39, 0x76, 0xd1,
	0xb8, 0xf7, 0x9f, 0xdc, 0xb9, 0xcf, 0xac, 0xf7, 0x6f, 0x22, 0x68, 0x80, 0x1f, 0xea, 0xef, 0x17,
	0xdb, 0x3b, 0x5d, 0x3f, 0x1c, 0xfd, 0xc4, 0xb2, 0x85, 0xe3, 0x69, 0xff, 0x7a, 0x71, 0x9d, 0x17,
	0x8e, 0xb2, 0xe1, 0x26, 0x0d, 0xfd, 0xd4, 0x2b, 0x01, 0x46, 0x5f, 0x86, 0x8f, 0x4a, 0x4e, 0x54,
	0xb8, 0xd3, 0xc9, 0x40, 0xdf, 0x7b, 0xdd, 0x98, 0x61, 0x94, 0x03, 0x48, 0x37, 0x59, 0xd3, 0x9f,
	0xb7, 0x73, 0x7f, 0x0e, 0x30, 0xfa, 0x7b, 0x00, 0x9f, 0x90, 0x1c, 0x38, 0x33, 0x2a, 0x07, 0x24,
	0xf2, 0xfa, 0xf2, 0x79, 0x79, 0x00, 0xae, 0xa2, 0xf7, 0x8b, 0x97, 0xed, 0x9c, 0x4b, 0xaf, 0xa2,
	0x5b, 0xd7, 0x96, 0xce, 0x57, 0xd1, 0xed, 0x98, 0xe0, 0x6d, 0xf3, 0x40, 0xb3, 0xe4, 0xfa, 0x0c,
	0x38, 0x6a, 0xde, 0xd2, 0xd2, 0xca, 0x0a, 0x65, 0xd1, 0x35, 0x9e, 0x4c, 0xcc, 0x93, 0x3f, 0x01,
	0x18, 0xfd, 0x10, 0xc0, 0x2f, 0x4a, 0x4e, 0xa4, 0xc9, 0xc2, 0x95, 0xce, 0x8e, 0xff, 0xe3, 0x81,
	0x82, 0x7d, 0x59, 0x69, 0xc8, 0x8f, 0xcb, 0x30, 0x52, 0x20, 0x92, 0x38, 0xa8, 0xb0, 0x6e, 0xf1,
	0x40, 0xb3, 0xe2, 0x0f, 0x32, 0xa1, 0x10, 0xa8, 0xae, 0xac, 0x2c, 0x0d, 0x96, 0x2d, 0x1e, 0x8a,
	0xbc, 0x48, 0xbc, 0x43, 0x71, 0x78, 0xf1, 0x35, 0x27, 0x2f, 0xea, 0x6e, 0xea, 0xd1, 0xce, 0x0e,
	0x4a, 0x8a, 0xe5, 0xc9, 0xea, 0xc9, 0xe3, 0xd1, 0xd3, 0x2d, 0xa6, 0x4b, 0xca, 0x68, 0x88, 0xdd,
	0xe6, 0x7c, 0xeb, 0x2d, 0xb5, 0x7d, 0x35, 0xf9, 0x2a, 0xb2, 0x69, 0xbd, 0x95, 0x79, 0x37, 0x03,
	0x38, 0xa2, 0x2a, 0xb4, 0x3c, 0x60, 0x8b, 0x76, 0xe9, 0x2f, 0x66, 0xdc, 0x12, 0xd9, 0xb5, 0x27,
	0xb2, 0x6b, 0x27, 0xf9, 0x52, 0x6d, 0x3a, 0x66, 0x0e, 0xf9, 0xa8, 0xbd, 0x21, 0x36, 0xea, 0x44,
	0x9f, 0x7a, 0x68, 0x55, 0x64, 0xf7, 0x2e, 0xf2, 0x48, 0x03, 0x71, 0x27, 0x99, 0x70, 0x64, 0x8e,
	0x3d, 0xa7, 0x36, 0xa8, 0xeb, 0x37, 0x6a, 0xdf, 0xe8, 0xde, 0xb5, 0xba, 0x59, 0x01, 0xcb, 0x0c,
	0x12, 0x64, 0x9d, 0xf2, 0xe5, 0xc9, 0x2f, 0x00, 0x46, 0xff, 0x00, 0xe0, 0x93, 0x12, 0x67, 0xe7,
	0xe5, 0x1c, 0xba, 0x76, 0xf2, 0xc6, 0xee, 0x15, 0x2b, 0x56, 0xfe, 0xde, 0x0b, 0x6f, 0x72, 0xac,
	0x2e, 0x0d, 0x3d, 0x42, 0xcf, 0x38, 0x83, 0xb3, 0xd3, 0x31, 0x9a, 0x62, 0x26, 0x1c, 0x18, 0x54,
	0xea, 0xa3, 0x91, 0x59, 0x42, 0x7d, 0x4c, 0x64, 0x96, 0x1f, 0xf7, 0xab, 0xc7, 0xe8, 0x0d, 0xf8,
	0xb0, 0xc4, 0x43, 0x31, 0x8f, 0x82, 0x06, 0x5a, 0x6a, 0x35, 0x5a, 0x2f, 0xc2, 0x5f, 0x91, 0x69,
	0x27, 0x17, 0x79, 0x6d, 0x2b, 0xdf, 0xe2, 0x48, 0x48, 0x26, 0x6b, 0xc5, 0x91, 0x1a, 0x9f, 0x99,
	0x72, 0x6a, 0xbc, 0x35, 0x7f, 0x25, 0x6b, 0x40, 0xf3, 0x57, 0xb2, 0x93, 0xca, 0x5f, 0x19, 0x96,
	0x5c, 0xfe, 0xca, 0x2f, 0x3d, 0x18, 0xfd, 0xdc, 0x03, 0x6b, 0x25, 0x3e, 0x99, 0xc8, 0x77, 0xc5,
	0x49, 0x62, 0x71, 0xcd, 0x94, 0xb3, 0xe5, 0xb3, 0xd8, 0x13, 0xe7, 0xcc, 0x4c, 0x96, 0x08, 0x10,
	0x7e, 0x39, 0x50, 0xb7, 0xb2, 0x92, 0x4d, 0x57, 0x71, 0x73, 0x55, 0xf6, 0x3b, 0x01, 0x2f, 0x99,
	0xfc, 0x97, 0xee, 0x0c, 0x78, 0x33, 0x0f, 0xbf, 0x69, 0x28, 0x67, 0x17, 0xc0, 0x1b, 0xac, 0x37,
	0x7b, 0x06, 0x28, 0x13, 0xc6, 0xd6, 0xab, 0xff, 0x5b, 0x00, 0xa3, 0xbf, 0x00, 0xf0, 0x05, 0xc9,
	0x05, 0xf1, 0x2e, 0x94, 0x9d, 0x42, 0xf6, 0xdf, 0x22, 0x61, 0x41, 0xea, 0x77, 0xb1, 0x02, 0xfd,
	0xc9, 0x91, 0xf9, 0xbe, 0x97, 0xbd, 0x45, 0x7f, 0x05, 0x24, 0xca, 0xcc, 0x76, 0x6c, 0x72, 0x12,
	0x87, 0x3f, 0xfb, 0x0e, 0xd2, 0x5a, 0x7f, 0xaf, 0x48, 0xdc, 0xb5, 0x9b, 0x17, 0xea, 0x5c, 0xfc,
	0xa7, 0xae, 0xc2, 0xc9, 0x36, 0x8c, 0x5c, 0x27, 0x2c, 0x1b, 0x80, 0xd4, 0xdd, 0x40, 0x3f, 0x92,
	0x69, 0x36, 0x0e, 0x83, 0x63, 0x38, 0x4b, 0x4b, 0x43, 0xa1, 0xb0, 0xd6, 0xb8, 0xdd, 0x19, 0xb0,
	0xe4, 0xd5, 0x8c, 0xb6, 0xdc, 0xee, 0x1c, 0x9c, 0xe4, 0x1a, 0xcb, 0xb8, 0xc2, 0x7c, 0x67, 0xb5,
	0x84, 0x5b, 0x6c, 0x81, 0xc1, 0xf8, 0xe5, 0x12, 0x48, 0xdf, 0x6e, 0xe5, 0x12, 0x76, 0x66, 0x60,
	0xb4, 0x3d, 0x03, 0xbe, 0x24, 0xf1, 0xf7, 0xdd, 0x9d, 0xa6, 0x53, 0x10, 0x4b, 0x27, 0xbd, 0xc2,
	0xa7, 0xde, 0x7e, 0x0b, 0xa6, 0x58, 0xd9, 0x84, 0xc0, 0x40, 0x06, 0x02, 0x4b, 0x53, 0x0a, 0x03,
	0xa6, 0xf0, 0xd0, 0x30, 0x8d, 0x01, 0xba, 0x85, 0xf9, 0x98, 0xe2, 0x53, 0xfd, 0xaa, 0x60, 0x72,
	0x49, 0xd3, 0x76, 0xb6, 0x0e, 0xe3, 0x5c, 0xfa, 0xbe, 0x12, 0x72, 0x77, 0x52, 0xaa, 0x47, 0x77,
	0x2d, 0x5f, 0x67, 0x45, 0x38, 0x64, 0x4b, 0xaa, 0xc9, 0x1a, 0x9a, 0x49, 0x35, 0x83, 0xf9, 0x00,
	0xcf, 0x11, 0x0f, 0x46, 0x07, 0x3c, 0x50, 0x91, 0xe2, 0x92, 0xbc, 0x3c, 0x39, 0x99, 0xa4, 0x9d,
	0x54, 0xab, 0x41, 0x7c, 0x04, 0x84, 0xf7, 0xc1, 0x25, 0x7b, 0x0b, 0xfd, 0xa2, 0x33, 0x77, 0x7e,
	0x98, 0x0d, 0x6f, 0x8f, 0x83, 0xa4, 0x34, 0xb4, 0x17, 0xfe, 0x84, 0x9e, 0xd0, 0x03, 0xd6, 0x1c,
	0x1e, 0xbe, 0xbd, 0x70, 0xf1, 0x89, 0x3c, 0xd6, 0xc1, 0xfc, 0x7f, 0x99, 0x81, 0xd1, 0x9f, 0x65,
	0xc0, 0x0a, 0x29, 0xfe, 0xae, 0x24, 0xa2, 0xdd, 0x14, 0x74, 0xfa, 0xb5, 0xec, 0x9e, 0xab, 0x32,
	0xbb, 0xe7, 0x37, 0x99, 0x96, 0x4b, 0xf5, 0x57, 0x64, 0x88, 0x6f, 0x20, 0x8e, 0x7a, 0x57, 0x49,
	0xb2, 0xcf, 0x41, 0x0f, 0x46, 0xfb, 0x3c, 0xf0, 0x35, 0x89, 0xbf, 0xa9, 0x46, 0x65, 0x80, 0x8b,
	0x3d, 0xb1, 0xb2, 0x71, 0x84, 0xe3, 0x40, 0xe8, 0x00, 0x97, 0xe5, 0xf8, 0x9a, 0x6c, 0xfa, 0x0f,
	0x27, 0xe5, 0xe7, 0x5d, 0x2f, 0xbc, 0x99, 0x87, 0xa1, 0x34, 0x8c, 0x66, 0x62, 0x80, 0xd1, 0x26,
	0x00, 0x5f, 0x96, 0x5c, 0x10, 0xe2, 0x4e, 0x33, 0x83, 0x78, 0x4d, 0xf5, 0xe3, 0x0c, 0x4b, 0x4d,
	0x80, 0xf4, 0x15, 0x4b, 0xfd, 0xc9, 0x41, 0xf8, 0x0d, 0xc0, 0xe8, 0xdf, 0x00, 0x7c, 0x55, 0xe2,
	0xa3, 0xd0, 0xb8, 0x71, 0x9c, 0x82, 0x37, 0x9d, 0x1f, 0x41, 0x1c, 0xa8, 0x3b, 0xe7, 0x81, 0x81,
	0x09, 0x23, 0x6e, 0xf7, 0xc2, 0x9b, 0x79, 0x0b, 0x4e, 0x43, 0x9e, 0x6e, 0x06, 0x18, 0x35, 0x01,
	0xf8, 0xac, 0xe4, 0x82, 0x10, 0x1e, 0x09, 0x0c, 0x22, 0x37, 0x1f, 0xcf, 0x80, 0x37, 0xd3, 0x64,
	0x89, 0x6b, 0xec, 0xdc, 0x7f, 0x76, 0x76, 0xc1, 0xa1, 0x7c, 0x7b, 0x0a, 0x9c, 0x1c, 0x47, 0x91,
	0x0f, 0x31, 0x76, 0xde, 0xe2, 0x85, 0xb7, 0x70, 0x17, 0x9c, 0x86, 0xfc, 0xbc, 0x0e, 0x60, 0xb4,
	0x1a, 0xc0, 0x27, 0x25, 0x37, 0x8c, 0x58, 0x69, 0x60, 0x10, 0x59, 0xf9, 0x57, 0x19, 0xf0, 0x16,
	0x23, 0x91, 0x60, 0xc8, 0xf2, 0x72, 0xc2, 0x44, 0xa4, 0x5a, 0x17, 0x5e, 0x1e, 0xd8, 0x6c, 0xa4,
	0x81, 0x60, 0xfe, 0x3f, 0x00, 0x8c, 0x7e, 0x07, 0xe0, 0x02, 0xc9, 0x0d, 0xeb, 0xf2, 0x9d, 0x6e,
	0x49, 0x40, 0x57, 0x81, 0x0c, 0xd8, 0xe9, 0x85, 0x39, 0xfc, 0x75, 0xa7, 0xa1, 0x10, 0xd8, 0x04,
	0x30, 0x7a, 0x0b, 0xc0, 0xe7, 0x25, 0x57, 0x94, 0xf0, 0x68, 0x61, 0x10, 0x65, 0x41, 0x63, 0xb6,
	0xb5, 0x2c, 0x33, 0x0a, 0x87, 0x4b, 0xaa, 0x94, 0x5a, 0xcd, 0xe2, 0xb8, 0x7a, 0x62, 0x05, 0xaf,
	0xc2, 0xe1, 0x65, 0x95, 0x4b, 0x95, 0xda, 0x50, 0x8d, 0x99, 0x27, 0x80, 0x30, 0xfa, 0x82, 0xf1,
	0x41, 0xdf, 0xce, 0xb5, 0xd1, 0xb3, 0x07, 0x4a, 0x8a, 0x65, 0xc9, 0x3c, 0xd2, 0x93, 0x40, 0x41,
	0x64, 0xfb, 0x09, 0x33, 0x56, 0xa0, 0x36, 0x1d, 0x23, 0x70, 0xd1, 0xd3, 0x9f, 0xaa, 0x5d, 0x87,
	0xea, 0x66, 0x05, 0x62, 0x7d, 0x0a, 0x2f, 0xc0, 0xac, 0x37, 0xaa, 0xab, 0x42, 0x66, 0x8e, 0x0f,
	0xdb, 0xbb, 0x7a, 0xe0, 0xb0, 0xda, 0xdc, 0x95, 0xb8, 0x77, 0x02, 0x67, 0xf6, 0x4e, 0x3b, 0x14,
	0xea, 0x9c, 0x8f, 0xe7, 0xbf, 0x88, 0xd1, 0x73, 0xa6, 0xff, 0x9c, 0xb8, 0xf7, 0xbf, 0x10, 0xa7,
	0x84, 0xf3, 0xae, 0x23, 0xd1, 0xae, 0x73, 0x6a, 0x4b, 0x47, 0xef, 0xe1, 0x43, 0xbd, 0x67, 0xcf,
	0xfa, 0x64, 0x7f, 0xf4, 0xd0, 0xe9, 0x68, 0xd7, 0xb9, 0x9e, 0xce, 0x8d, 0xe6, 0x8f, 0xd4, 0xad,
	0xfe, 0xff, 0x2e, 0xd5, 0xb3, 0xf9, 0x9b, 0x3c, 0x18, 0xbd, 0xe5, 0x81, 0x4b, 0xa4, 0x78, 0xb4,
	0x67, 0x7d, 0x59, 0x9c, 0x16, 0xd6, 0x6d, 0xdf, 0xdd, 0x73, 0x76, 0x43, 0xdc, 0xab, 0x4d, 0xe6,
	0x02, 0x1c, 0xfe, 0xfa, 0x1d, 0x40, 0xd8, 0x7a, 0xa9, 0xab, 0x37, 0x33, 0xce, 0xf9, 0x78, 0xbe,
	0xf9, 0xcf, 0xb2, 0xac, 0x31, 0x3b, 0x2b, 0x2a, 0xd2, 0xd0, 0x35, 0xaf, 0xc0, 0xe1, 0x15, 0x06,
	0x02, 0xec, 0x45, 0x9a, 0x19, 0xe4, 0x18, 0x5e, 0x79, 0x86, 0x38, 0x68, 0x91, 0x66, 0x17, 0xaf,
	0xbc, 0x03, 0x30, 0x10, 0x1b, 0xc7, 0xff, 0x6d, 0x2f, 0x46, 0xdf, 0xf0, 0xc2, 0xe7, 0xa4, 0xb8,
	0x7b, 0xe1, 0x4e, 0x97, 0x89, 0xd2, 0x2e, 0x7f, 0xe5, 0x11, 0x7a, 0x3d, 0x29, 0xf9, 0xdf, 0xcd,
	0xb9, 0x51, 0x07, 0x3c, 0xfd, 0xd3, 0x74, 0xc4, 0xa7, 0x4c, 0x8f, 0xa6, 0xcc, 0xd2, 0x3e, 0x92,
	0x83, 0xd3, 0x0b, 0x67, 0xcc, 0x98, 0x96, 0x9f, 0xe8, 0x23, 0x22, 0x8a, 0xb4, 0x2f, 0x0a, 0x4b,
	0xe5, 0xd2, 0x29, 0xe5, 0xf9, 0xa1, 0x44, 0x5f, 0x94, 0x97, 0xe9, 0xef, 0x3f, 0x97, 0x91, 0xf7,
	0xa3, 0x4b, 0xe6, 0x89, 0x7e, 0xb1, 0x40, 0x9e, 0x3e, 0x29, 0x7f, 0x52, 0xfe, 0xa4, 0x02, 0xe2,
	0x1d, 0x2f, 0x0d, 0x55, 0x2a, 0xb1, 0x47, 0xa3, 0x07, 0xc3, 0x2d, 0xfe, 0x3f, 0x99, 0x34, 0xde,
	0x15, 0x08, 0x05, 0xcb, 0x16, 0x05, 0x4b, 0x2b, 0x43, 0xd7, 0x94, 0xdb, 0x10, 0x53, 0x6e, 0x83,
	0xf8, 0x3e, 0xc0, 0x1f, 0x01, 0x46, 0xbf, 0x07, 0xb0, 0x52, 0x8a, 0x4f, 0x03, 0xf2, 0xdd, 0x46,
	0xae, 0x0c, 0x55, 0x85, 0x4e, 0x09, 0x11, 0x4f, 0xdb, 0xd8, 0x34, 0xcc, 0x7a, 0x20, 0xac, 0xbd,
	0xd4, 0x1a, 0xc6, 0x4d, 0xa5, 0x44, 0xb3, 0xe0, 0xb8, 0x78, 0x4b, 0x4f, 0xcb, 0x78, 0x6f, 0x72,
	0x4a, 0xa5, 0x04, 0xa3, 0xb9, 0x5c, 0xa5, 0x92, 0xef, 0x12, 0xea, 0x75, 0xa5, 0x1d, 0x56, 0xbb,
	0xfc, 0xd0, 0x8b, 0xd1, 0x79, 0x2f, 0x2c, 0x95, 0x12, 0x6c, 0x4b, 0x12, 0x24, 0x79, 0x4d, 0xd1,
	0x0c, 0x25, 0x45, 0x63, 0x9e, 0xa1, 0x1e, 0x0b, 0xd6, 0x96, 0x2d, 0x0a, 0x95, 0x5f, 0x29, 0x6a,
	0xe6, 0xab, 0xc0, 0x79, 0x97, 0x6b, 0x1f, 0xc0, 0xe8, 0x5d, 0x20, 0x8d, 0x60, 0x8f, 0x9f, 0xf2,
	0x5b, 0x20, 0x8e, 0x74, 0x67, 0x21, 0x7b, 0x3a, 0x8f, 0xd2, 0x30, 0x6a, 0xf3, 0xa9, 0xbe, 0x35,
	0xfa, 0x35, 0xaa, 0x03, 0x5d, 0x3d, 0x67, 0x37, 0x90, 0xec, 0xab, 0x9e, 0xce, 0xae, 0xc8, 0xf6,
	0xbd, 0x04, 0x20, 0xb2, 0xe9, 0xb0, 0xda, 0x74, 0xc2, 0xf4, 0xc1, 0xa8, 0x4d, 0xef, 0x50, 0x5e,
	0x3a, 0xb3, 0x45, 0x5d, 0xbf, 0x91, 0x1c, 0x61, 0x62, 0x0c, 0xc0, 0x90, 0xbe, 0xf5, 0x86, 0xd8,
	0x4e, 0x60, 0xb9, 0x21, 0x41, 0xd4, 0xdf, 0x9b, 0x18, 0xd5, 0xd9, 0x56, 0xb0, 0x20, 0xce, 0x02,
	0x7a, 0x3b, 0x0e, 0xd2, 0x49, 0x9f, 0xc1, 0xea, 0xc7, 0xbb, 0xa3, 0x6d, 0x8d, 0x28, 0x1c, 0xee,
	0xe9, 0xdc, 0x40, 0xa7, 0x62, 0x4c, 0xa2, 0xa7, 0xb3, 0x55, 0x93, 0x7c, 0x26, 0xb0, 0xb1, 0x42,
	0xdb, 0xe4, 0xd8, 0xab, 0x16, 0xa6, 0x7a, 0xcb, 0x4c, 0x56, 0xbd, 0x65, 0x25, 0xab, 0xde, 0x36,
	0x7b, 0x30, 0x6a, 0xf6, 0xc0, 0x37, 0xa4, 0x78, 0x94, 0x27, 0x17, 0xd2, 0xc1, 0x48, 0x36, 0xa9,
	0x6d, 0xde, 0x49, 0x29, 0x3a, 0x36, 0x6a, 0x64, 0x53, 0x76, 0x1b, 0x81, 0xf0, 0xd6, 0x40, 0x5e,
	0x3e, 0xbb, 0x58, 0x85, 0xf7, 0x5b, 0xe3, 0x0c, 0xc5, 0x45, 0x46, 0x1a, 0xaa, 0xbb, 0x55, 0x20,
	0x49, 0x7d, 0xf7, 0x04, 0x46, 0x8f, 0x72, 0xf5, 0xdd, 0x34, 0x7e, 0x12, 0x74, 0x22, 0x42, 0x62,
	0xb5, 0x1e, 0x7d, 0xda, 0xad, 0x52, 0x8a, 0xbb, 0x37, 0x29, 0x52, 0xea, 0x35, 0xfd, 0x37, 0x94,
	0xf4, 0xdf, 0xdf, 0x67, 0x52, 0xc6, 0x9b, 0xb3, 0x60, 0x41, 0xa8, 0xac, 0xf6, 0xca, 0x51, 0x80,
	0xfd, 0x2e, 0x16, 0x38, 0xd3, 0x79, 0xcb, 0x33, 0xd9, 0x82, 0x04, 0x83, 0xa8, 0x13, 0xfe, 0xd6,
	0x83, 0xd1, 0xf7, 0x3c, 0x70, 0x3d, 0x90, 0xe2, 0x6e, 0x87, 0x3c, 0x8d, 0xf2, 0xf3, 0xc9, 0xe3,
	0xd1, 0xd6, 0x3d, 0x91, 0xad, 0x4d, 0xac, 0xa6, 0x4c, 0x5a, 0x31, 0x30, 0x35, 0xed, 0xe2, 0xe8,
	0x88, 0xaf, 0x02, 0xe1, 0xcc, 0x65, 0xa8, 0x6f, 0x57, 0xd3, 0x8f, 0xf7, 0x9e, 0xdc, 0xd4, 0xca,
	0x6f, 0xb2, 0xa8, 0x1b, 0x81, 0x8f, 0xce, 0x6b, 0xc7, 0xa8, 0x01, 0x3b, 0x46, 0x19, 0xf4, 0x18,
	0x5f, 0xa1, 0xf4, 0x78, 0x31, 0xfa, 0x47, 0x2f, 0x0c, 0x4b, 0xf1, 0x77, 0x25, 0x75, 0x2a, 0xbf,
	0xa6, 0x54, 0x86, 0x92, 0x52, 0xf9, 0x9b, 0x6c, 0x98, 0xab, 0x6f, 0x30, 0xb3, 0xb1, 0x57, 0xc0,
	0x95, 0xc5, 0x38, 0xb7, 0xcc, 0x59, 0x8a, 0x73, 0x73, 0xe6, 0xcd, 0x71, 0x3a, 0xf3, 0xe2, 0x77,
	0x61, 0xb8, 0xf7, 0xac, 0x2e, 0xbb, 0x07, 0x6d, 0x2e, 0xbb, 0x04, 0xd3, 0xa0, 0x4e, 0x3c, 0xc6,
	0x31, 0x77, 0x27, 0xf4, 0x94, 0x97, 0xd1, 0x8c, 0xd5, 0x9b, 0x30, 0x1a, 0x29, 0x8d, 0x88, 0xec,
	0xea, 0x8a, 0x34, 0x9d, 0x23, 0xf8, 0xa9, 0x9b, 0x15, 0xf0, 0x94, 0x97, 0x09, 0x93, 0xa1, 0xa7,
	0x64, 0x1e, 0xbd, 0x47, 0x7e, 0x07, 0x46, 0xb7, 0x49, 0x9e, 0x92, 0x79, 0xf2, 0x68, 0xe7, 0x28,
	0x25, 0xf3, 0xea, 0x7c, 0x01, 0x4f, 0xc9, 0x3c, 0x8b, 0xbe, 0x1d, 0x96, 0x82, 0xbe, 0xf5, 0x7f,
	0xdd, 0x8b, 0xd1, 0x39, 0x2f, 0x6c, 0x01, 0x52, 0x1c, 0x9a, 0x30, 0x6d, 0x48, 0xc7, 0x04, 0x4c,
	0x19, 0x90, 0x74, 0x7d, 0x3c, 0x13, 0x95, 0xe7, 0x01, 0x45, 0xc9, 0x79, 0xe0, 0x29, 0x2f, 0x3b,
	0x0f, 0x3c, 0x25, 0xf3, 0x18, 0xdd, 0x27, 0x7f, 0xe0, 0x11, 0x0e, 0x7b, 0x2e, 0xb1, 0xc3, 0x8f,
	0x11, 0x02, 0xfd, 0x90, 0x01, 0xc1, 0x19, 0xa5, 0x53, 0x0b, 0xca, 0xa7, 0x2e, 0xd0, 0xd4, 0x61,
	0x7e, 0x1c, 0x75, 0xa8, 0xc9, 0x00, 0x53, 0x04, 0xf4, 0x47, 0x07, 0x6b, 0x62, 0xc3, 0xc7, 0xc8,
	0x8d, 0x7a, 0xf1, 0xdf, 0x87, 0x53, 0x3f, 0x09, 0x6f, 0xfb, 0xd2, 0x50, 0x8f, 0x86, 0x9c, 0x56,
	0xe4, 0x43, 0x18, 0x15, 0x3b, 0x6a, 0x85, 0xc8, 0x7c, 0x75, 0x49, 0xdc, 0x13, 0xa6, 0xd2, 0x74,
	0x7b, 0xd1, 0x41, 0x50, 0x98, 0xd7, 0x53, 0x88, 0x38, 0x78, 0x0e, 0xa3, 0xa7, 0xa5, 0x31, 0xdc,
	0x37, 0xe5, 0xe5, 0xfb, 0x93, 0x19, 0x8c, 0x3a, 0x6d, 0xf4, 0x52, 0x13, 0xe6, 0xfb, 0xc3, 0x25,
	0xc5, 0xcc, 0xcb, 0x2b, 0x2f, 0x41, 0x6f, 0x99, 0x59, 0xb2, 0x42, 0x37, 0x04, 0xe8, 0x78, 0xe4,
	0xc5, 0xc3, 0xe8, 0xd1, 0xb3, 0xea, 0xe6, 0x8d, 0xb3, 0x4b, 0x8a, 0x5d, 0xee, 0xd9, 0x72, 0xc7,
	0x9b, 0x5d, 0x52, 0x1c, 0xd0, 0x7a, 0x15, 0x56, 0x03, 0x98, 0x5d, 0xb6, 0x60, 0xe1, 0xa3, 0x15,
	0x55, 0x8b, 0xa9, 0xf8, 0xa9, 0xc0, 0x68, 0x81, 0xf1, 0xda, 0x39, 0x19, 0xa1, 0xf7, 0x2b, 0x8d,
	0x91, 0xae, 0xcd, 0x7d, 0x5b, 0xce, 0x46, 0x36, 0x1d, 0x94, 0xbf, 0x98, 0xfc, 0x20, 0xa4, 0x0f,
	0xf6, 0xeb, 0x89, 0x3e, 0xb5, 0xa5, 0xa3, 0x77, 0xf5, 0x19, 0x52, 0x35, 0x28, 0x60, 0x8c, 0x2c,
	0xbc, 0xa7, 0xcd, 0xa2, 0xba, 0xaa, 0x36, 0x54, 0x45, 0x22, 0xdf, 0x23, 0x8a, 0x9a, 0x00, 0x46,
	0x8d, 0x40, 0x1a, 0xc1, 0xce, 0x43, 0xae, 0x4d, 0x01, 0xa1, 0x1d, 0xa7, 0xd4, 0xae, 0x56, 0xf6,
	0xeb, 0x0b, 0xdd, 0xcd, 0xe4, 0x71, 0x48, 0x76, 0x42, 0xc4, 0x79, 0x45, 0xa6, 0x33, 0xd1, 0xd7,
	0x73, 0xfa, 0x60, 0x69, 0x50, 0x09, 0x4d, 0x9b, 0xa2, 0x9e, 0xd9, 0xaf, 0x76, 0xb7, 0x90, 0xee,
	0x03, 0xc6, 0xcc, 0xfc, 0xff, 0xeb, 0xc1, 0xe8, 0xbf, 0x3d, 0x70, 0xb1, 0x14, 0x8f, 0xf5, 0x52,
	0x14, 0x9d, 0x89, 0x2c, 0xa5, 0xf5, 0x1e, 0x61, 0xad, 0x67, 0x90, 0xdf, 0xfc, 0xe8, 0xe7, 0xb5,
	0x9c, 0x32, 0x6a, 0x09, 0xe5, 0xcf, 0x29, 0x9e, 0x3d, 0x57, 0x9e, 0x3a, 0xad, 0x60, 0x6e, 0x11,
	0x42, 0x53, 0xa6, 0xce, 0x2e, 0x92, 0x91, 0x2c, 0x17, 0xc9, 0x73, 0xa6, 0xe5, 0xcf, 0x9e, 0x56,
	0x54, 0x30, 0x7b, 0xfa, 0x9c, 0xe2, 0x19, 0x53, 0x0b, 0x66, 0xa0, 0xb9, 0xf9, 0xf9, 0xc5, 0x33,
	0xe6, 0x4c, 0x9b, 0x59, 0x84, 0xf2, 0x0b, 0x8a, 0x34, 0xd8, 0xc2, 0x82, 0x02, 0x79, 0x5a, 0xf1,
	0x6c, 0x32, 0xbc, 0x8e, 0x61, 0xdd, 0x54, 0x7a, 0x68, 0x51, 0xb8, 0x6c, 0x45, 0x91, 0xf6, 0x9f,
	0x45, 0x25, 0x0f, 0x3d, 0x3b, 0xe5, 0x85, 0xe7, 0x0a, 0x96, 0x97, 0x3e, 0xf4, 0xcc, 0xe7, 0xc5,
	0x7a, 0xf1, 0xe0, 0x30, 0xe3, 0xcd, 0x9a, 0xa7, 0xa8, 0x63, 0xf0, 0xaa, 0x89, 0x3c, 0xde, 0x6d,
	0xb9, 0x6e, 0x43, 0xcc, 0x04, 0xee, 0x2d, 0x9a, 0x07, 0x20, 0x34, 0x95, 0x16, 0xb9, 0x0f, 0x4f,
	0x2b, 0xe8, 0xd0, 0x22, 0x5e, 0xd1, 0xb6, 0x46, 0xc3, 0x8e, 0xa1, 0xf6, 0x3e, 0x03, 0x2f, 0x4c,
	0x83, 0xd9, 0x44, 0x7d, 0x29, 0x39, 0x59, 0xbc, 0x4f, 0x0d, 0xf3, 0x85, 0x7e, 0x6a, 0x00, 0x0b,
	0x32, 0xf4, 0x96, 0x97, 0x29, 0x39, 0xd9, 0xfa, 0x37, 0x3e, 0x8c, 0x6e, 0x97, 0xc6, 0x9a, 0xdf,
	0xb0, 0xd6, 0x0c, 0xfd, 0x4e, 0x03, 0x16, 0xa6, 0x40, 0x6f, 0xc9, 0x3c, 0x25, 0x67, 0x98, 0xfe,
	0x8d, 0x88, 0xd1, 0x1d, 0xd2, 0xed, 0xe6, 0x37, 0xbd, 0x6f, 0xad, 0x8a, 0xae, 0x3a, 0x65, 0x98,
	0x34, 0xc6, 0x57, 0x25, 0xf3, 0x14, 0x61, 0x31, 0xcc, 0x22, 0x26, 0x71, 0xce, 0x70, 0xfd, 0x34,
	0x74, 0xdf, 0xa4, 0x60, 0x59, 0x59, 0x48, 0x51, 0xe8, 0x3d, 0x33, 0xc7, 0xf6, 0x4f, 0x7a, 0x54,
	0x87, 0x9e, 0x53, 0x55, 0x5b, 0xb3, 0x82, 0xde, 0xff, 0xe7, 0x8e, 0x12, 0xd9, 0xbb, 0x2e, 0x7a,
	0xf4, 0x2c, 0xb1, 0x88, 0x02, 0x74, 0x08, 0xb3, 0x7e, 0x0f, 0x4c, 0xaa, 0x7e, 0xcf, 0x75, 0x4c,
	0x8e, 0x22, 0xa9, 0x54, 0xc2, 0xab, 0xdf, 0x93, 0x3b, 0x13, 0x5e, 0xc7, 0xcc, 0x49, 0x18, 0x09,
	0xbd, 0x8b, 0x43, 0x2b, 0x74, 0xf2, 0x1c, 0x1e, 0xd0, 0xfe, 0x29, 0x8c, 0x86, 0x99, 0xcb, 0x82,
	0x95, 0x4b, 0x89, 0x3e, 0x1c, 0x1e, 0x20, 0x7f, 0xf8, 0x3d, 0x33, 0x80, 0xff, 0xcf, 0x3d, 0x18,
	0x7d, 0xd5, 0x03, 0x5f, 0x96, 0x9c, 0x64, 0x2e, 0xe7, 0xd0, 0x7a, 0x2b, 0xcc, 0x05, 0xab, 0x78,
	0x66, 0x17, 0x2d, 0xf8, 0x63, 0xc8, 0x2e, 0xa6, 0xc4, 0xcf, 0xcf, 0x81, 0xf0, 0xd3, 0x4b, 0x1d,
	0x58, 0x25, 0x57, 0x8e, 0x44, 0x32, 0xed, 0x02, 0x8b, 0xe5, 0xa5, 0x1f, 0xe8, 0x92, 0x93, 0x53,
	0xf3, 0x93, 0xac, 0xed, 0xf3, 0x4e, 0x06, 0x14, 0xec, 0x08, 0x4c, 0x43, 0x9b, 0xe8, 0x15, 0x4e,
	0x3c, 0xc7, 0x5e, 0xd3, 0xc7, 0x28, 0x7a, 0x95, 0xa8, 0xa6, 0x0f, 0x85, 0x63, 0x43, 0x32, 0xfe,
	0xe3, 0x00, 0xa3, 0x76, 0x00, 0x1f, 0x92, 0x38, 0xc8, 0xe6, 0x91, 0xeb, 0x40, 0x3f, 0x6e, 0x15,
	0x9b, 0x8a, 0xf6, 0x5b, 0xe9, 0xb4, 0x05, 0xa5, 0xd3, 0x0b, 0xca, 0x83, 0x09, 0x2a, 0xbc, 0x74,
	0x65, 0xd1, 0xe7, 0x92, 0xae, 0x04, 0x15, 0xb2, 0x16, 0x58, 0x75, 0x48, 0x18, 0xa3, 0x25, 0x76,
	0x1d, 0x22, 0xbf, 0xc0, 0x89, 0xc7, 0x1d, 0x5b, 0xab, 0xee, 0xe9, 0xea, 0xe9, 0xda, 0x64, 0xf1,
	0xa1, 0x92, 0x60, 0x21, 0xf3, 0x71, 0xb4, 0xad, 0xb1, 0xa4, 0x58, 0xc5, 0xcd, 0xce, 0x4b, 0x9b,
	0xc4, 0x84, 0x89, 0xa9, 0xa7, 0x1a, 0x0e, 0x29, 0x05, 0x30, 0x7a, 0xc2, 0xe6, 0xa5, 0x35, 0xa8,
	0x69, 0x6a, 0x4a, 0x53, 0x2a, 0x29, 0x36, 0x87, 0x63, 0x23, 0x7e, 0x9b, 0x00, 0xd5, 0x89, 0xc4,
	0xd0, 0x7e, 0x03, 0xa3, 0xe5, 0xb6, 0x1a, 0x33, 0xec, 0x45, 0xd4, 0x41, 0xc5, 0x82, 0x3e, 0x0f,
	0xff, 0xff, 0x01, 0x8c, 0xfe, 0x00, 0xe0, 0x17, 0x24, 0x07, 0x01, 0xd9, 0xde, 0x7a, 0xd2, 0xbb,
	0x70, 0x3b, 0x19, 0xcb, 0x9d, 0x40, 0xf8, 0xca, 0xe5, 0x97, 0xbf, 0xfd, 0x62, 0x9e, 0xf7, 0xb3,
	0xe0, 0x28, 0xdb, 0xda, 0xd3, 0x50, 0xae, 0xbe, 0x01, 0x87, 0x19, 0xd8, 0xa3, 0x55, 0x91, 0x46,
	0x1a, 0xc3, 0x18, 0x78, 0x21, 0x37, 0x27, 0x04, 0x27, 0x3d, 0xc8, 0x85, 0x89, 0x6b, 0x21, 0x51,
	0xdd, 0x7e, 0x28, 0x7a, 0x7a, 0x2d, 0xad, 0x88, 0x64, 0x8e, 0xe7, 0x3f, 0xec, 0xc5, 0xe8, 0x3d,
	0x2f, 0x7c, 0x54, 0x72, 0xee, 0x83, 0x3b, 0x11, 0x26, 0x12, 0xbc, 0xe7, 0x3d, 0xc2, 0xf7, 0x3c,
	0xfd, 0x12, 0xbd, 0x7a, 0x6d, 0xa2, 0x7e, 0x90, 0x52, 0xff, 0x69, 0xd8, 0x67, 0x31, 0x22, 0x8c,
	0x63, 0x03, 0x75, 0x9e, 0xda, 0x4d, 0x01, 0x67, 0xf9, 0x01, 0xd6, 0xbd, 0x6a, 0x2d, 0x2b, 0x10,
	0xfb, 0x64, 0x20, 0xdc, 0xae, 0xf5, 0xe2, 0xb7, 0x33, 0x69, 0x85, 0x38, 0x63, 0x8f, 0x1e, 0xad,
	0x50, 0x6a, 0x87, 0xb2, 0xb2, 0x79, 0xd9, 0xaa, 0x6b, 0xe6, 0x62, 0x34, 0x5b, 0xba, 0x81, 0x3d,
	0xc5, 0xea, 0xb7, 0x7e, 0x12, 0x4a, 0x59, 0x0a, 0x6a, 0xd7, 0x20, 0x8b, 0x60, 0x76, 0x30, 0x1c,
	0x7e, 0x3c, 0x76, 0xc6, 0xd1, 0x4b, 0x0c, 0x09, 0x96, 0x53, 0x32, 0x91, 0xe4, 0x85, 0x49, 0x8e,
	0x61, 0x93, 0xd1, 0x46, 0xf7, 0x83, 0x19, 0x15, 0xa4, 0x8f, 0xd2, 0x07, 0x24, 0xee, 0xce, 0xf2,
	0x18, 0x30, 0x4e, 0xda, 0xa3, 0x35, 0xba, 0xb7, 0x0b, 0x08, 0xef, 0x5c, 0x6a, 0xad, 0x40, 0x31,
	0x26, 0xfa, 0xc5, 0x25, 0x2b, 0x82, 0xe1, 0x70, 0xbc, 0xc8, 0xdd, 0xd1, 0x2c, 0x5a, 0x18, 0xcf,
	0xba, 0xe6, 0x34, 0x94, 0xfe, 0x31, 0x53, 0xa8, 0xc2, 0x0c, 0xd9, 0x39, 0xe5, 0xbf, 0xa5, 0xc2,
	0x0d, 0x43, 0x09, 0xf1, 0x2b, 0xdc, 0x30, 0x80, 0x01, 0x66, 0x14, 0x7f, 0x87, 0x17, 0xa3, 0x0f,
	0xbd, 0x70, 0x9e, 0xc4, 0xdf, 0x03, 0x77, 0xc2, 0x4b, 0x24, 0xf9, 0x7f, 0xe8, 0x11, 0xfe, 0xb6,
	0x5f, 0x92, 0xbf, 0xc2, 0x08, 0xc4, 0x5d, 0x13, 0xfe, 0x9c, 0x98, 0x5b, 0xbd, 0xb8, 0x2a, 0x03,
	0x8e, 0x2a, 0x0e, 0x55, 0x86, 0xae, 0x0c, 0x57, 0xd5, 0xfd, 0x16, 0xf3, 0xde, 0xf5, 0x1e, 0x37,
	0xb5, 0xd6, 0x6d, 0x76, 0x7a, 0x7f, 0xae, 0x71, 0xfe, 0x12, 0x60, 0xf4, 0x73, 0x00, 0x9f, 0x94,
	0x9c, 0x48, 0xd2, 0x4e, 0x8e, 0x7b, 0xfb, 0xde, 0x39, 0x90, 0xc8, 0xd1, 0xc1, 0x4c, 0x81, 0xbd,
	0xb1, 0x39, 0x00, 0x69, 0xe3, 0xfd, 0x23, 0x69, 0xce, 0xab, 0xff, 0x2b, 0xbd, 0x50, 0xb0, 0xaf,
	0x2f, 0x5d, 0xdf, 0x6b, 0x79, 0x48, 0xe2, 0xa0, 0x82, 0xb7, 0xd7, 0x89, 0x44, 0x56, 0x9e, 0x70,
	0x5f, 0xf2, 0x02, 0xab, 0x5e, 0xfc, 0x75, 0x26, 0xbc, 0x89, 0xba, 0x27, 0x16, 0x05, 0x6b, 0xca,
	0x2b, 0xaa, 0x16, 0x16, 0x17, 0x5d, 0x06, 0x56, 0x9c, 0x06, 0x33, 0xca, 0x63, 0xbc, 0xa8, 0x7b,
	0x43, 0xc7, 0xaa, 0x4d, 0x6b, 0xa3, 0xeb, 0xd7, 0x91, 0x92, 0xa4, 0x6a, 0xd7, 0x16, 0xd3, 0x4f,
	0x49, 0xa2, 0xc2, 0x3a, 0xbc, 0x30, 0x09, 0x66, 0x2c, 0xaa, 0x56, 0x6a, 0x29, 0x92, 0x75, 0x13,
	0xe5, 0x26, 0xdb, 0x17, 0x5a, 0xbb, 0x06, 0xaf, 0xfd, 0xaf, 0x06, 0x1f, 0xae, 0xae, 0xa9, 0xd5,
	0x19, 0x91, 0x9a, 0x34, 0x63, 0x6c, 0xf0, 0xd1, 0x0f, 0x3b, 0xd4, 0x96, 0xf7, 0x02, 0x3a, 0x9c,
	0x50, 0x08, 0x33, 0x96, 0x2a, 0x21, 0xe3, 0xfd, 0x05, 0x3d, 0xf2, 0x9c, 0x63, 0x87, 0x6f, 0x3d,
	0x12, 0x69, 0x3a, 0xa9, 0x6e, 0xde, 0x58, 0xe7, 0x0b, 0xe8, 0xc0, 0xc2, 0x0c, 0x38, 0x2c, 0x1c,
	0x54, 0x94, 0xe5, 0xd5, 0x35, 0x46, 0x54, 0x8a, 0xd6, 0x70, 0xb7, 0x7e, 0xa8, 0x76, 0xac, 0x8d,
	0xee, 0x5d, 0x59, 0xe7, 0x0b, 0x98, 0xd0, 0xc9, 0x14, 0x4c, 0x2f, 0x86, 0x99, 0xba, 0x9c, 0xa6,
	0x37, 0x20, 0x27, 0x61, 0x74, 0x9f, 0x94, 0x45, 0x6e, 0x60, 0xca, 0x39, 0xe4, 0x7f, 0x35, 0xd3,
	0x50, 0x2f, 0xb5, 0x98, 0xef, 0xf7, 0x45, 0x8e, 0xbe, 0xa7, 0x76, 0x76, 0xc6, 0x4a, 0x25, 0x92,
	0x8f, 0xfd, 0xbf, 0x07, 0x18, 0xfd, 0x16, 0xc0, 0xd7, 0x25, 0xde, 0xe6, 0xcb, 0x33, 0xa8, 0x73,
	0x4a, 0xdf, 0x00, 0xf5, 0xe8, 0x0e, 0x75, 0x95, 0xe5, 0x36, 0xa4, 0xc6, 0x6c, 0x0d, 0xbd, 0x4d,
	0x1f, 0xf5, 0x74, 0x76, 0x45, 0xdb, 0xf7, 0x45, 0x37, 0xaf, 0x55, 0xdf, 0xde, 0x41, 0xa4, 0x99,
	0x41, 0x96, 0xfa, 0xe6, 0x9c, 0x07, 0x3a, 0xce, 0xcf, 0x03, 0x1d, 0x95, 0xe7, 0x81, 0x8e, 0x1c,
	0xb9, 0x01, 0x08, 0x5f, 0xb6, 0x11, 0x68, 0x39, 0x15, 0x40, 0xe5, 0xa5, 0x24, 0x04, 0xac, 0x7d,
	0x65, 0x0d, 0xe8, 0x4e, 0xf4, 0x89, 0x5a, 0x1f, 0xa2, 0xdf, 0x57, 0x58, 0x98, 0x3f, 0x4d, 0xd3,
	0x31, 0x4a, 0x48, 0x97, 0x24, 0x35, 0xd5, 0xd5, 0xba, 0xea, 0x32, 0x30, 0xa8, 0xfd, 0xc6, 0x2f,
	0xf4, 0x64, 0x2a, 0xb7, 0x7a, 0x71, 0xa3, 0x17, 0x8e, 0x76, 0x2e, 0x3b, 0x0d, 0x25, 0x0f, 0x29,
	0xdf, 0x09, 0x9f, 0x90, 0xb8, 0xe8, 0x90, 0xc7, 0xb9, 0x91, 0xc1, 0x00, 0xcb, 0xa0, 0x0f, 0x3c,
	0x50, 0x20, 0x86, 0xdb, 0xe5, 0x14, 0x41, 0x0f, 0x58, 0x44, 0xd0, 0x3d, 0x18, 0x7d, 0x4e, 0x1a,
	0x4f, 0xd5, 0x7b, 0x62, 0x41, 0xe4, 0x5f, 0x88, 0x51, 0x39, 0x44, 0x12, 0x67, 0x1d, 0xa6, 0xf5,
	0xe9, 0xc2, 0x4d, 0x16, 0x9e, 0x91, 0xef, 0x10, 0x6e, 0x8f, 0xc7, 0x1d, 0xf5, 0xe2, 0xce, 0x0c,
	0x78, 0x93, 0x63, 0x90, 0x34, 0x3c, 0x67, 0x34, 0x03, 0x08, 0x15, 0x13, 0x05, 0xd4, 0xd1, 0x24,
	0x98, 0x07, 0x0d, 0xb3, 0xa5, 0xe8, 0x79, 0x8c, 0x9e, 0x91, 0x72, 0x9c, 0xd8, 0xa7, 0x0e, 0xa7,
	0x99, 0xf1, 0x1c, 0x4e, 0x9c, 0x2d, 0x63, 0xdc, 0x4e, 0xcc, 0xf8, 0x43, 0x85, 0x95, 0x7a, 0x00,
	0xbc, 0xd9, 0x46, 0x1d, 0x97, 0xc7, 0xaf, 0xe2, 0xd7, 0x46, 0x80, 0xc5, 0x92, 0xcb, 0x6c, 0xcc,
	0xc7, 0x83, 0x9d, 0x08, 0x71, 0x78, 0x04, 0xe4, 0x91, 0xc2, 0x0d, 0x2c, 0x0e, 0x7c, 0xf5, 0xe2,
	0xee, 0x0c, 0xfa, 0x5c, 0xbc, 0xbd, 0xe3, 0xf4, 0xbc, 0x7a, 0x71, 0x5d, 0x8c, 0x10, 0x8d, 0x23,
	0x37, 0x8f, 0x13, 0x48, 0x19, 0x7a, 0x37, 0x94, 0xbb, 0xa5, 0xc7, 0xb8, 0x80, 0x07, 0xd8, 0x41,
	0xfd, 0x1b, 0x01, 0x46, 0xeb, 0x01, 0x7c, 0x5e, 0x72, 0xdb, 0x96, 0x44, 0x1b, 0x3e, 0xc0, 0x7c,
	0xf0, 0x97, 0x59, 0xf0, 0x26, 0x52, 0x9f, 0xf0, 0xca, 0xd5, 0x29, 0x42, 0x89, 0xc5, 0xb8, 0x9d,
	0x8a, 0x91, 0xcc, 0x35, 0x6e, 0xe5, 0x5b, 0x69, 0x85, 0xec, 0x38, 0x76, 0xef, 0x23, 0x16, 0xbb,
	0x57, 0x7f, 0x26, 0x8a, 0x6f, 0xf7, 0xca, 0x63, 0xb9, 0x9d, 0x59, 0x8c, 0xe2, 0xa7, 0x2c, 0x46,
	0xf1, 0x83, 0x18, 0x3d, 0xe0, 0x6e, 0x14, 0x1b, 0x8f, 0xc1, 0x26, 0x34, 0x9a, 0x9f, 0x71, 0x18,
	0xcd, 0x33, 0x31, 0x9a, 0xe6, 0x62, 0x34, 0xbb, 0xcc, 0x92, 0x63, 0x51, 0x4f, 0xb6, 0x58, 0xd4,
	0xfa, 0xa1, 0xdd, 0xa8, 0xaa, 0x3a, 0x82, 0x2d, 0xa6, 0x6a, 0xda, 0xd7, 0x33, 0xac, 0xf6, 0xb5,
	0x7e, 0x14, 0x31, 0xec, 0x6b, 0xfa, 0x05, 0xf9, 0xcb, 0x61, 0x53, 0x9f, 0x07, 0x18, 0x7d, 0x17,
	0xc0, 0x87, 0x25, 0x1e, 0xe5, 0xc9, 0x13, 0xe8, 0x68, 0x2e, 0x7a, 0x88, 0x67, 0x0b, 0xac, 0x04,
	0xc2, 0x9f, 0x5e, 0x56, 0x53, 0xd9, 0xa7, 0x97, 0x55, 0x1b, 0xed, 0x5c, 0x4e, 0x1a, 0xda, 0xca,
	0x6f, 0x01, 0x8c, 0xd6, 0x02, 0xf8, 0x8c, 0xc4, 0x45, 0x47, 0xa2, 0xed, 0x1d, 0x60, 0xf1, 0xf6,
	0xdb, 0x0c, 0x33, 0xd3, 0x8b, 0x4e, 0xe3, 0x32, 0x08, 0xb7, 0xc7, 0x49, 0xe6, 0x8e, 0x27, 0x56,
	0x01, 0x79, 0x0c, 0xbb, 0xfc, 0xde, 0xc3, 0x8d, 0x6a, 0xd3, 0x3b, 0x8f, 0xcc, 0x79, 0x41, 0x33,
	0x7e, 0x38, 0x3f, 0x5f, 0xe8, 0x6e, 0x2a, 0xaa, 0x28, 0xbf, 0xd0, 0xbd, 0xbe, 0x6e, 0x16, 0xc9,
	0xfb, 0x31, 0x7c, 0x00, 0xde, 0x14, 0x7d, 0x00, 0x0f, 0xc2, 0xac, 0xf2, 0x52, 0x26, 0x3b, 0x8c,
	0x64, 0xa0, 0xb3, 0x63, 0x3e, 0xb6, 0xe2, 0xa9, 0x27, 0x1f, 0xf5, 0x95, 0x07, 0x6b, 0x83, 0xa5,
	0x41, 0x25, 0x64, 0xfa, 0xdb, 0xe8, 0x67, 0xe6, 0xa9, 0x3b, 0xd3, 0xfd, 0xd4, 0x2d, 0x19, 0x52,
	0x81, 0xc4, 0x42, 0x46, 0x63, 0x34, 0xca, 0x90, 0x0a, 0x0e, 0x39, 0xf0, 0x63, 0x80, 0xd1, 0x0f,
	0x34, 0x53, 0xd0, 0xb9, 0x45, 0x3c, 0x3b, 0x90, 0x20, 0xc4, 0xe6, 0xc2, 0x5b, 0x1c, 0x5a, 0x61,
	0x9e, 0xa2, 0xe9, 0x34, 0x79, 0xe2, 0x60, 0x71, 0x68, 0x45, 0x2a, 0x9e, 0x3b, 0xbb, 0xf4, 0x20,
	0x1d, 0x6b, 0xbf, 0xd4, 0x86, 0x94, 0xda, 0xf2, 0xd2, 0xc4, 0xe2, 0xa0, 0xc9, 0x6b, 0xa6, 0x0e,
	0x99, 0xab, 0x4a, 0xdb, 0xc7, 0xcf, 0x1f, 0x93, 0x38, 0xb8, 0x70, 0xdf, 0xe2, 0x01, 0x96, 0x01,
	0x3f, 0xf7, 0x18, 0x99, 0x3a, 0x97, 0x4f, 0x04, 0x3c, 0xcd, 0x8a, 0x80, 0x22, 0x8c, 0x1e, 0x94,
	0xc6, 0x3a, 0x4f, 0x4e, 0xa9, 0x0a, 0x02, 0xff, 0x1a, 0x80, 0xd1, 0x4a, 0x26, 0x91, 0x84, 0xe5,
	0x1f, 0xa7, 0x15, 0xe9, 0xc6, 0x3f, 0xf2, 0x83, 0xc2, 0xe7, 0x2f, 0x82, 0x5d, 0xe8, 0x5b, 0xd6,
	0xb6, 0x19, 0xa4, 0xe1, 0xf9, 0xa2, 0x01, 0xc0, 0x61, 0x86, 0xa9, 0xef, 0xc8, 0xe7, 0xa0, 0xbf,
	0x93, 0x64, 0x27, 0xc1, 0xb9, 0x2d, 0x49, 0x1f, 0xaf, 0x8d, 0x5d, 0xb4, 0x64, 0x75, 0xd0, 0xde,
	0xfd, 0x0d, 0x00, 0xa3, 0xfa, 0x58, 0x52, 0x87, 0x85, 0xdb, 0xdc, 0x08, 0x62, 0x80, 0xb9, 0xed,
	0x57, 0x19, 0x70, 0x94, 0x55, 0xf1, 0x5f, 0x2d, 0xec, 0x76, 0xd5, 0xe8, 0xdd, 0x6f, 0x02, 0x8c,
	0xfe, 0x1c, 0xc0, 0x07, 0x25, 0xe7, 0x46, 0x19, 0xa7, 0x90, 0xa4, 0xe4, 0x06, 0xc7, 0x43, 0x3d,
	0x68, 0x7a, 0x36, 0x8e, 0x9a, 0xb5, 0x2f, 0x22, 0x9d, 0xd5, 0xac, 0x13, 0x17, 0xee, 0x3b, 0x3a,
	0xc0, 0x8c, 0xff, 0xf5, 0x4c, 0xaa, 0x04, 0xd0, 0xd2, 0xf2, 0x8a, 0xda, 0xa1, 0x9e, 0xa4, 0x34,
	0x1d, 0x42, 0xa5, 0x7a, 0x69, 0x4d, 0x59, 0x48, 0xaf, 0xe1, 0xe9, 0xd5, 0x99, 0xe6, 0x16, 0x8c,
	0x46, 0x1b, 0x99, 0x44, 0xe4, 0x6e, 0x0f, 0xa9, 0xe4, 0x19, 0x60, 0x40, 0x85, 0xa9, 0x30, 0xab,
	0x3a, 0xac, 0x7f, 0x44, 0x5c, 0x04, 0xb7, 0x63, 0x94, 0x6b, 0xa4, 0x93, 0x92, 0x8f, 0x48, 0x84,
	0x87, 0x7e, 0x4a, 0x81, 0x85, 0x02, 0x38, 0x8c, 0x74, 0x62, 0x5e, 0xf8, 0x22, 0xb3, 0x23, 0x9f,
	0xa8, 0x1d, 0xa7, 0x7a, 0x3f, 0x26, 0xb3, 0x33, 0xc1, 0x12, 0xbc, 0x53, 0xd2, 0xd3, 0xd5, 0xe5,
	0x8c, 0x87, 0x0f, 0x66, 0x7d, 0x50, 0x1a, 0x6a, 0x0f, 0x49, 0xce, 0x5d, 0xb6, 0x55, 0x5f, 0x6c,
	0xdf, 0xd7, 0xab, 0xfd, 0xff, 0xd8, 0x23, 0x5e, 0xf6, 0x80, 0xbb, 0x89, 0xcd, 0xf3, 0x80, 0xe2,
	0xc7, 0x91, 0xc6, 0xb4, 0x4c, 0xa8, 0xbd, 0xc8, 0xe0, 0xbb, 0x39, 0x08, 0x25, 0x57, 0x32, 0x50,
	0x9c, 0xf7, 0xb8, 0x0a, 0xf2, 0xf3, 0xeb, 0xc5, 0x95, 0x19, 0x34, 0xc4, 0xc2, 0xac, 0x2f, 0x0d,
	0x6d, 0x99, 0x85, 0x30, 0x2b, 0xa8, 0x21, 0xc0, 0xf0, 0x92, 0x5e, 0x6f, 0xd6, 0x12, 0xd0, 0x7e,
	0x35, 0xb2, 0x92, 0x1c, 0xdb, 0x6d, 0x64, 0x25, 0xc5, 0x9c, 0xa2, 0x7a, 0x23, 0x01, 0x24, 0x20,
	0xd4, 0x66, 0xa1, 0xdd, 0xfb, 0xdf, 0x06, 0x18, 0x6d, 0x04, 0x9a, 0xe8, 0x72, 0x62, 0xdd, 0x9d,
	0xac, 0x12, 0x89, 0xae, 0x07, 0x04, 0x7f, 0x4a, 0xc9, 0x48, 0x64, 0x32, 0xa2, 0xff, 0xa5, 0x37,
	0xeb, 0xe7, 0xd7, 0x8b, 0x7f, 0x9f, 0x01, 0x6f, 0x9a, 0x57, 0x13, 0x5a, 0x56, 0x11, 0x5a, 0x1e,
	0x08, 0x55, 0x95, 0x87, 0x6a, 0x2e, 0x8f, 0x11, 0x33, 0x38, 0x17, 0xc4, 0x64, 0x38, 0xac, 0x36,
	0xb4, 0x24, 0x5c, 0xa9, 0xd9, 0x0a, 0x4c, 0x96, 0x0d, 0xbd, 0x1f, 0x19, 0x39, 0xb2, 0x2f, 0xf2,
	0xee, 0xb9, 0xba, 0x86, 0x86, 0x06, 0x10, 0x30, 0xe1, 0x84, 0x07, 0xe1, 0x08, 0xe3, 0xdf, 0x81,
	0xa5, 0x95, 0x21, 0xf6, 0xd1, 0x74, 0x81, 0xfd, 0x8e, 0xe8, 0x95, 0xba, 0x86, 0x86, 0x59, 0x01,
	0xcb, 0x07, 0xfe, 0xf5, 0x1e, 0x8c, 0xd6, 0x78, 0x60, 0x99, 0xc4, 0xc3, 0xab, 0x3c, 0x8e, 0xed,
	0x23, 0xd2, 0x79, 0x3c, 0xb2, 0x67, 0x4b, 0xdf, 0xfe, 0xc6, 0xde, 0xc3, 0x4d, 0xf1, 0xee, 0x25,
	0x99, 0xb3, 0x3b, 0x0f, 0x2c, 0x63, 0xc9, 0xef, 0x02, 0xa1, 0xed, 0x52, 0x27, 0x40, 0x1a, 0x13,
	0xd0, 0xcb, 0x2f, 0xbc, 0xe9, 0x9b, 0xe4, 0xab, 0xaf, 0x67, 0x7f, 0xd6, 0xe6, 0x45, 0xd2, 0xcb,
	0x7c, 0xf5, 0xe2, 0x57, 0x32, 0xe0, 0x68, 0x27, 0x16, 0xd2, 0x50, 0xc6, 0x7c, 0x39, 0x76, 0x55,
	0x37, 0x43, 0xbf, 0xaa, 0x5b, 0x8e, 0x51, 0xd0, 0xb8, 0x30, 0xcc, 0x12, 0x43, 0xf4, 0xf4, 0x96,
	0xc8, 0xee, 0x5d, 0xf2, 0x1c, 0x22, 0x5b, 0x08, 0x69, 0x98, 0x12, 0xc6, 0x0d, 0xfc, 0x42, 0x77,
	0x73, 0x82, 0x5b, 0xb8, 0x1f, 0x01, 0x8c, 0x8e, 0xe8, 0x91, 0x48, 0xde, 0x76, 0xb8, 0x53, 0x65,
	0x22, 0xe1, 0xf3, 0x8c, 0xf0, 0x54, 0x4a, 0xc2, 0x27, 0x99, 0x3b, 0xab, 0xbe, 0x7a, 0xf1, 0x47,
	0x5e, 0x38, 0xa2, 0xa4, 0xaa, 0x36, 0xb4, 0xb0, 0x46, 0xa3, 0xa8, 0x4b, 0x2f, 0x8e, 0x36, 0x00,
	0x38, 0xcc, 0x78, 0xee, 0x98, 0x0a, 0xa5, 0x6a, 0x8c, 0x2a, 0xa5, 0x71, 0x7d, 0x0d, 0xa7, 0x7b,
	0xcf, 0xbe, 0xdd, 0xb7, 0x73, 0x6d, 0xa4, 0x69, 0x33, 0xc5, 0xd9, 0xb6, 0x75, 0x3d, 0xa7, 0x4f,
	0xd0, 0xbb, 0xd6, 0x73, 0x5c, 0xdb, 0x3b, 0x4e, 0x91, 0x17, 0x1e, 0xd4, 0xf6, 0xe6, 0x48, 0xd3,
	0xe6, 0x68, 0x5b, 0x23, 0x81, 0xec, 0x3d, 0xb7, 0xb3, 0x77, 0x5f, 0x73, 0x4f, 0xd7, 0x5a, 0x72,
	0xc8, 0x25, 0x54, 0x53, 0xd7, 0xd0, 0xf0, 0x55, 0x4f, 0xc0, 0x9c, 0x80, 0xc5, 0x38, 0xf2, 0x26,
	0x99, 0x2c, 0xb8, 0x15, 0x60, 0xf4, 0x36, 0x80, 0xc5, 0x92, 0x05, 0x8f, 0x72, 0x0e, 0x3b, 0xc1,
	0xc8, 0xa6, 0x83, 0x6a, 0xcb, 0x7b, 0x56, 0xc1, 0x63, 0x8e, 0xca, 0xe6, 0x07, 0x96, 0x08, 0x0f,
	0xd9, 0x76, 0xd9, 0x80, 0xd2, 0x7e, 0x58, 0x11, 0x5c, 0x52, 0x49, 0x28, 0x87, 0xbd, 0x39, 0xce,
	0x7b, 0x8c, 0xc1, 0x57, 0x2f, 0x1e, 0xb9, 0x0e, 0x5e, 0xcf, 0xcc, 0x28, 0x0d, 0x45, 0xc1, 0x4b,
	0x44, 0xd5, 0x65, 0xc4, 0x2a, 0x13, 0x5c, 0x17, 0xd9, 0x76, 0xcc, 0xd0, 0x73, 0xf2, 0x74, 0xb5,
	0xe5, 0xed, 0x68, 0xeb, 0x9e, 0xd2, 0xa5, 0x4a, 0x45, 0x55, 0x48, 0x51, 0xe8, 0xeb, 0xfe, 0xc4,
	0x0c, 0xee, 0x6c, 0xa5, 0x8e, 0x93, 0xed, 0x27, 0xcc, 0xbb, 0x86, 0xc6, 0x87, 0x44, 0x3d, 0xbe,
	0x68, 0xa8, 0x47, 0xa2, 0xb6, 0x8a, 0x31, 0x42, 0x7a, 0xf7, 0xe6, 0x65, 0x04, 0x99, 0x74, 0x1f,
	0x0c, 0x87, 0x13, 0xf6, 0x6c, 0x7c, 0xc3, 0x2d, 0xf4, 0x9c, 0x15, 0x2b, 0xc5, 0xac, 0xf5, 0x6f,
	0x56, 0x79, 0x9e, 0xdc, 0xf7, 0xee, 0xee, 0xc8, 0xfa, 0x53, 0x7d, 0xeb, 0x5a, 0x48, 0xff, 0xa4,
	0xc1, 0x66, 0x29, 0x31, 0x1f, 0xf0, 0x0b, 0x3d, 0x67, 0x5b, 0x7b, 0x37, 0xab, 0x3c, 0xdb, 0x7b,
	0x27, 0x0d, 0xce, 0xde, 0x8d, 0x0f, 0xcc, 0x7a, 0x32, 0xaf, 0x39, 0x2a, 0xbf, 0xe8, 0x57, 0x29,
	0x46, 0x69, 0x33, 0xb1, 0x94, 0x7d, 0x91, 0xa7, 0x11, 0x04, 0x95, 0x55, 0x57, 0x2d, 0xa8, 0x58,
	0xe8, 0x53, 0x42, 0xb5, 0x2c, 0x9e, 0x58, 0xf4, 0x58, 0xbf, 0x63, 0x8a, 0xb3, 0xd5, 0x32, 0xf5,
	0x2e, 0x86, 0xeb, 0x63, 0x91, 0x6c, 0x13, 0xf3, 0x1b, 0x7b, 0xc9, 0x8b, 0x99, 0xc6, 0x90, 0xda,
	0x0f, 0xf1, 0x87, 0xb3, 0x7d, 0xca, 0x14, 0xbc, 0xa8, 0xb4, 0xa4, 0x23, 0xc3, 0xd8, 0x53, 0x34,
	0x9c, 0x8b, 0xab, 0x53, 0xc8, 0x80, 0x06, 0xbc, 0xdb, 0x90, 0xee, 0xd7, 0x58, 0x85, 0x0a, 0xb6,
	0x74, 0x08, 0xb9, 0xe3, 0xfd, 0x08, 0x46, 0x0f, 0xb3, 0x83, 0x19, 0xd5, 0x43, 0x0a, 0xc9, 0x60,
	0x14, 0x3c, 0xc1, 0x58, 0x9c, 0xf2, 0x21, 0x7f, 0x0a, 0xb3, 0x2a, 0xab, 0xcb, 0x16, 0x87, 0x6a,
	0x72, 0x46, 0xe8, 0xe3, 0x2c, 0xc4, 0xa8, 0x5c, 0x1a, 0xd3, 0xd7, 0xba, 0x52, 0x63, 0x69, 0xeb,
	0xf1, 0x50, 0x7e, 0x84, 0xfc, 0xec, 0xac, 0xe7, 0xa3, 0x1e, 0xf8, 0xb8, 0xf7, 0xd3, 0x83, 0x91,
	0xed, 0x27, 0x48, 0x25, 0x58, 0xf5, 0xe4, 0xf1, 0xde, 0xfd, 0x1f, 0x12, 0x60, 0xb3, 0xf4, 0xab,
	0xad, 0xb3, 0x00, 0x1d, 0x56, 0xa8, 0x87, 0xc3, 0xb4, 0x7f, 0x3d, 0x5d, 0xb1, 0x24, 0x94, 0x73,
	0xbd, 0x3e, 0x85, 0x20, 0x46, 0xaf, 0x48, 0x02, 0x3b, 0x05, 0x22, 0x5b, 0xe4, 0x87, 0x2f, 0x7e,
	0x7c, 0xd2, 0x53, 0xc0, 0x1c, 0xd2, 0xbf, 0x1c, 0xa3, 0x5a, 0x58, 0x24, 0x59, 0xa5, 0x26, 0x4f,
	0x90, 0x27, 0xd2, 0xd5, 0xa9, 0x3e, 0xcd, 0xf2, 0xed, 0x4c, 0x98, 0x4b, 0x42, 0x19, 0xb3, 0x75,
	0x66, 0x78, 0x9a, 0x5a, 0x78, 0x4f, 0x85, 0x86, 0xb4, 0xb7, 0xe3, 0x01, 0x7a, 0x03, 0xd6, 0xcb,
	0xa4, 0x57, 0x68, 0x04, 0x76, 0xba, 0x4b, 0xd3, 0xba, 0x86, 0x9d, 0x13, 0x5d, 0xdf, 0x44, 0x77,
	0xc6, 0x5a, 0x2a, 0xa2, 0x88, 0xba, 0x1f, 0x89, 0x78, 0xd6, 0x13, 0x69, 0xef, 0x8e, 0xf3, 0x35,
	0x91, 0xed, 0xb6, 0x47, 0x57, 0x1f, 0x84, 0x99, 0x0b, 0xc2, 0xc1, 0xda, 0x45, 0x54, 0x08, 0xdf,
	0x8b, 0xd1, 0x5d, 0x71, 0xa7, 0xd0, 0x7b, 0xb2, 0x43, 0x3d, 0xdb, 0x58, 0xd7, 0x00, 0x02, 0xe4,
	0x3b, 0xb6, 0x7e, 0x42, 0x56, 0x52, 0xf5, 0x13, 0xfc, 0x7b, 0x3c, 0x18, 0xed, 0xf4, 0xc0, 0x97,
	0xa5, 0x38, 0x3b, 0x66, 0x5c, 0x2f, 0xb7, 0x0c, 0xcd, 0x39, 0x75, 0xd0, 0x2a, 0x08, 0x64, 0x2e,
	0xac, 0x19, 0xd0, 0x05, 0x84, 0x93, 0x17, 0x79, 0xda, 0x30, 0x5c, 0x9e, 0x0b, 0x83, 0x4b, 0x42,
	0xa4, 0x3a, 0x05, 0xcb, 0x25, 0x6c, 0xa8, 0x91, 0xfd, 0x9d, 0xc5, 0xb2, 0x06, 0xa3, 0xcf, 0x4c,
	0x03, 0x9a, 0xac, 0xd9, 0x20, 0x93, 0x83, 0xe1, 0xf0, 0xe4, 0x58, 0x87, 0xf6, 0x6b, 0x2d, 0xc1,
	0x1a, 0x45, 0xa3, 0x66, 0x9c, 0x01, 0xc7, 0xba, 0xe2, 0x26, 0x0d, 0xcd, 0x90, 0xfb, 0x61, 0x26,
	0x51, 0x87, 0x84, 0xd2, 0x3f, 0x87, 0x91, 0x28, 0xf9, 0x74, 0xdf, 0xe9, 0x4e, 0x37, 0x3a, 0xad,
	0x28, 0x0f, 0x90, 0x6f, 0xfc, 0x7f, 0x01, 0x30, 0xfa, 0x1a, 0x80, 0xaf, 0x48, 0xf1, 0x50, 0x6a,
	0x04, 0x3d, 0x2d, 0xfc, 0x92, 0x8c, 0xa4, 0x3a, 0x0f, 0xc8, 0x30, 0xf2, 0xab, 0xc2, 0xfc, 0x24,
	0x25, 0x56, 0xf5, 0x62, 0xdd, 0x0f, 0x66, 0xd4, 0x08, 0x4b, 0x36, 0x98, 0xf7, 0xbf, 0x19, 0x30,
	0x97, 0xdc, 0xb0, 0xb8, 0xa2, 0x44, 0x9c, 0xdf, 0xd8, 0x3b, 0xb2, 0xcb, 0x13, 0x30, 0x1a, 0x2f,
	0xdd, 0x4e, 0xcf, 0x17, 0xfa, 0xdd, 0x90, 0x68, 0x5b, 0x23, 0x8b, 0x75, 0xe2, 0x13, 0x21, 0xd6,
	0x49, 0x7f, 0x6e, 0x1e, 0xfd, 0xd0, 0x83, 0xd1, 0x79, 0x0f, 0xfc, 0x06, 0x90, 0xe2, 0x60, 0x4b,
	0x5e, 0x0f, 0xc8, 0xe0, 0x4e, 0xf9, 0x32, 0xd1, 0xd7, 0xd3, 0xdd, 0x16, 0xed, 0x3a, 0xdc, 0xbb,
	0xb2, 0x95, 0x80, 0x38, 0x69, 0xab, 0xa7, 0xf3, 0x68, 0x64, 0x7d, 0x43, 0x64, 0xd7, 0x7a, 0xb6,
	0xe9, 0x42, 0x77, 0xb3, 0x7a, 0x68, 0x55, 0x64, 0xf7, 0x2e, 0xf6, 0x47, 0xf5, 0xe8, 0x0e, 0x75,
	0xd7, 0x91, 0xe8, 0xe9, 0xb7, 0x35, 0xdd, 0xb9, 0xe6, 0x93, 0xe8, 0x27, 0xa7, 0x35, 0xb0, 0xa6,
	0x77, 0x22, 0xdb, 0xf7, 0x46, 0x3e, 0xd9, 0x4a, 0xfa, 0xb7, 0xb9, 0x51, 0x68, 0x9d, 0xd8, 0x98,
	0x24, 0x5b, 0x03, 0x84, 0x55, 0x89, 0x24, 0x59, 0x5d, 0x5d, 0x5d, 0x5d, 0x5e, 0x50, 0x29, 0x5f,
	0x90, 0xa7, 0x94, 0x07, 0x17, 0x38, 0x7d, 0xae, 0x29, 0xd1, 0x9a, 0xfd, 0xae, 0x13, 0x15, 0x4a,
	0xfb, 0xbd, 0x70, 0xac, 0x2b, 0x46, 0xd3, 0xf9, 0x1d, 0xe9, 0x78, 0x58, 0x91, 0x27, 0xb8, 0x11,
	0xd1, 0x40, 0xdb, 0x41, 0xd5, 0x8b, 0xb5, 0x4d, 0xfa, 0x63, 0x26, 0xcc, 0x25, 0xb1, 0xa6, 0x2b,
	0x4a, 0x48, 0x14, 0x58, 0x85, 0x04, 0xb9, 0x9a, 0xe8, 0xc4, 0x19, 0x2b, 0x1b, 0x0a, 0x2d, 0x05,
	0xb5, 0xc8, 0xc5, 0xa6, 0x84, 0x16, 0x53, 0xa1, 0x25, 0x60, 0xeb, 0xf6, 0x11, 0xf5, 0x6c, 0x5c,
	0xcc, 0xbb, 0xf4, 0xbf, 0xf5, 0x60, 0xf4, 0xef, 0x1e, 0xb8, 0x1f, 0x48, 0x71, 0xb6, 0x43, 0x7e,
	0x8e, 0x84, 0x00, 0x39, 0x56, 0x96, 0x8e, 0xc4, 0x18, 0xba, 0x77, 0x7e, 0x1a, 0x69, 0x3d, 0xe5,
	0x04, 0x8b, 0xb6, 0x35, 0x92, 0xb1, 0x55, 0xdc, 0xcc, 0xda, 0x1d, 0x7c, 0x91, 0x42, 0x6d, 0x25,
	0x7d, 0x51, 0xac, 0x80, 0xf9, 0x2b, 0x20, 0x7c, 0xe3, 0x52, 0x0b, 0x18, 0xc3, 0xb6, 0x8a, 0x6f,
	0x57, 0xf5, 0x9e, 0x7b, 0x27, 0xb2, 0xa3, 0x83, 0xc0, 0x98, 0x5a, 0x3e, 0x06, 0xe6, 0x26, 0xa5,
	0x5c, 0x31, 0x9e, 0xd6, 0x52, 0x2a, 0x0e, 0x56, 0x8c, 0xe4, 0xcf, 0x4b, 0x25, 0xa5, 0x3e, 0xf6,
	0xc2, 0x5b, 0xf5, 0xb0, 0xd2, 0x55, 0x2e, 0xa4, 0x8c, 0x8c, 0x8e, 0x27, 0x24, 0xf7, 0xe5, 0x1a,
	0xc1, 0x34, 0x37, 0x21, 0xc0, 0xe3, 0x65, 0xf9, 0x75, 0xa1, 0x9a, 0xcf, 0xb0, 0xa5, 0x05, 0x72,
	0xe1, 0x94, 0x42, 0xb9, 0x60, 0x8a, 0x5c, 0x50, 0x38, 0x25, 0xaf, 0xb0, 0x40, 0x9e, 0xa2, 0xfd,
	0x20, 0x17, 0x16, 0xe4, 0x69, 0xff, 0xa5, 0xff, 0xc7, 0xc2, 0xaf, 0xca, 0x14, 0xb9, 0x90, 0x80,
	0x14, 0xe4, 0x15, 0xca, 0x53, 0xe4, 0x02, 0xfd, 0x0f, 0xed, 0x3f, 0x79, 0x5a, 0x2f, 0xb4, 0x03,
	0x6d, 0xcf, 0x7e, 0x90, 0x45, 0x6b, 0x4c, 0x5f, 0xe3, 0x2b, 0xed, 0x48, 0xf2, 0x22, 0xbc, 0xae,
	0x36, 0x86, 0x02, 0x9a, 0x56, 0x76, 0xab, 0x31, 0x92, 0x03, 0x47, 0x34, 0x1d, 0x81, 0x63, 0x4b,
	0x92, 0xb0, 0x2b, 0xdb, 0x99, 0xff, 0x9f, 0xbd, 0x18, 0x45, 0xbc, 0x70, 0x51, 0x3c, 0xaa, 0x99,
	0xe0, 0x46, 0x35, 0x49, 0x9e, 0x5a, 0xd8, 0x01, 0xe5, 0xff, 0xf6, 0x08, 0xbf, 0xf5, 0xa4, 0x74,
	0x7a, 0x61, 0xbe, 0x16, 0xfd, 0xbe, 0x37, 0xaf, 0x10, 0x85, 0x91, 0xf2, 0x59, 0x9c, 0x57, 0x47,
	0x82, 0xfe, 0x4e, 0xea, 0x48, 0x20, 0x3d, 0x3c, 0x14, 0xb7, 0x8e, 0x84, 0x3b, 0x88, 0xaf, 0x5e,
	0xe3, 0x2b, 0x2f, 0x7d, 0x32, 0xc1, 0xb1, 0xcd, 0x43, 0x3d, 0x55, 0xc7, 0xcc, 0x69, 0xf1, 0x26,
	0x9b, 0xd3, 0x92, 0x91, 0x6c, 0x4e, 0xcb, 0x57, 0x01, 0x46, 0xdd, 0x00, 0x06, 0xa5, 0xf8, 0xa8,
	0x71, 0xe7, 0x82, 0xa4, 0xcb, 0xf2, 0x3c, 0x27, 0x3c, 0x73, 0x71, 0xa6, 0x8f, 0x91, 0xb1, 0x22,
	0x33, 0x19, 0x2b, 0xb2, 0xaf, 0x5e, 0x3c, 0x3c, 0x9c, 0x3e, 0x29, 0xe8, 0x32, 0xf9, 0x34, 0x94,
	0x99, 0x2f, 0xc7, 0xd2, 0x15, 0x9e, 0x0a, 0x99, 0x29, 0x2c, 0xfd, 0x10, 0x9a, 0xf4, 0x02, 0x9f,
	0xa5, 0x37, 0xff, 0x89, 0x2c, 0x8c, 0x8e, 0x67, 0xc1, 0x5a, 0x29, 0x01, 0xda, 0x65, 0x29, 0x3e,
	0xd1, 0x24, 0x29, 0x40, 0x2d, 0x83, 0xcb, 0xa7, 0x32, 0x85, 0x13, 0x99, 0x29, 0x45, 0x97, 0xd9,
	0xcf, 0x45, 0xbf, 0xef, 0xa5, 0x6b, 0x42, 0xb4, 0xbf, 0x42, 0x74, 0xe2, 0x35, 0xd4, 0xf5, 0x5b,
	0xff, 0xcc, 0xf7, 0xd5, 0x8b, 0xdb, 0x87, 0xc1, 0x5b, 0x78, 0xae, 0xd1, 0xa1, 0x9d, 0x26, 0x6a,
	0xb1, 0xc5, 0xc7, 0x63, 0x34, 0x4e, 0xca, 0xa5, 0xaf, 0x7c, 0xc4, 0x75, 0x1b, 0xe4, 0x59, 0xdc,
	0x06, 0xb7, 0x62, 0x74, 0x33, 0x93, 0x2a, 0x15, 0x5d, 0x6f, 0x77, 0x18, 0xe4, 0x59, 0x1c, 0x06,
	0xf1, 0xc0, 0x75, 0x57, 0x41, 0x1e, 0xbd, 0x58, 0x9a, 0x95, 0x10, 0x5c, 0xbf, 0x32, 0x3a, 0x19,
	0x66, 0x2e, 0xac, 0xa9, 0x5e, 0x1a, 0xa6, 0x31, 0xe4, 0x38, 0xf0, 0x04, 0x4e, 0x98, 0x0e, 0x61,
	0x38, 0x54, 0xb3, 0xa4, 0x42, 0x51, 0x2a, 0xaa, 0xab, 0x68, 0x8a, 0x28, 0xc9, 0x8e, 0x75, 0x7e,
	0x15, 0x60, 0x40, 0x85, 0x00, 0x1c, 0xb1, 0xa0, 0xa2, 0x32, 0x34, 0xa7, 0xaa, 0xac, 0x5a, 0xbf,
	0x06, 0x31, 0x9c, 0x09, 0x19, 0xb1, 0x9f, 0x46, 0x5b, 0xf7, 0x90, 0x94, 0x0f, 0x92, 0x0a, 0x12,
	0xed, 0xde, 0x16, 0xdd, 0xbb, 0x32, 0xb2, 0xb7, 0x5b, 0xed, 0x6e, 0xa9, 0x1b, 0x19, 0xb0, 0xf4,
	0x21, 0x54, 0x40, 0x18, 0xaa, 0x5a, 0x58, 0x51, 0x45, 0x52, 0x75, 0xa1, 0x3e, 0x19, 0x3d, 0x47,
	0xe0, 0x7e, 0x3a, 0x8d, 0xee, 0xad, 0x91, 0x2d, 0x9b, 0x48, 0xbe, 0xad, 0xfe, 0xd8, 0xbe, 0x6f,
	0x61, 0x75, 0x65, 0xb0, 0x6a, 0xa1, 0xe1, 0x2f, 0xdd, 0x59, 0xe0, 0xf7, 0x85, 0x57, 0xd4, 0x2e,
	0xaa, 0xae, 0xf2, 0x2d, 0x09, 0x2e, 0xae, 0x26, 0x3f, 0xc7, 0x92, 0xe2, 0x99, 0xce, 0x13, 0x17,
	0xe9, 0x3e, 0xbc, 0x45, 0xdd, 0xbc, 0x91, 0x0d, 0x32, 0xfd, 0x99, 0x07, 0xa3, 0xb3, 0x1e, 0x18,
	0x92, 0xdc, 0x48, 0xdb, 0x88, 0x30, 0xb1, 0xab, 0x77, 0x3f, 0x71, 0x99, 0xde, 0x13, 0x66, 0x56,
	0x4c, 0xc9, 0xed, 0xef, 0x03, 0xe1, 0xb3, 0x81, 0x72, 0xa1, 0x28, 0x49, 0x7e, 0x60, 0x95, 0x48,
	0x93, 0x56, 0x04, 0x97, 0x54, 0xba, 0x88, 0x90, 0xd8, 0x94, 0xa9, 0x2e, 0x32, 0xc4, 0x55, 0x4c,
	0xf8, 0xa8, 0x9b, 0x3b, 0xd4, 0xb7, 0x8e, 0xb0, 0x59, 0x40, 0xda, 0x99, 0x6f, 0x53, 0x06, 0xcc,
	0xe1, 0xa3, 0x2f, 0x0d, 0xad, 0x97, 0x42, 0x08, 0x0d, 0x9d, 0x6d, 0x46, 0xa2, 0xf4, 0x3a, 0xfe,
	0x37, 0xb0, 0x24, 0x54, 0x52, 0x1c, 0x60, 0xc0, 0xfc, 0xdf, 0x01, 0x18, 0x7d, 0x13, 0xc0, 0x2f,
	0x49, 0xae, 0x78, 0x34, 0x22, 0x4f, 0x6c, 0x27, 0x49, 0x9a, 0x20, 0xcc, 0x40, 0x72, 0xb9, 0x50,
	0xda, 0x2f, 0xf3, 0x83, 0xd0, 0x5c, 0x6d, 0x32, 0x34, 0xe7, 0xab, 0x17, 0x57, 0x67, 0xc0, 0x5b,
	0x78, 0xde, 0xee, 0xa1, 0xac, 0x2a, 0xa6, 0x5a, 0xf6, 0x8d, 0x4d, 0xc5, 0xb5, 0xee, 0x5b, 0xdd,
	0x2c, 0x76, 0xe7, 0x84, 0x89, 0x8e, 0xd8, 0xd3, 0x48, 0x8c, 0xae, 0x97, 0x86, 0x9b, 0x5e, 0x5f,
	0x8b, 0xbf, 0xf7, 0x9f, 0x01, 0x46, 0x11, 0x00, 0x9f, 0x93, 0xdc, 0xd0, 0x63, 0x54, 0x42, 0x4b,
	0x24, 0x6e, 0x98, 0x29, 0xb0, 0x3e, 0xda, 0xb7, 0x80, 0xb0, 0xee, 0x22, 0x05, 0x4c, 0x3f, 0x76,
	0xdc, 0xc5, 0xc7, 0xba, 0xcd, 0x0b, 0x73, 0xf8, 0xcb, 0x4c, 0x43, 0x07, 0xeb, 0x7a, 0x80, 0xd1,
	0x1a, 0x00, 0x9f, 0x92, 0x5c, 0x51, 0xa2, 0x71, 0xb8, 0x7d, 0xeb, 0x07, 0x27, 0x0b, 0xe6, 0xc3,
	0x6c, 0x78, 0x0b, 0xcf, 0xcd, 0x7b, 0x15, 0xb2, 0xe7, 0x35, 0x3b, 0x6e, 0xc0, 0xec, 0x38, 0x36,
	0xbe, 0x05, 0xb9, 0xf1, 0x2d, 0xc3, 0xba, 0x8a, 0xc9, 0xbb, 0xaf, 0x79, 0x30, 0x3a, 0xe3, 0x81,
	0xaf, 0x48, 0x6e, 0xf4, 0x26, 0xe7, 0x38, 0x43, 0x0a, 0x09, 0xe5, 0x1d, 0xb5, 0xb1, 0x62, 0x62,
	0xef, 0x27, 0x40, 0xf8, 0xd1, 0x65, 0x11, 0x7b, 0x2e, 0xc6, 0x95, 0x43, 0x1a, 0x5e, 0x8c, 0x75,
	0xb5, 0xdb, 0x0b, 0x73, 0xf8, 0xd8, 0x4b, 0x43, 0x31, 0x4a, 0xef, 0x1b, 0xbd, 0x24, 0xb9, 0xa2,
	0xe4, 0x22, 0x0c, 0xa5, 0xcc, 0xda, 0x70, 0x65, 0x45, 0x79, 0xca, 0xe2, 0xf4, 0xb8, 0x97, 0xd6,
	0x22, 0xbb, 0xda, 0xa5, 0xa9, 0x11, 0xa7, 0x7a, 0x44, 0x72, 0x59, 0xaf, 0x9c, 0xe3, 0xf4, 0x99,
	0x25, 0xe0, 0x66, 0x79, 0xa9, 0xa0, 0xb8, 0xc4, 0xa8, 0x06, 0x8f, 0x73, 0x7d, 0xf5, 0xe2, 0x91,
	0x2c, 0x5a, 0x59, 0xed, 0x1a, 0x53, 0x09, 0x2f, 0xc2, 0x1b, 0xca, 0x2c, 0x58, 0xa0, 0x71, 0xaa,
	0x9b, 0xf9, 0x2e, 0x57, 0x5a, 0x4e, 0xd6, 0xa2, 0x82, 0xd6, 0xac, 0x26, 0x77, 0xe8, 0x03, 0xb6,
	0x9e, 0xfc, 0x5f, 0xf5, 0x62, 0xd4, 0xed, 0x85, 0x65, 0x92, 0x1b, 0xb6, 0x79, 0x81, 0xcd, 0x24,
	0xf9, 0xd5, 0x36, 0x96, 0xfc, 0x7d, 0x8f, 0xf0, 0x99, 0x27, 0xd5, 0xbb, 0x3b, 0x4c, 0x07, 0x96,
	0x10, 0x55, 0xe9, 0xe5, 0x50, 0x1c, 0x43, 0xcf, 0xf3, 0xe7, 0xab, 0x17, 0x3b, 0x33, 0xb8, 0x21,
	0xdd, 0xa1, 0x1e, 0x77, 0xea, 0x47, 0xb2, 0x90, 0x19, 0xaa, 0xca, 0x48, 0x36, 0x54, 0x95, 0x99,
	0x6c, 0xa8, 0xea, 0x3f, 0x00, 0x46, 0x17, 0xb4, 0x13, 0x7e, 0x1c, 0x54, 0xf2, 0x58, 0x21, 0x4e,
	0x84, 0x8a, 0x7a, 0x9c, 0x6c, 0x91, 0xaa, 0x38, 0x47, 0xc0, 0xd2, 0xc1, 0xf2, 0x31, 0xf1, 0x82,
	0x5b, 0x05, 0xf9, 0xbe, 0x7a, 0xb1, 0xdd, 0x78, 0x9e, 0x96, 0xb7, 0xde, 0x34, 0x94, 0xb4, 0x2f,
	0xc0, 0x1b, 0xad, 0x22, 0xc7, 0x88, 0x6e, 0xb9, 0x89, 0x5a, 0x8e, 0xb5, 0x4f, 0x82, 0x5a, 0xf6,
	0x7e, 0xfc, 0x5f, 0xcf, 0xc2, 0xe8, 0x5c, 0x16, 0xac, 0x92, 0xe2, 0x21, 0x9c, 0x17, 0x09, 0x4d,
	0x29, 0x9c, 0x65, 0x1f, 0x56, 0xfe, 0x4e, 0xa6, 0xf0, 0xad, 0xcc, 0x8b, 0x90, 0xb9, 0xf6, 0xa0,
	0xd6, 0xa0, 0xd1, 0xe8, 0xd5, 0x2d, 0xa7, 0x27, 0x0e, 0x7d, 0x14, 0x92, 0x7d, 0x1f, 0xc2, 0xaa,
	0x6e, 0xbe, 0xaf, 0x5e, 0xfc, 0x2c, 0xcb, 0x70, 0x65, 0x1b, 0x04, 0xfa, 0x6c, 0xa8, 0x46, 0x3b,
	0x52, 0x5f, 0x85, 0xbe, 0x91, 0xfb, 0xe1, 0x75, 0xcb, 0xc8, 0xe2, 0x1e, 0xe7, 0xbb, 0x48, 0xe8,
	0x0b, 0xca, 0x86, 0x53, 0x82, 0x85, 0x4e, 0xae, 0xa6, 0x91, 0xed, 0xca, 0x8f, 0xd3, 0x33, 0x6a,
	0x00, 0x08, 0xa5, 0xb1, 0xcb, 0xe4, 0xc4, 0x39, 0xf2, 0x30, 0x46, 0x73, 0xac, 0x31, 0x7d, 0x3a,
	0x1b, 0x72, 0x2b, 0x79, 0x82, 0xb3, 0x85, 0xdc, 0x15, 0x27, 0x2e, 0x0c, 0x02, 0x45, 0xea, 0x20,
	0x98, 0x17, 0xc6, 0xff, 0xd3, 0x83, 0xd1, 0xaf, 0x3d, 0x70, 0xa9, 0xe4, 0xba, 0xc3, 0xbc, 0xb3,
	0x23, 0xe9, 0x3c, 0xa1, 0x4f, 0x82, 0x45, 0x4e, 0x2c, 0xe2, 0x13, 0x7b, 0x78, 0x55, 0xfe, 0x1d,
	0x10, 0x7e, 0x13, 0xd3, 0xcb, 0x05, 0x13, 0x2f, 0x91, 0xa1, 0xc9, 0x4c, 0x4b, 0xfb, 0x6c, 0x99,
	0x59, 0x3c, 0x95, 0xc3, 0x5e, 0xcc, 0x4d, 0xf6, 0x50, 0x61, 0x6d, 0xf8, 0xc5, 0x0a, 0xb4, 0xf4,
	0x05, 0x79, 0xe6, 0xd2, 0x17, 0x1f, 0xaa, 0xcc, 0x0f, 0x3e, 0x37, 0x73, 0xe9, 0x63, 0xcf, 0x17,
	0xcc, 0x2c, 0x7e, 0x32, 0x3c, 0x3d, 0x24, 0x3f, 0xab, 0x94, 0xc9, 0xcf, 0x2c, 0x0c, 0x3e, 0xf7,
	0xc2, 0xc2, 0x47, 0x97, 0x3c, 0xbe, 0xac, 0xb4, 0x2a, 0x10, 0x2e, 0x7f, 0xa8, 0x72, 0x59, 0xe9,
	0x6b, 0x5f, 0x9c, 0xb9, 0xe0, 0xc9, 0xfc, 0x47, 0x42, 0x85, 0xb5, 0x95, 0xa5, 0x4b, 0x02, 0x33,
	0x17, 0x3c, 0xf9, 0x79, 0xfd, 0xe6, 0xfb, 0xb6, 0x0c, 0x78, 0xab, 0x0b, 0xc6, 0xd3, 0xd0, 0x04,
	0x98, 0x0e, 0x87, 0xd3, 0x3d, 0x31, 0xc3, 0x43, 0x3a, 0xcf, 0x8d, 0x76, 0x12, 0x5d, 0x49, 0x71,
	0x20, 0x06, 0xeb, 0xff, 0x1e, 0xc0, 0xe8, 0xdb, 0x00, 0x2e, 0x90, 0xdc, 0x91, 0x29, 0x4f, 0x70,
	0xa3, 0xdf, 0x24, 0xd5, 0x7b, 0x6c, 0x38, 0x39, 0x28, 0xbc, 0x6a, 0xa1, 0xd6, 0xf8, 0x4a, 0xdd,
	0xfc, 0x4e, 0x27, 0xb2, 0x24, 0xcf, 0xe0, 0x0d, 0x19, 0x46, 0x80, 0xe0, 0x0a, 0x12, 0xb6, 0x33,
	0xd9, 0xfd, 0x73, 0x3b, 0x5a, 0x18, 0xfb, 0x57, 0x37, 0x8b, 0xd9, 0xc1, 0x14, 0x63, 0x45, 0xff,
	0x04, 0x30, 0xfa, 0x19, 0x80, 0x01, 0xc9, 0x15, 0x47, 0xbc, 0x88, 0x81, 0xbb, 0xb8, 0x62, 0xf6,
	0x76, 0x1d, 0x10, 0x1a, 0x2f, 0x4a, 0x16, 0x59, 0xb6, 0xfb, 0x62, 0x62, 0x44, 0xbb, 0xbc, 0xf0,
	0x56, 0x97, 0xe5, 0xa5, 0xa1, 0x77, 0x73, 0x13, 0xc0, 0xe8, 0x2d, 0x00, 0x5f, 0x94, 0xdc, 0x71,
	0xc2, 0xbb, 0x29, 0x94, 0x02, 0x8b, 0xcb, 0x13, 0x05, 0x29, 0x59, 0xb6, 0xf6, 0xe9, 0xe5, 0xe5,
	0xa9, 0xa3, 0xf5, 0x0a, 0xe2, 0xd0, 0x42, 0x27, 0x87, 0xb2, 0xd6, 0x10, 0x9f, 0x37, 0x2f, 0xca,
	0x18, 0xba, 0xdb, 0x62, 0x0c, 0x91, 0x57, 0xfb, 0xb9, 0xd7, 0xa8, 0x27, 0x3a, 0xee, 0x08, 0xc5,
	0x91, 0x00, 0xc2, 0x93, 0x76, 0xa3, 0x48, 0xaf, 0x67, 0xef, 0x6e, 0x14, 0xb9, 0xb6, 0xf0, 0x6c,
	0x20, 0xb7, 0x6d, 0x35, 0x0a, 0x0e, 0xa6, 0x2a, 0x54, 0xec, 0x26, 0x90, 0xb9, 0x8c, 0x81, 0xb4,
	0x81, 0xfa, 0x25, 0x77, 0x5c, 0x4d, 0x20, 0x5e, 0x98, 0x66, 0x90, 0x6c, 0x20, 0x4d, 0xce, 0xb9,
	0x60, 0x3c, 0xad, 0xe5, 0x9c, 0x2b, 0x4e, 0x78, 0x77, 0x8d, 0x06, 0x4f, 0xce, 0x75, 0x79, 0x69,
	0x34, 0xe0, 0x4a, 0x35, 0x44, 0x32, 0x52, 0x31, 0x44, 0xfc, 0xdf, 0x06, 0x18, 0x7d, 0x03, 0xc0,
	0x27, 0x25, 0xb7, 0x45, 0xf3, 0x3c, 0x91, 0x49, 0x59, 0x16, 0x35, 0x42, 0xf8, 0xd2, 0xf2, 0xb7,
	0xaf, 0x5e, 0xec, 0xcc, 0x86, 0x39, 0xfc, 0x75, 0xa4, 0xe1, 0xf1, 0xe2, 0x4b, 0xf0, 0xc6, 0x5a,
	0x2b, 0x1a, 0x68, 0x30, 0xe7, 0x16, 0x63, 0x34, 0x1b, 0x96, 0x38, 0xd9, 0xf3, 0x16, 0xd5, 0x61,
	0xef, 0xce, 0xff, 0xad, 0x0c, 0x8c, 0xfe, 0x22, 0x03, 0x2e, 0x96, 0x5c, 0x91, 0xce, 0xf3, 0x32,
	0xa6, 0x74, 0x0c, 0xb1, 0x8f, 0x29, 0xff, 0xc0, 0x2b, 0x9c, 0xf7, 0xa6, 0x70, 0x1c, 0xb1, 0x7d,
	0x7f, 0x09, 0x03, 0x3b, 0xa9, 0x1f, 0x84, 0x38, 0x1a, 0xaa, 0x60, 0x52, 0x81, 0xeb, 0x21, 0xdd,
	0xcd, 0x07, 0x66, 0xa4, 0x13, 0x68, 0x43, 0x11, 0x64, 0x0f, 0x96, 0x3a, 0x1b, 0xc0, 0x5b, 0x4d,
	0xfb, 0x32, 0x68, 0x7c, 0xc0, 0x46, 0x45, 0x43, 0x3d, 0xb6, 0xd4, 0x4f, 0x8f, 0xdb, 0x20, 0xc6,
	0x97, 0x7e, 0x04, 0x30, 0xfa, 0x5b, 0xfd, 0x02, 0x6f, 0x1c, 0x7c, 0xba, 0x33, 0xa6, 0x7b, 0x98,
	0x89, 0x8d, 0xd5, 0x2b, 0xc2, 0xeb, 0x97, 0xd8, 0x83, 0xe5, 0xab, 0x17, 0x7f, 0x09, 0xe1, 0x6d,
	0xee, 0x6b, 0x4a, 0x43, 0x11, 0x5f, 0x0a, 0x47, 0xda, 0xe4, 0x9b, 0x11, 0x45, 0x4a, 0x5d, 0xc6,
	0x93, 0x60, 0x92, 0xa3, 0x3f, 0xff, 0xbf, 0x66, 0x63, 0xf4, 0xcf, 0xd9, 0x70, 0x99, 0x14, 0x17,
	0xf5, 0xbc, 0x3b, 0x52, 0x6c, 0xc7, 0x49, 0x8a, 0x7b, 0xc7, 0xf0, 0xf2, 0x85, 0x2c, 0xe1, 0xff,
	0xcb, 0xea, 0xbf, 0xbc, 0xef, 0x6f, 0x50, 0xe9, 0x9a, 0xc8, 0x1f, 0x64, 0x91, 0x3f, 0xf1, 0xda,
	0xa6, 0x0c, 0x41, 0x3d, 0x3c, 0xdf, 0x57, 0x2f, 0xee, 0x1e, 0x0e, 0xc7, 0xf1, 0xee, 0x1e, 0x14,
	0x55, 0x54, 0x95, 0x0f, 0xf1, 0xfa, 0xd9, 0xfd, 0x54, 0xc6, 0x93, 0x8c, 0xba, 0xa2, 0xe4, 0xec,
	0x94, 0x83, 0xd1, 0x18, 0x69, 0x14, 0xa9, 0xc1, 0x14, 0x6d, 0x6b, 0x74, 0x56, 0xde, 0x7e, 0x90,
	0x3d, 0x6f, 0x65, 0x32, 0xf7, 0xc9, 0xdc, 0x4c, 0x67, 0xa7, 0x8b, 0xe9, 0xfa, 0x52, 0x82, 0xcd,
	0x79, 0xc1, 0x9a, 0xe0, 0x12, 0x85, 0x7a, 0x80, 0xf4, 0xa9, 0x8e, 0xa0, 0xc5, 0x9f, 0x5a, 0x56,
	0x45, 0xb6, 0x1e, 0xab, 0x6b, 0xd8, 0x9b, 0x15, 0xb0, 0xc2, 0xb2, 0x57, 0x9b, 0xb2, 0x93, 0xab,
	0x9f, 0xf7, 0x9d, 0x4c, 0x8c, 0xbe, 0x99, 0x09, 0x5b, 0x81, 0x94, 0x60, 0x63, 0x65, 0xc9, 0x19,
	0x35, 0xe8, 0xe9, 0xdc, 0x14, 0x0c, 0x87, 0xd9, 0x8a, 0x54, 0x09, 0x23, 0x60, 0x46, 0x65, 0x6f,
	0xd6, 0x25, 0x64, 0x5d, 0x04, 0x9b, 0xb2, 0xdb, 0x9e, 0x21, 0x7c, 0x98, 0x71, 0xe9, 0xc3, 0x61,
	0x66, 0x69, 0xf0, 0xe0, 0x60, 0xca, 0x11, 0xcb, 0xaa, 0xb5, 0x0f, 0x5f, 0x7a, 0xf3, 0x65, 0x91,
	0x16, 0x85, 0x7d, 0x34, 0x58, 0x1a, 0xaa, 0x54, 0x5e, 0x16, 0xfd, 0x6f, 0xbe, 0x2c, 0x86, 0xaa,
	0x96, 0x55, 0xd4, 0x54, 0x57, 0x2d, 0x09, 0x55, 0xd5, 0xbe, 0x2c, 0xfa, 0x5f, 0x16, 0x57, 0x2c,
	0xad, 0x8a, 0x7c, 0x65, 0x43, 0x6f, 0xc7, 0xd6, 0xe8, 0xa6, 0x0e, 0x75, 0xff, 0xea, 0x97, 0xc5,
	0x89, 0xe6, 0x67, 0x7a, 0x3b, 0xa9, 0x30, 0x2b, 0xeb, 0xbf, 0x97, 0x97, 0xe9, 0x3f, 0x29, 0x8b,
	0xb4, 0x7f, 0xd4, 0x4f, 0x7c, 0x59, 0x7c, 0xa3, 0xba, 0x2a, 0xa4, 0xff, 0xa4, 0xfd, 0xa3, 0x40,
	0x87, 0xa9, 0xa8, 0x52, 0x6a, 0x83, 0x55, 0x65, 0xa1, 0x8a, 0x72, 0x02, 0xbb, 0xac, 0xac, 0xe0,
	0xd5, 0x02, 0x79, 0xfa, 0xab, 0xf9, 0xaf, 0xe6, 0xbf, 0x5a, 0xa0, 0x7d, 0x95, 0xdc, 0xb4, 0x22,
	0x47, 0xdf, 0x53, 0xbb, 0x5b, 0x92, 0x9f, 0x53, 0x59, 0x39, 0x77, 0x4e, 0xb2, 0xcb, 0x9c, 0x64,
	0xcb, 0x9c, 0xe6, 0xbb, 0x14, 0x3b, 0x3c, 0x95, 0x01, 0xef, 0x88, 0x4b, 0xc7, 0x69, 0x68, 0x09,
	0x16, 0x31, 0x25, 0x80, 0x89, 0x14, 0xbb, 0x0b, 0xa3, 0x3b, 0xa5, 0xf1, 0xda, 0x49, 0xfb, 0xa3,
	0x7d, 0x94, 0x7b, 0x8d, 0xe2, 0x87, 0x24, 0xff, 0x42, 0x09, 0xd5, 0xfa, 0x2a, 0xca, 0x99, 0xd2,
	0xbe, 0x0f, 0x32, 0xa5, 0x7d, 0x89, 0x54, 0xbb, 0x13, 0x23, 0x9f, 0x34, 0xce, 0xa5, 0x0f, 0xbd,
	0x4a, 0xaf, 0xde, 0x01, 0xfd, 0xc8, 0xbf, 0x17, 0x60, 0xb4, 0x0b, 0xc0, 0x4a, 0x29, 0xd1, 0xf6,
	0xc8, 0xf9, 0xc9, 0xc8, 0x19, 0x5a, 0xc1, 0x5b, 0x2f, 0x1f, 0x3b, 0x50, 0xee, 0xbd, 0xcd, 0x99,
	0x70, 0x1c, 0xef, 0xda, 0xcd, 0x35, 0xe5, 0xc6, 0x3c, 0x2b, 0x61, 0x06, 0x26, 0x32, 0x93, 0x2c,
	0x5e, 0xd6, 0xe5, 0xc1, 0xe8, 0x84, 0x07, 0xd6, 0x49, 0x09, 0x70, 0xab, 0xe9, 0x17, 0x7b, 0xc8,
	0xea, 0x22, 0xf4, 0x4b, 0x4c, 0x87, 0x9c, 0x02, 0xc2, 0x09, 0x70, 0x05, 0xe8, 0x10, 0x5e, 0xe0,
	0xf3, 0x53, 0x2f, 0xbc, 0x23, 0x2e, 0xda, 0xd2, 0x30, 0x2c, 0x10, 0x93, 0x24, 0x09, 0x30, 0xa3,
	0x49, 0x92, 0xc4, 0x14, 0x35, 0x18, 0x92, 0xe4, 0x27, 0xc3, 0xe1, 0x6d, 0x4f, 0xad, 0xa8, 0x2a,
	0xbb, 0x26, 0x47, 0x86, 0xa2, 0x91, 0xcc, 0x4a, 0xb1, 0xec, 0x24, 0xa5, 0x58, 0x53, 0x16, 0x46,
	0x8d, 0x59, 0xf0, 0x5d, 0x20, 0xc5, 0xdd, 0x58, 0x59, 0x52, 0x37, 0x37, 0x47, 0x8e, 0x1e, 0x1c,
	0x04, 0x23, 0xd9, 0x54, 0xa5, 0xf1, 0xec, 0xe5, 0x5f, 0x64, 0x08, 0x3f, 0xbb, 0x6a, 0xed, 0x65,
	0x03, 0x01, 0x7a, 0x9a, 0x68, 0xc2, 0x6f, 0xae, 0x59, 0xd8, 0x03, 0x60, 0x61, 0xf3, 0x74, 0xd2,
	0xef, 0xbc, 0xf0, 0xf6, 0x38, 0x3c, 0x90, 0x86, 0x06, 0xf6, 0x1c, 0xc6, 0x38, 0xce, 0x88, 0x55,
	0xbe, 0x9f, 0x40, 0x8c, 0x63, 0xfa, 0x4a, 0x7e, 0x62, 0x13, 0x79, 0x37, 0xc0, 0xa8, 0x0d, 0xc0,
	0xd7, 0xa4, 0xf8, 0xe8, 0x95, 0xf3, 0x93, 0x91, 0x31, 0x83, 0x11, 0xff, 0xfe, 0x4a, 0x06, 0xb7,
	0xba, 0xdc, 0x35, 0xbd, 0x46, 0xf5, 0x9a, 0xbf, 0xd5, 0x83, 0xd1, 0x66, 0x0f, 0x5c, 0x20, 0xc5,
	0x47, 0x13, 0x2f, 0xc0, 0xd2, 0xd3, 0xb9, 0x09, 0xcd, 0x9b, 0xc7, 0xee, 0x60, 0x42, 0xfd, 0x20,
	0x1f, 0x04, 0xc2, 0xfe, 0x21, 0x6f, 0xd9, 0xfa, 0xea, 0xc5, 0xad, 0x90, 0x5b, 0xbd, 0x2e, 0x9d,
	0x45, 0x46, 0x1d, 0x1c, 0x53, 0xc6, 0x43, 0x06, 0x0d, 0xc3, 0xdf, 0xee, 0x72, 0xd1, 0x87, 0x00,
	0xd1, 0xb3, 0x77, 0x7c, 0x01, 0x10, 0xe0, 0x0f, 0xe0, 0x6f, 0xca, 0xc6, 0xa8, 0x31, 0x1b, 0xae,
	0x06, 0x52, 0x82, 0x3d, 0x91, 0xf3, 0xb9, 0x54, 0xda, 0x1f, 0x39, 0x73, 0x1e, 0xf0, 0x27, 0x23,
	0xff, 0x21, 0x53, 0xf8, 0xaf, 0xcc, 0x14, 0x22, 0x38, 0xdc, 0x5e, 0x2e, 0x61, 0xdc, 0x7e, 0x28,
	0x1a, 0x3a, 0xd7, 0x9c, 0x89, 0x83, 0xe2, 0x4c, 0xbc, 0x04, 0xd5, 0x5a, 0x8f, 0x65, 0xc2, 0xf1,
	0xee, 0x3c, 0x78, 0x95, 0x66, 0x37, 0xa4, 0x7a, 0x56, 0x34, 0xb3, 0x21, 0x32, 0x93, 0xcd, 0x86,
	0xc8, 0x4a, 0x36, 0x1b, 0xe2, 0x98, 0x07, 0xa3, 0x8f, 0x3c, 0xf0, 0x53, 0x20, 0x25, 0xde, 0x06,
	0x79, 0x15, 0x48, 0x46, 0x69, 0x93, 0x88, 0xb6, 0xf9, 0x7c, 0x47, 0x6c, 0xdd, 0x3d, 0x9d, 0x1b,
	0x7b, 0x3a, 0xbb, 0xa2, 0xef, 0x77, 0xd1, 0x37, 0x3b, 0x9a, 0xd7, 0xc7, 0xda, 0x8c, 0x47, 0xfb,
	0x8d, 0x4f, 0x37, 0x1f, 0x22, 0x10, 0x3a, 0x02, 0xd8, 0x46, 0xd6, 0x24, 0xb8, 0x3c, 0x69, 0x16,
	0x07, 0x21, 0x14, 0x13, 0xe1, 0x2a, 0x0d, 0xd5, 0x79, 0x03, 0x80, 0x37, 0x73, 0x75, 0x93, 0x91,
	0x73, 0x91, 0x40, 0xa1, 0x93, 0xf3, 0x42, 0x7c, 0x4d, 0x4b, 0xb3, 0x30, 0x5c, 0xc6, 0xf1, 0x6f,
	0xc8, 0xc6, 0x68, 0xdd, 0x50, 0xd1, 0xeb, 0x7f, 0xcc, 0x14, 0xfe, 0x70, 0xd1, 0x7a, 0x5d, 0xcf,
	0xcf, 0xb8, 0xa6, 0xd9, 0xaf, 0x69, 0xf6, 0x2b, 0x4c, 0xb3, 0xcf, 0xf7, 0xd5, 0x8b, 0x27, 0xb3,
	0xe1, 0x28, 0x12, 0xe8, 0x7a, 0x36, 0x58, 0x53, 0x11, 0x2c, 0xad, 0x0c, 0x0d, 0xed, 0xbb, 0x30,
	0xd9, 0x74, 0x17, 0xa8, 0xa8, 0x23, 0x57, 0x5a, 0x68, 0x09, 0x5c, 0x7d, 0x4f, 0x98, 0xcc, 0x01,
	0x02, 0x29, 0xcc, 0x82, 0xd7, 0x5b, 0xb6, 0x9b, 0x2a, 0x74, 0x5d, 0xef, 0x5a, 0x3e, 0x8d, 0xec,
	0x5d, 0x17, 0x3d, 0x7a, 0xb6, 0xae, 0x01, 0x04, 0xac, 0x1f, 0x08, 0xf7, 0xc1, 0x0c, 0x6d, 0x2b,
	0xa9, 0x07, 0x58, 0x2f, 0x62, 0x30, 0x92, 0x7c, 0xa8, 0xfd, 0x1c, 0x2b, 0x8b, 0xa6, 0xfd, 0x25,
	0xcc, 0x87, 0x19, 0xb5, 0x2b, 0xc2, 0x21, 0xaa, 0xdd, 0xf5, 0xd2, 0xb0, 0x23, 0xd4, 0x96, 0x1d,
	0x7d, 0xeb, 0x5a, 0x48, 0x51, 0x58, 0x39, 0x2f, 0xdf, 0xef, 0x53, 0xd7, 0x1c, 0x51, 0x3f, 0x6e,
	0x20, 0x3f, 0xfb, 0x0a, 0xfc, 0x3e, 0x3a, 0x77, 0xf2, 0xb7, 0xec, 0xf7, 0xe9, 0xfd, 0xea, 0x7f,
	0x51, 0x63, 0xe0, 0xff, 0xcd, 0x0a, 0xe8, 0xdd, 0x0a, 0x77, 0x41, 0xef, 0xe2, 0xd0, 0x0a, 0xea,
	0x0f, 0x1e, 0x8d, 0xd1, 0x28, 0xa3, 0xf7, 0xc5, 0xa1, 0x15, 0x6a, 0x43, 0x77, 0x5d, 0x83, 0x27,
	0xa0, 0x01, 0x08, 0x13, 0x61, 0xe6, 0xb2, 0x60, 0xe5, 0xd2, 0x10, 0x7d, 0x4c, 0x55, 0xf7, 0x1c,
	0xdf, 0x40, 0x20, 0xf5, 0xdf, 0x75, 0xd8, 0x61, 0x01, 0x02, 0x24, 0xdc, 0x43, 0xaf, 0xfc, 0x0c,
	0x77, 0x74, 0x6b, 0x3c, 0x78, 0x0c, 0x9c, 0xd7, 0xa0, 0x21, 0x73, 0xe5, 0xc7, 0xcc, 0xdc, 0x60,
	0x73, 0x36, 0x7e, 0xe2, 0xc1, 0xe8, 0x87, 0x1e, 0xd8, 0x0e, 0x24, 0x27, 0x8d, 0xc9, 0x0b, 0xe9,
	0x03, 0xb1, 0xfa, 0x28, 0x84, 0x1a, 0x7e, 0xd9, 0xb0, 0x8a, 0x7d, 0x93, 0x96, 0x4e, 0x60, 0xfb,
	0x09, 0xf3, 0x01, 0x5a, 0xf5, 0xdc, 0x1a, 0x75, 0xdf, 0x87, 0xba, 0x65, 0xa2, 0x81, 0xc5, 0xb0,
	0x64, 0x01, 0xc2, 0xcd, 0xe4, 0x4d, 0x59, 0x02, 0x6d, 0x7b, 0x3a, 0xb1, 0x56, 0xaf, 0x61, 0xab,
	0xa1, 0xe8, 0x3c, 0x20, 0x8b, 0x37, 0x1f, 0x07, 0x32, 0x0b, 0xdb, 0xee, 0x07, 0xc2, 0x9e, 0x8b,
	0xf3, 0x57, 0xc4, 0xea, 0xa2, 0x2d, 0x0e, 0xe9, 0x8c, 0xbb, 0x38, 0xb4, 0x42, 0x4f, 0xbd, 0xd2,
	0x47, 0xd4, 0x25, 0xb1, 0xf6, 0x8f, 0x02, 0x67, 0x19, 0xed, 0x9e, 0xce, 0x86, 0x9e, 0xce, 0x0f,
	0x58, 0xfa, 0x70, 0xc9, 0x20, 0xf8, 0xcc, 0x0b, 0x05, 0x3b, 0x56, 0xd3, 0xd0, 0xa2, 0xb9, 0x03,
	0x7a, 0x97, 0x99, 0x46, 0xba, 0x7e, 0x71, 0x7f, 0x18, 0x41, 0x5b, 0x49, 0x71, 0x40, 0x6b, 0xf1,
	0xbf, 0x0f, 0x30, 0x3a, 0x08, 0xe0, 0x63, 0x12, 0x07, 0x5b, 0x46, 0x39, 0x64, 0x4a, 0x44, 0xc9,
	0x44, 0xd8, 0xce, 0x03, 0xad, 0x57, 0xf9, 0x69, 0x21, 0x90, 0xca, 0x7d, 0x62, 0xaa, 0x7d, 0x0b,
	0xe5, 0x42, 0x39, 0x7f, 0x46, 0x9e, 0xfe, 0xd8, 0xcc, 0x94, 0x02, 0x79, 0xaa, 0x9c, 0x57, 0x20,
	0xeb, 0xcf, 0xcd, 0xc8, 0x05, 0x53, 0xb4, 0x3d, 0x7d, 0x2f, 0x0b, 0x8e, 0x22, 0x77, 0x88, 0xae,
	0x04, 0x69, 0x9c, 0x4f, 0x50, 0x4f, 0xb6, 0x68, 0x1c, 0x46, 0x63, 0xa5, 0x5b, 0xc8, 0x13, 0x87,
	0xd4, 0x93, 0xdc, 0xd6, 0x68, 0xec, 0x84, 0xf6, 0xc5, 0xb2, 0x8a, 0x72, 0x53, 0x36, 0x66, 0x0c,
	0xaa, 0x6c, 0xcc, 0x4c, 0x5a, 0x36, 0x66, 0xa5, 0x22, 0x1b, 0xb3, 0x13, 0xca, 0x46, 0xf6, 0x3e,
	0xe4, 0xb0, 0x84, 0x37, 0xa2, 0x4f, 0x78, 0x30, 0x3a, 0xee, 0x81, 0x5f, 0x92, 0x9c, 0x5b, 0x2e,
	0x0b, 0x04, 0x85, 0xac, 0x70, 0xb4, 0xca, 0x31, 0x0d, 0x9d, 0xf1, 0xa5, 0x59, 0x2c, 0xd8, 0xf6,
	0xd7, 0x40, 0xf8, 0xab, 0x8b, 0xbb, 0xa7, 0xa8, 0x81, 0x27, 0xb4, 0x1d, 0x07, 0x45, 0xf0, 0xf1,
	0x02, 0x3b, 0x0d, 0x5e, 0x28, 0xd8, 0x51, 0x96, 0x86, 0xf9, 0x05, 0x6f, 0x60, 0xb4, 0x1c, 0x3e,
	0x24, 0x71, 0x50, 0x61, 0x94, 0x21, 0x4d, 0x41, 0xac, 0xa5, 0x18, 0x61, 0xf9, 0x5a, 0x06, 0x1c,
	0x45, 0xb2, 0x1a, 0xae, 0x04, 0x41, 0x35, 0x9e, 0x15, 0x54, 0x37, 0x62, 0x34, 0x22, 0xa6, 0x23,
	0x2e, 0x91, 0x64, 0xea, 0x4f, 0x42, 0xd2, 0x3f, 0x00, 0x8c, 0x7e, 0x0c, 0xe0, 0x23, 0x92, 0x13,
	0xd3, 0xb2, 0x40, 0x32, 0x46, 0x92, 0x94, 0x0f, 0x31, 0x51, 0xb0, 0x1e, 0x08, 0x6b, 0x2f, 0x5e,
	0x14, 0x24, 0x71, 0x8e, 0xb4, 0x09, 0x03, 0x37, 0x36, 0xb6, 0xaf, 0x2c, 0x8d, 0xd9, 0xd8, 0x89,
	0x0a, 0xa3, 0x7a, 0xfa, 0xe0, 0xb1, 0xf1, 0x9f, 0x65, 0xc0, 0x91, 0xba, 0x13, 0xe6, 0x1a, 0x17,
	0x27, 0xc1, 0xc5, 0xfe, 0x2d, 0x1e, 0x8c, 0x5a, 0x3c, 0xb0, 0x15, 0x48, 0x0e, 0xac, 0xc9, 0x0b,
	0xa9, 0xff, 0xd3, 0x7a, 0x9c, 0xa1, 0x1e, 0xac, 0x44, 0xc7, 0x19, 0x02, 0xd6, 0x8f, 0xe3, 0x0c,
	0xc3, 0xe6, 0xf2, 0x32, 0xa1, 0xf6, 0x52, 0x70, 0xb6, 0x3c, 0x9d, 0xe5, 0x6d, 0x5f, 0xbd, 0xd8,
	0x97, 0x09, 0x47, 0xd9, 0xd0, 0x91, 0x86, 0xe7, 0x90, 0xa9, 0xd0, 0xbb, 0x2c, 0x58, 0x43, 0xc3,
	0xa2, 0x23, 0x8d, 0x11, 0x0c, 0x94, 0xd0, 0x2f, 0x0d, 0xea, 0x38, 0x14, 0x59, 0xbd, 0x26, 0xa0,
	0xc1, 0xfb, 0x3f, 0xf2, 0x62, 0x74, 0xc4, 0x0b, 0x1f, 0x95, 0x9c, 0x28, 0x34, 0xca, 0x0f, 0xa7,
	0x78, 0x38, 0x09, 0xd6, 0xc8, 0x3f, 0xf2, 0x08, 0xdf, 0xf7, 0xa4, 0x72, 0x3c, 0x09, 0xd6, 0xf4,
	0x2b, 0x36, 0xd9, 0x3f, 0x92, 0x19, 0xb4, 0x43, 0xf1, 0x25, 0x88, 0x84, 0x35, 0x66, 0xc1, 0xd1,
	0x96, 0x8d, 0x1a, 0xea, 0xc1, 0xaf, 0x6b, 0x1e, 0xb3, 0x58, 0x60, 0x2e, 0x3b, 0xd9, 0xc0, 0xdc,
	0xb0, 0x64, 0x03, 0x73, 0xff, 0x09, 0x30, 0xfa, 0x35, 0x80, 0x07, 0x80, 0xc4, 0xa5, 0x0a, 0x79,
	0x05, 0xcb, 0xc1, 0xec, 0xa5, 0x64, 0xae, 0x6a, 0xa0, 0xb7, 0x4c, 0x93, 0x51, 0x10, 0x1c, 0xd0,
	0x84, 0x5e, 0x2f, 0xf9, 0x61, 0x61, 0xee, 0x40, 0x38, 0xb5, 0x7c, 0xf5, 0xe2, 0xff, 0x66, 0xc2,
	0x31, 0x9c, 0x05, 0xa7, 0x65, 0xfd, 0xbb, 0x8c, 0x65, 0xc1, 0x1a, 0x23, 0x7a, 0x16, 0x5f, 0xee,
	0xd3, 0xc0, 0x98, 0xfe, 0x81, 0xbf, 0xcb, 0x8b, 0xd1, 0x09, 0x2f, 0x7c, 0x4e, 0xe2, 0x23, 0xd2,
	0x28, 0x59, 0x62, 0xd9, 0xee, 0xe4, 0x54, 0x80, 0xde, 0xbf, 0xfc, 0x13, 0x8f, 0xf0, 0xa3, 0x14,
	0x75, 0x40, 0x3f, 0xe3, 0x58, 0x69, 0xa6, 0x05, 0xe6, 0xfb, 0xea, 0xe5, 0xef, 0x1f, 0x00, 0x30,
	0x0b, 0x95, 0x95, 0x85, 0x14, 0x45, 0xf8, 0x21, 0x80, 0x37, 0x10, 0xcf, 0x62, 0xd1, 0x52, 0xa5,
	0xa2, 0x4a, 0xfb, 0xe9, 0x8e, 0x49, 0x41, 0xbd, 0x8d, 0x96, 0xd9, 0xb5, 0xb6, 0x06, 0x42, 0xaf,
	0xe7, 0xfa, 0xe2, 0x03, 0x28, 0x61, 0xb1, 0x01, 0x60, 0xf4, 0xa2, 0x40, 0x2f, 0x44, 0x46, 0xb6,
	0x1d, 0x23, 0x72, 0x3d, 0xf7, 0x21, 0xdb, 0x0f, 0x1a, 0xeb, 0x34, 0xf4, 0x36, 0x7d, 0xd4, 0xd3,
	0xd9, 0x15, 0x6d, 0xdf, 0x17, 0xdd, 0xbc, 0x56, 0x7d, 0x7b, 0x07, 0x39, 0x53, 0x5e, 0xe8, 0x6e,
	0xee, 0x3d, 0xb7, 0xb3, 0x77, 0x5f, 0x33, 0x01, 0x8c, 0xb6, 0x35, 0xf6, 0x1d, 0xda, 0x16, 0xf9,
	0x68, 0x9f, 0x46, 0x44, 0x6b, 0x0e, 0xae, 0xfa, 0xdb, 0x9e, 0x2d, 0x9e, 0xdb, 0xc5, 0x9c, 0xc9,
	0xcb, 0x0a, 0x26, 0x57, 0x54, 0xd5, 0x86, 0x6a, 0x16, 0x04, 0xcb, 0x42, 0x93, 0x4b, 0xe9, 0x0c,
	0x42, 0x8a, 0x1f, 0x48, 0x42, 0x14, 0xc0, 0xeb, 0x75, 0xda, 0x34, 0xd7, 0x35, 0xce, 0x3a, 0x6d,
	0x4b, 0xa3, 0xb6, 0xac, 0x3b, 0xe2, 0xb6, 0x2b, 0x61, 0xb1, 0x15, 0x60, 0xf4, 0xba, 0x20, 0x10,
	0xd2, 0x26, 0x13, 0x23, 0x25, 0xc5, 0x72, 0x5f, 0xa2, 0x72, 0x56, 0xe7, 0xed, 0x68, 0x5b, 0x63,
	0x74, 0x67, 0x7b, 0x64, 0xef, 0x3a, 0x02, 0xa2, 0x76, 0x9c, 0xea, 0xfd, 0x78, 0x5f, 0x6f, 0xc7,
	0xa1, 0xe8, 0xe9, 0xb5, 0x04, 0x7c, 0xa2, 0x4f, 0x6d, 0xe9, 0x88, 0xec, 0x3d, 0x15, 0xd9, 0xd8,
	0x6e, 0x28, 0xbc, 0x48, 0xd3, 0x36, 0x0a, 0xad, 0x2b, 0x17, 0xb2, 0x76, 0xd2, 0xa9, 0xbe, 0xd8,
	0x5c, 0xc1, 0x75, 0xb1, 0xc2, 0x19, 0x40, 0x2d, 0x58, 0x63, 0xb2, 0x1a, 0x17, 0x0a, 0x62, 0x9c,
	0xd5, 0x50, 0x01, 0x9f, 0x7b, 0x67, 0x42, 0x18, 0x25, 0x2c, 0xbe, 0x8a, 0x91, 0xdf, 0xba, 0x68,
	0xc2, 0xcf, 0xb9, 0x34, 0xbd, 0x32, 0xfa, 0xc9, 0xe9, 0xe8, 0xe9, 0x3d, 0xea, 0xda, 0x35, 0xd1,
	0xb6, 0x46, 0x75, 0xcd, 0x91, 0xbe, 0xd5, 0x47, 0x58, 0xd4, 0xe8, 0xb3, 0xbf, 0x4d, 0xc8, 0xe5,
	0xcf, 0xbe, 0x52, 0x9b, 0xe9, 0xfb, 0x00, 0xde, 0x40, 0xbc, 0x40, 0x6e, 0x24, 0x68, 0x6d, 0xe5,
	0x90, 0xa0, 0x1d, 0x40, 0x09, 0x8b, 0x4f, 0x63, 0x34, 0x49, 0xa0, 0x8e, 0x48, 0xcb, 0x5e, 0x51,
	0xef, 0x12, 0xd9, 0x2b, 0xc7, 0x54, 0x6f, 0xcf, 0x8d, 0x4b, 0x55, 0xe7, 0x00, 0x1c, 0x4e, 0xe8,
	0x1d, 0x85, 0xc3, 0x42, 0x2e, 0x8f, 0x11, 0x50, 0x38, 0xac, 0xcd, 0x70, 0xac, 0x6b, 0x9b, 0x12,
	0x16, 0x57, 0x60, 0xf4, 0x02, 0xc3, 0x1e, 0x24, 0x1d, 0x27, 0x77, 0xae, 0xed, 0x07, 0x77, 0xf6,
	0x98, 0xe8, 0x4b, 0xc4, 0x1d, 0xb7, 0x88, 0x82, 0x75, 0x1d, 0xc1, 0x70, 0x58, 0x5f, 0x41, 0x37,
	0x80, 0xc3, 0xf4, 0x8d, 0xd6, 0x16, 0x70, 0x2b, 0x87, 0x00, 0xe8, 0xfc, 0x73, 0xdd, 0x9a, 0xc8,
	0xf4, 0x5f, 0x36, 0x48, 0x82, 0x4c, 0x95, 0xe2, 0x76, 0x2e, 0xcb, 0x07, 0xa4, 0xc5, 0x85, 0xf0,
	0x8d, 0x0c, 0xa4, 0x48, 0xd3, 0x36, 0xf2, 0x4f, 0x42, 0xf8, 0x0c, 0xc9, 0x8f, 0x16, 0x38, 0x2b,
	0x10, 0x0e, 0x01, 0x38, 0xc2, 0x98, 0x8b, 0x4e, 0xe7, 0xb7, 0xf3, 0xe7, 0x69, 0x90, 0xf8, 0xb8,
	0x78, 0xcd, 0x4a, 0x58, 0x7c, 0x0e, 0xa3, 0xe9, 0xd6, 0xa5, 0x50, 0xea, 0x1e, 0xcf, 0x2e, 0xc5,
	0xc4, 0x33, 0x0b, 0x42, 0xf0, 0x2c, 0x8c, 0x71, 0xcc, 0x52, 0xa7, 0xea, 0x56, 0x00, 0x87, 0x13,
	0xb2, 0xe4, 0x50, 0x8a, 0xd9, 0xc0, 0xa1, 0x14, 0xa6, 0x4d, 0x09, 0x8b, 0x8f, 0x33, 0x64, 0x6c,
	0x41, 0xb5, 0x85, 0x8c, 0xd9, 0x16, 0x32, 0xad, 0x5c, 0x97, 0xed, 0xdf, 0x0b, 0xe0, 0x70, 0xe2,
	0xab, 0xe1, 0x4c, 0xcb, 0x6c, 0xe0, 0x4c, 0x8b, 0x69, 0x53, 0xc2, 0xe2, 0x8b, 0x18, 0x7d, 0x5e,
	0x18, 0x41, 0x1d, 0x3c, 0x84, 0x7a, 0xf3, 0xc8, 0x5f, 0xec, 0x84, 0x2e, 0x74, 0x37, 0xbb, 0x51,
	0x30, 0xd9, 0x62, 0x89, 0xb7, 0xc5, 0x3b, 0x00, 0xbc, 0x9e, 0xde, 0x5e, 0xa5, 0x16, 0xfd, 0x38,
	0x1e, 0x2f, 0xd1, 0x46, 0x8e, 0xe4, 0xb6, 0xb5, 0x2b, 0x61, 0x71, 0x2e, 0x46, 0x22, 0xc3, 0x6f,
	0xc4, 0x6c, 0xcd, 0xb5, 0xff, 0xa0, 0xcf, 0x69, 0xac, 0x78, 0xb3, 0x75, 0x4e, 0xd4, 0x46, 0xd5,
	0xb1, 0x77, 0xc0, 0xa0, 0x3e, 0x63, 0x66, 0x3c, 0xea, 0x63, 0x26, 0x36, 0x2e, 0x5e, 0xb3, 0x12,
	0x16, 0x9f, 0xc1, 0x68, 0x8a, 0x41, 0x7d, 0x64, 0x0e, 0x74, 0x77, 0xc7, 0xb1, 0xd4, 0x47, 0x5a,
	0x58, 0x46, 0xd2, 0x67, 0x9a, 0x23, 0xb8, 0xcc, 0x54, 0x38, 0x05, 0xa8, 0x63, 0x8c, 0x8e, 0xa5,
	0x33, 0xca, 0x78, 0xf7, 0xb9, 0x18, 0xcc, 0x22, 0x26, 0x02, 0x51, 0xc2, 0xe2, 0x2b, 0x8c, 0x3a,
	0xa0, 0xe6, 0xbf, 0x45, 0x1d, 0x58, 0x08, 0xb2, 0x73, 0x83, 0x26, 0x9b, 0x18, 0x28, 0x82, 0x62,
	0xe1, 0x56, 0xee, 0xc4, 0x75, 0xbe, 0xf9, 0x00, 0xc0, 0xeb, 0xe9, 0x73, 0x52, 0xfc, 0xdd, 0xb7,
	0x34, 0x72, 0x76, 0xdf, 0xd6, 0xae, 0x84, 0xc5, 0xe7, 0x09, 0x96, 0x49, 0x09, 0x43, 0x2b, 0x96,
	0x19, 0x1e, 0x72, 0xc1, 0xf2, 0xd8, 0xdc, 0x38, 0xf4, 0xb0, 0x1b, 0xc0, 0xeb, 0xe9, 0xf5, 0x48,
	0xfe, 0x64, 0x2d, 0x8d, 0x9c, 0xc9, 0xda, 0xda, 0x95, 0xb0, 0xf8, 0x28, 0x46, 0xf7, 0x19, 0x9c,
	0x45, 0xe9, 0x74, 0xac, 0x93, 0xb3, 0x4c, 0xb4, 0x12, 0x4a, 0x90, 0xdc, 0x28, 0xa1, 0x19, 0x40,
	0x48, 0xd8, 0xe1, 0x45, 0xed, 0xac, 0xca, 0x55, 0x4a, 0x5a, 0x8b, 0x36, 0xb5, 0xdb, 0xdc, 0x1b,
	0x95, 0xb0, 0x38, 0xdb, 0xca, 0x42, 0xea, 0x81, 0xc3, 0x6a, 0x73, 0x57, 0xae, 0xfd, 0x07, 0x32,
	0x1d, 0xf1, 0x26, 0xeb, 0x74, 0xb4, 0xa3, 0x9d, 0x8e, 0xaf, 0x1d, 0x00, 0x0e, 0xd7, 0xa9, 0x4a,
	0x9f, 0x0d, 0x4f, 0xc5, 0x18, 0x93, 0x19, 0xeb, 0xda, 0xa6, 0x84, 0xc5, 0x00, 0xc3, 0x36, 0x64,
	0x5c, 0x1e, 0xdb, 0x90, 0x16, 0xc7, 0x86, 0x8e, 0x11, 0x78, 0xb3, 0x13, 0x8e, 0x1a, 0xf6, 0xa2,
	0x36, 0x8a, 0xce, 0x30, 0xe3, 0x5c, 0xa6, 0x60, 0x70, 0xcb, 0x1d, 0x71, 0xdb, 0x95, 0xb0, 0xf8,
	0x12, 0xc3, 0x2a, 0x64, 0x32, 0x3c, 0x56, 0xa1, 0x14, 0xa9, 0xb3, 0x0a, 0x0b, 0xc5, 0xe7, 0x71,
	0x6d, 0xb2, 0x3a, 0x9f, 0xec, 0x06, 0x10, 0x12, 0x52, 0xe7, 0xed, 0x6c, 0xac, 0x85, 0xb3, 0xb3,
	0x6c, 0x63, 0x4c, 0x08, 0x11, 0x15, 0x63, 0xc5, 0x26, 0xab, 0x62, 0xf8, 0xd8, 0xcc, 0xc9, 0x75,
	0xdb, 0xeb, 0xf5, 0x00, 0x42, 0x42, 0xde, 0xbc, 0x09, 0xc6, 0x5a, 0x38, 0x13, 0x64, 0x1b, 0x95,
	0xb0, 0x38, 0x4b, 0x23, 0x3d, 0x43, 0xd9, 0x10, 0xba, 0x13, 0x2c, 0x2c, 0x11, 0x23, 0xbd, 0x31,
	0x12, 0x77, 0x73, 0xbf, 0x02, 0xe0, 0x8d, 0x6c, 0x41, 0x84, 0xa7, 0x42, 0xb5, 0x02, 0xf7, 0x14,
	0x63, 0x36, 0x6b, 0xb3, 0x1a, 0x9f, 0x00, 0x42, 0x09, 0x8b, 0xf3, 0x35, 0xf3, 0x61, 0x4c, 0x4c,
	0x8f, 0x30, 0x8f, 0xc7, 0xe7, 0x8e, 0xeb, 0xe9, 0xec, 0x32, 0xec, 0x05, 0x4e, 0x3b, 0xff, 0x10,
	0x63, 0x16, 0x86, 0xd0, 0x71, 0xd8, 0x09, 0xe0, 0x0d, 0x4c, 0x9a, 0xa9, 0x36, 0x6d, 0x1e, 0xd5,
	0x59, 0x66, 0xed, 0x8b, 0x0f, 0xa0, 0x84, 0xc5, 0x32, 0x8c, 0x66, 0x09, 0x96, 0xd7, 0xe1, 0xc8,
	0x8c, 0xe8, 0xb6, 0x5b, 0xa9, 0x93, 0x69, 0x77, 0x6c, 0xbe, 0xe3, 0x54, 0x12, 0x9b, 0xbd, 0xf0,
	0x57, 0x00, 0x0a, 0xd6, 0xb1, 0x75, 0xa6, 0xba, 0x33, 0xde, 0xec, 0x0c, 0xce, 0x9a, 0x90, 0x18,
	0x48, 0x09, 0x8b, 0x15, 0x18, 0xcd, 0xe6, 0x2d, 0x83, 0x32, 0xd9, 0xdd, 0x4e, 0x7d, 0x64, 0x7b,
	0xde, 0x9f, 0xe1, 0xb3, 0xdb, 0x85, 0xb1, 0x2e, 0x2b, 0xd1, 0x99, 0xed, 0x1b, 0x00, 0xde, 0xc8,
	0xbe, 0x71, 0xc8, 0xa1, 0x1f, 0x5b, 0x33, 0x87, 0x7e, 0x1c, 0x10, 0x4a, 0x58, 0xac, 0xc6, 0xa8,
	0x44, 0xb0, 0x3c, 0xbb, 0x69, 0xd9, 0x8a, 0x3c, 0xa7, 0x91, 0x67, 0x5b, 0x83, 0x63, 0x4f, 0x1c,
	0x07, 0x18, 0x2b, 0x45, 0x1d, 0x07, 0xf0, 0x46, 0xf6, 0x42, 0x3f, 0x67, 0x25, 0xb6, 0x66, 0xce,
	0x4a, 0x1c, 0x10, 0xc4, 0x22, 0x9c, 0x2e, 0x08, 0x6c, 0x29, 0x00, 0xca, 0x06, 0xe3, 0xf9, 0xda,
	0xcb, 0xce, 0x09, 0xb9, 0x92, 0x3b, 0x2d, 0xed, 0xf2, 0xc0, 0xeb, 0x1f, 0xad, 0x2e, 0x5b, 0x1c,
	0x9b, 0xb2, 0x4d, 0x36, 0x5b, 0x1a, 0x39, 0xb2, 0xd9, 0xd6, 0xae, 0x84, 0xc5, 0x6f, 0x01, 0x8c,
	0xde, 0x05, 0x42, 0x4e, 0x5f, 0xeb, 0x4a, 0xed, 0xc8, 0xae, 0x9f, 0xd7, 0x2d, 0xd3, 0x6e, 0x00,
	0x6e, 0x4d, 0x13, 0x7d, 0xea, 0xae, 0x23, 0x6a, 0xc7, 0x29, 0xf2, 0x1b, 0x3d, 0x88, 0x9d, 0x6b,
	0x8f, 0xb4, 0x9e, 0x22, 0xa6, 0x6d, 0xcf, 0xa9, 0x0d, 0xea, 0xfa, 0x8d, 0x24, 0x97, 0x48, 0x5d,
	0xd3, 0x44, 0x00, 0x48, 0x67, 0x17, 0xba, 0x9b, 0xfb, 0x76, 0x1c, 0x8f, 0x1c, 0xdd, 0xaf, 0x1e,
	0x68, 0xeb, 0xe9, 0xea, 0x52, 0x37, 0x37, 0x47, 0xb6, 0x9f, 0x20, 0xdf, 0xf6, 0x35, 0xec, 0x8d,
	0x34, 0x6d, 0xa6, 0x7d, 0x76, 0x74, 0xa8, 0x27, 0xdb, 0x75, 0xb4, 0x88, 0xe2, 0xed, 0x2e, 0x68,
	0xc9, 0xab, 0xac, 0x2e, 0x5b, 0x4c, 0xb4, 0xaa, 0x07, 0xde, 0xf8, 0x4c, 0x55, 0xa5, 0x05, 0x41,
	0x76, 0xea, 0xb4, 0x36, 0xf3, 0xa8, 0xd3, 0x0e, 0xa1, 0x84, 0xc5, 0x73, 0x00, 0xa3, 0x2d, 0x40,
	0xc8, 0xe9, 0x3d, 0xfc, 0x5e, 0x5f, 0xeb, 0x4a, 0x0e, 0x92, 0x96, 0xbb, 0xb5, 0x10, 0x1c, 0xb5,
	0x37, 0x9b, 0x4b, 0x22, 0x8b, 0xfc, 0x65, 0xc3, 0x4a, 0xb5, 0xe5, 0x6d, 0xb5, 0x73, 0xb5, 0xba,
	0x79, 0x93, 0x86, 0x20, 0xfd, 0x6b, 0xf6, 0x3b, 0xf3, 0x5e, 0x86, 0xba, 0xe6, 0x44, 0xcf, 0xe9,
	0x6d, 0x14, 0xa1, 0x5d, 0x5d, 0xda, 0xb9, 0x61, 0xfb, 0xde, 0xc8, 0x27, 0x5b, 0xd5, 0xb7, 0xf6,
	0xf6, 0xb5, 0xae, 0x24, 0xa8, 0xc9, 0x4d, 0x8c, 0x9a, 0x5e, 0xd3, 0x60, 0x27, 0x6d, 0x7c, 0x83,
	0x9d, 0xb4, 0xb9, 0x1a, 0xec, 0x46, 0xb3, 0x12, 0x16, 0x77, 0x00, 0x8c, 0xea, 0x84, 0x71, 0x4e,
	0x09, 0xa9, 0xb6, 0xef, 0xee, 0x39, 0xb3, 0x85, 0x94, 0x51, 0xc8, 0x7d, 0x36, 0x7e, 0x3b, 0x73,
	0xae, 0xa7, 0x1e, 0xa3, 0xd3, 0x9f, 0xaa, 0x5d, 0x87, 0x4c, 0xae, 0x20, 0x50, 0x7d, 0xfb, 0x1b,
	0x7b, 0x0f, 0x37, 0x45, 0xf6, 0x1c, 0x8c, 0xee, 0xda, 0xc0, 0x9c, 0x99, 0x1c, 0x07, 0x4e, 0xba,
	0x6a, 0xe1, 0x13, 0x8f, 0x61, 0xf4, 0x93, 0x1f, 0xdc, 0x8d, 0xfe, 0x58, 0xbb, 0xab, 0xd1, 0xcf,
	0x82, 0x28, 0x61, 0xf1, 0x47, 0x00, 0xa3, 0xe3, 0x40, 0xb0, 0x14, 0xa2, 0x66, 0x57, 0x44, 0x45,
	0x6e, 0x0b, 0x88, 0x0f, 0x30, 0xd1, 0x17, 0xd9, 0xbe, 0x9f, 0xc5, 0xcd, 0x6c, 0x3d, 0x51, 0x3f,
	0xd2, 0xb2, 0xb9, 0xa7, 0xeb, 0x80, 0x46, 0x12, 0x2e, 0xdf, 0x69, 0xe7, 0xc8, 0x33, 0xbb, 0x7a,
	0x3a, 0x69, 0xb5, 0x22, 0xf2, 0x50, 0xf2, 0x85, 0xee, 0xa6, 0xde, 0x0d, 0x07, 0x23, 0xbb, 0xd6,
	0x47, 0x3a, 0x8f, 0x47, 0xf6, 0x6c, 0xb9, 0xd0, 0xbd, 0x5e, 0xdd, 0xbc, 0x29, 0xda, 0xd6, 0x18,
	0xdd, 0xd7, 0xde, 0xdb, 0x7e, 0x80, 0xc1, 0x98, 0xf3, 0xb8, 0x41, 0x56, 0xa7, 0x4b, 0xf6, 0x6f,
	0x01, 0x78, 0x93, 0xbe, 0xe4, 0x40, 0xa8, 0x32, 0x14, 0x54, 0x42, 0x06, 0x9d, 0xf0, 0x54, 0x90,
	0x15, 0x44, 0xc3, 0xdd, 0xe7, 0x92, 0x80, 0x52, 0xc2, 0x62, 0x48, 0x3b, 0x2d, 0x53, 0x4d, 0x45,
	0xea, 0x6d, 0xb0, 0x1b, 0x6d, 0x75, 0x35, 0x90, 0x76, 0x1b, 0x2d, 0xe8, 0xeb, 0xb8, 0x43, 0xb0,
	0xd1, 0x7b, 0x0d, 0x19, 0x29, 0xcf, 0xa0, 0x80, 0x1f, 0x03, 0x38, 0xc2, 0x30, 0x52, 0x34, 0xbc,
	0xda, 0x89, 0x9d, 0x6d, 0xe3, 0x10, 0xbb, 0xb5, 0x59, 0x09, 0x8b, 0xeb, 0x01, 0x46, 0x0b, 0x84,
	0xdb, 0x4d, 0xeb, 0x85, 0xec, 0xd3, 0x3d, 0x54, 0x5e, 0xe9, 0xd3, 0xbb, 0x37, 0x77, 0x8e, 0xad,
	0x59, 0xe3, 0xe0, 0x8d, 0x9f, 0xa8, 0x1d, 0xa7, 0xe2, 0x29, 0x2d, 0x87, 0xcc, 0x24, 0x2a, 0x40,
	0x74, 0x90, 0xb6, 0x36, 0x17, 0x9d, 0x91, 0xff, 0x1c, 0xc0, 0xeb, 0x28, 0x69, 0xea, 0x4b, 0xbb,
	0x8d, 0x4b, 0xb5, 0xc6, 0xca, 0x6e, 0x8f, 0xd3, 0xaa, 0x84, 0xc5, 0x3a, 0x8c, 0x9e, 0x17, 0xc6,
	0x3b, 0x2d, 0x07, 0x92, 0xf3, 0xa9, 0xbe, 0x75, 0x84, 0x6e, 0x4c, 0x21, 0xeb, 0x17, 0xb2, 0x01,
	0xb2, 0x04, 0xcc, 0x7e, 0xe4, 0xc6, 0xa4, 0xfa, 0x4a, 0x84, 0x5f, 0x18, 0xe4, 0xf6, 0x70, 0x85,
	0x52, 0x5b, 0x6d, 0x4c, 0x8a, 0x4f, 0x6e, 0x56, 0x10, 0x37, 0x72, 0xb3, 0x43, 0x29, 0x61, 0xb1,
	0x1e, 0xa3, 0x67, 0x84, 0x09, 0x1c, 0xc3, 0x68, 0xd3, 0x5a, 0xb5, 0xe5, 0x38, 0x41, 0x7b, 0x6f,
	0xfb, 0x31, 0xf5, 0xcc, 0xd6, 0xdc, 0xbc, 0x38, 0x2b, 0x74, 0x82, 0xf3, 0xc9, 0x70, 0x11, 0x99,
	0x41, 0x9e, 0xb1, 0xc6, 0x4e, 0x00, 0x47, 0x18, 0xb6, 0x0e, 0x8f, 0x0c, 0xd9, 0x36, 0x0e, 0x19,
	0x5a, 0x9b, 0x89, 0x9d, 0x37, 0x57, 0x18, 0xcf, 0x5a, 0x42, 0xa4, 0xd1, 0xbe, 0x5b, 0x89, 0x41,
	0x08, 0x95, 0xe5, 0xba, 0x53, 0xd9, 0x69, 0x8d, 0x83, 0x82, 0x55, 0x65, 0xa1, 0x4a, 0x17, 0x0e,
	0x62, 0xda, 0x78, 0x1c, 0x64, 0x69, 0x56, 0xc2, 0x62, 0x25, 0x31, 0x51, 0xf1, 0x81, 0xbe, 0xd6,
	0x06, 0x56, 0x0f, 0x12, 0xa2, 0xcf, 0xbd, 0x9b, 0xb4, 0x38, 0x2d, 0xed, 0x68, 0x5b, 0xa3, 0x83,
	0x3b, 0x7c, 0xb9, 0x76, 0x13, 0x55, 0x1f, 0x8d, 0xa2, 0x9d, 0xda, 0x01, 0xd7, 0xeb, 0x62, 0xa7,
	0x66, 0x09, 0x9d, 0xbe, 0x7d, 0x7e, 0x6c, 0x23, 0xcf, 0x71, 0x66, 0x6d, 0x57, 0xc2, 0xe2, 0x5f,
	0xe8, 0xc5, 0x32, 0x84, 0x1c, 0x22, 0x54, 0xad, 0x16, 0xaa, 0x36, 0xbf, 0xdc, 0x2f, 0xbb, 0xb5,
	0x5c, 0xe8, 0x6e, 0x26, 0x4d, 0x9a, 0x39, 0xb4, 0x79, 0x13, 0x89, 0x12, 0xf4, 0x74, 0xb7, 0x51,
	0x73, 0xc8, 0x21, 0xe9, 0x35, 0xc9, 0x4d, 0xe5, 0x7a, 0x73, 0xef, 0x86, 0x83, 0x3d, 0x67, 0xce,
	0x45, 0x5b, 0x8f, 0x44, 0x8e, 0xec, 0x8b, 0xbc, 0x7b, 0x4e, 0x6d, 0x7a, 0xc7, 0xfc, 0x90, 0xfc,
	0xa2, 0xf1, 0x9f, 0x2e, 0xf5, 0x75, 0xcc, 0x8c, 0xcf, 0xbd, 0x8d, 0x23, 0xe0, 0x6b, 0x96, 0x30,
	0xa8, 0xf9, 0x1f, 0x00, 0xaf, 0x9f, 0x57, 0x13, 0x5a, 0x56, 0x11, 0x5a, 0xce, 0x47, 0x8d, 0xa5,
	0x91, 0x83, 0x1a, 0x5b, 0xbb, 0x12, 0x16, 0xdf, 0x07, 0x18, 0xfd, 0xa9, 0x90, 0x43, 0xd4, 0x34,
	0x07, 0x33, 0x65, 0x6e, 0x2d, 0xba, 0x36, 0x4b, 0x6a, 0x75, 0x3a, 0xe4, 0x5a, 0x3d, 0x76, 0xb8,
	0xb1, 0xa7, 0xbb, 0x8d, 0xe0, 0x27, 0x86, 0xba, 0xb3, 0x1b, 0xf8, 0xcb, 0x0f, 0x93, 0xb9, 0x32,
	0xcb, 0x6f, 0xf5, 0x18, 0xf7, 0xa4, 0x1e, 0x5b, 0x5a, 0x59, 0x5b, 0x41, 0x51, 0x20, 0xf2, 0xe4,
	0x3f, 0x03, 0xc0, 0x09, 0x11, 0x71, 0x60, 0x94, 0xb0, 0xf8, 0x15, 0x80, 0xd1, 0x06, 0x20, 0x4c,
	0xa2, 0xd7, 0x11, 0x0e, 0xb4, 0xf5, 0x74, 0x7e, 0xc0, 0xd7, 0x17, 0x13, 0x7d, 0xd1, 0xd3, 0x8d,
	0x91, 0x23, 0xfb, 0xd4, 0xee, 0x96, 0x7b, 0x73, 0x5f, 0x60, 0xe1, 0xa9, 0x6a, 0x6f, 0x6b, 0x4c,
	0x52, 0x93, 0x38, 0x75, 0xc8, 0x3d, 0xb1, 0xae, 0x09, 0xc3, 0x88, 0x36, 0x86, 0x59, 0xa2, 0x4d,
	0x3b, 0x8f, 0x61, 0xf7, 0x95, 0x86, 0xc9, 0xc4, 0x62, 0x85, 0x67, 0x32, 0xd9, 0x90, 0x22, 0x26,
	0x02, 0x51, 0xc2, 0xe2, 0x41, 0x9d, 0x3c, 0x64, 0xc3, 0xfb, 0x13, 0x5b, 0x22, 0x57, 0xd5, 0x30,
	0x73, 0xcf, 0x2d, 0x61, 0xbf, 0x89, 0xa3, 0x7b, 0x98, 0x11, 0x5d, 0xba, 0xe2, 0x1f, 0x6d, 0x2d,
	0x68, 0x10, 0x36, 0x7a, 0xe8, 0x83, 0x1d, 0x54, 0x91, 0x30, 0xbd, 0x2a, 0xc2, 0xbd, 0xee, 0x0a,
	0x87, 0x85, 0xd3, 0x70, 0x22, 0x25, 0x0b, 0xaa, 0x84, 0xc5, 0x77, 0x00, 0x46, 0x8b, 0x85, 0xc9,
	0xc9, 0x68, 0x28, 0x16, 0x31, 0x33, 0x52, 0x52, 0x56, 0x76, 0x3c, 0x7c, 0x4e, 0xb8, 0x93, 0xaf,
	0xb7, 0xac, 0xf8, 0xf8, 0x57, 0x60, 0x5c, 0x62, 0x89, 0xc3, 0x2a, 0x0e, 0x00, 0x0e, 0xab, 0x70,
	0x60, 0x94, 0xb0, 0xd8, 0xa2, 0xdb, 0x54, 0x05, 0xac, 0xaa, 0x62, 0x40, 0xe2, 0x50, 0x45, 0xea,
	0x9f, 0xf0, 0xb5, 0x86, 0x83, 0x09, 0xa2, 0x00, 0x8e, 0x22, 0x8a, 0x2b, 0x9e, 0x6c, 0xb0, 0x03,
	0xf0, 0x64, 0x83, 0x13, 0x46, 0x09, 0x8b, 0x4d, 0x00, 0xa3, 0x17, 0x84, 0x3b, 0xdd, 0x74, 0x20,
	0xbb, 0x44, 0x39, 0x49, 0x75, 0x68, 0x5f, 0xe3, 0x5d, 0xb9, 0xe3, 0xb9, 0x9a, 0x91, 0x5d, 0xaa,
	0x6e, 0x43, 0x7a, 0xa0, 0x40, 0x55, 0x1c, 0xbb, 0xd4, 0x3b, 0xb9, 0x4a, 0xd0, 0xb6, 0xd6, 0x09,
	0x89, 0x81, 0x94, 0xb0, 0xf8, 0x4f, 0x00, 0xa3, 0x8f, 0x81, 0x70, 0xa7, 0x9b, 0x52, 0x64, 0x57,
	0xbb, 0x1e, 0x5c, 0x5e, 0xd5, 0x69, 0xc7, 0xe2, 0xdd, 0xb9, 0x22, 0x5f, 0x8b, 0xda, 0xd1, 0xf8,
	0x73, 0x33, 0x3e, 0x47, 0x8f, 0x3a, 0xfc, 0xf8, 0x1c, 0x6d, 0x74, 0x8d, 0xcf, 0x99, 0xed, 0x4a,
	0x58, 0x6c, 0x06, 0x18, 0x2d, 0x62, 0xfc, 0xa8, 0xc4, 0x49, 0x40, 0x8e, 0x42, 0xb9, 0x4f, 0xd8,
	0xdc, 0xa7, 0x6c, 0xe3, 0x85, 0xee, 0x66, 0x9f, 0xda, 0xd2, 0xd1, 0xf7, 0x4e, 0xa3, 0xda, 0x79,
	0x88, 0x36, 0x1c, 0xdd, 0x16, 0xdd, 0x7a, 0x90, 0x2c, 0x59, 0x6d, 0xee, 0x52, 0xf7, 0xec, 0x51,
	0x5b, 0x3a, 0x7a, 0x0f, 0xaf, 0x8c, 0x34, 0x1c, 0x8e, 0x6c, 0x3a, 0xac, 0x36, 0x9d, 0xe0, 0x87,
	0xf9, 0xe8, 0x61, 0x4a, 0x67, 0x89, 0x53, 0x86, 0xd7, 0xc0, 0x58, 0xe0, 0xed, 0xee, 0xe7, 0x3c,
	0x37, 0xaf, 0x01, 0xbb, 0xbc, 0xd7, 0x88, 0x97, 0x8f, 0xf5, 0x47, 0xb2, 0x0b, 0xcc, 0x73, 0x73,
	0xb8, 0xea, 0xbc, 0x1d, 0x03, 0x8c, 0x17, 0xfb, 0x33, 0xa6, 0x2f, 0x9c, 0x33, 0xe3, 0x67, 0x2e,
	0xbb, 0x63, 0x69, 0x74, 0x8d, 0x9f, 0xb1, 0xd3, 0x5f, 0xc2, 0x38, 0x29, 0x9d, 0xf3, 0xb1, 0x3a,
	0x29, 0x93, 0x9b, 0xbe, 0x23, 0xa8, 0xc6, 0x62, 0xff, 0xbb, 0x1a, 0x7d, 0xe9, 0x1c, 0xec, 0x46,
	0x5f, 0x6c, 0x23, 0x8f, 0xbe, 0xac, 0xed, 0x4a, 0x58, 0xfc, 0x13, 0x8c, 0x02, 0x82, 0x40, 0xc4,
	0x8b, 0x05, 0xf5, 0x0f, 0xb8, 0x89, 0x1c, 0x1b, 0x91, 0xf5, 0x74, 0x6e, 0x54, 0xd7, 0x6e, 0x54,
	0x57, 0xd2, 0x8d, 0x63, 0xcc, 0x72, 0xa7, 0xf1, 0x49, 0x84, 0x0f, 0x5d, 0x11, 0x25, 0xa7, 0x1b,
	0xe6, 0x2d, 0x2d, 0xad, 0xac, 0x50, 0x16, 0x19, 0x2b, 0xb2, 0x5b, 0x97, 0x96, 0x56, 0x8e, 0x17,
	0xdf, 0x0e, 0xa0, 0x84, 0xc5, 0x72, 0xdd, 0xa9, 0x40, 0xe7, 0xc3, 0xcc, 0x9f, 0xae, 0x6c, 0xbc,
	0xb3, 0xc5, 0xdc, 0x15, 0x02, 0xa2, 0x4f, 0x7f, 0x9c, 0x68, 0x73, 0x8e, 0x84, 0x97, 0x96, 0xb2,
	0x73, 0xff, 0x08, 0xc0, 0x1b, 0x03, 0xd5, 0x95, 0x95, 0xa5, 0xc1, 0xb2, 0xc5, 0xc6, 0xe4, 0x6d,
	0x73, 0xb3, 0x35, 0x73, 0x7c, 0x8b, 0x0e, 0x08, 0x92, 0x9f, 0x73, 0x8f, 0x20, 0xa8, 0x3b, 0x77,
	0x47, 0x4e, 0xb7, 0xb1, 0x9e, 0x8f, 0x5c, 0xce, 0x6f, 0xfa, 0x4c, 0xef, 0x14, 0xc7, 0xd9, 0x68,
	0x86, 0xf6, 0xca, 0x4e, 0xf7, 0x6f, 0x00, 0xcd, 0x70, 0xa6, 0xa6, 0x47, 0xc0, 0x60, 0x8b, 0x38,
	0x47, 0x67, 0x03, 0x46, 0x9b, 0xf8, 0x5d, 0xc9, 0x80, 0x91, 0x33, 0xa9, 0x19, 0x42, 0x21, 0xa6,
	0x87, 0x85, 0xac, 0x26, 0xb8, 0xb5, 0x38, 0xdc, 0xf5, 0x3e, 0x61, 0x1c, 0xdf, 0x2a, 0x31, 0x19,
	0xfa, 0xff, 0x80, 0x71, 0x53, 0x5a, 0xd7, 0x36, 0xc6, 0x26, 0xb8, 0x1b, 0xe6, 0xcc, 0x3e, 0x4c,
	0x48, 0x0c, 0xa4, 0x84, 0xc5, 0x77, 0x01, 0x46, 0x8a, 0xe0, 0xe3, 0x4a, 0x5f, 0x56, 0x63, 0x0d,
	0x8a, 0x20, 0x1e, 0x2f, 0xde, 0xc6, 0x33, 0x50, 0x58, 0x81, 0xf0, 0x63, 0x23, 0xc1, 0xcd, 0x82,
	0x00, 0x57, 0x23, 0x9c, 0x59, 0xff, 0x9d, 0x09, 0x61, 0x94, 0xb0, 0xf8, 0x26, 0x46, 0x4f, 0x0b,
	0x77, 0xba, 0x49, 0x67, 0x16, 0x01, 0xfd, 0x10, 0xd4, 0xe3, 0x84, 0xb8, 0xcb, 0xd3, 0x94, 0xa9,
	0xc0, 0x58, 0x8a, 0x2e, 0xbb, 0xeb, 0x84, 0xe0, 0xec, 0x2e, 0x0f, 0x48, 0x09, 0x8b, 0x5f, 0x26,
	0xcb, 0x73, 0x91, 0xde, 0xd6, 0xe5, 0xa5, 0x2c, 0xc8, 0x1d, 0xd2, 0xcf, 0xb9, 0x7b, 0x17, 0x34,
	0xfa, 0x8d, 0x99, 0x86, 0x6e, 0xf4, 0xeb, 0x80, 0xe0, 0xd1, 0x2f, 0x07, 0x48, 0x09, 0x8b, 0x1b,
	0x01, 0x46, 0xf3, 0x85, 0xdb, 0x9d, 0xe2, 0x9d, 0x5d, 0xdc, 0xc5, 0x4b, 0x7a, 0xa7, 0x81, 0xc4,
	0x9a, 0x99, 0x8c, 0x10, 0xfa, 0x31, 0x80, 0x37, 0x51, 0x81, 0x6d, 0x59, 0xf2, 0x04, 0xae, 0x4c,
	0xb7, 0xaf, 0xf9, 0x73, 0x49, 0x40, 0x29, 0x61, 0x71, 0x29, 0x46, 0x0f, 0x0b, 0x77, 0xba, 0x89,
	0x7f, 0x76, 0xe5, 0x49, 0x6a, 0x82, 0x09, 0xe2, 0x1d, 0x4e, 0x4d, 0xe0, 0x58, 0xdb, 0x77, 0x00,
	0x1c, 0x6d, 0x88, 0x73, 0xcb, 0xe2, 0x3e, 0xc7, 0x17, 0xf9, 0xf6, 0xd5, 0xdd, 0x95, 0x0c, 0x18,
	0x71, 0x99, 0x17, 0x0a, 0xb7, 0x3b, 0x55, 0x01, 0xbb, 0x30, 0x37, 0x4d, 0x71, 0xaf, 0x38, 0xc1,
	0x45, 0x53, 0x38, 0x96, 0xf3, 0x6f, 0x00, 0xde, 0xea, 0x38, 0xaa, 0x9a, 0x4a, 0x23, 0xd1, 0x99,
	0x96, 0xd5, 0x1c, 0xf7, 0x25, 0x0d, 0xab, 0x84, 0xc5, 0x37, 0x30, 0x7a, 0xc4, 0x10, 0x39, 0x4e,
	0x25, 0xc1, 0xae, 0x31, 0x79, 0x4d, 0x72, 0x97, 0x30, 0x21, 0xde, 0xf9, 0xd6, 0x94, 0x38, 0xff,
	0x08, 0xac, 0x07, 0x7e, 0x14, 0x0e, 0x97, 0xd0, 0xfa, 0x3e, 0x71, 0x0f, 0xfc, 0x2c, 0x5c, 0x82,
	0x03, 0xbf, 0x15, 0x94, 0x58, 0x90, 0x76, 0x75, 0x49, 0x12, 0x23, 0x74, 0x2f, 0x96, 0x6d, 0x91,
	0x4c, 0x8b, 0x63, 0x91, 0x13, 0x04, 0x91, 0xbf, 0xc8, 0x60, 0x38, 0x5c, 0x61, 0xae, 0x62, 0xa3,
	0x07, 0xe6, 0x52, 0x23, 0x3c, 0x58, 0xb6, 0x28, 0x58, 0x5a, 0x19, 0xb2, 0x2c, 0xf2, 0x3e, 0xae,
	0xb9, 0xce, 0x81, 0xd4, 0x96, 0x39, 0x31, 0x79, 0x60, 0x25, 0x2c, 0x6e, 0x01, 0x18, 0x95, 0x0b,
	0x92, 0x45, 0x99, 0x10, 0xd5, 0xb7, 0x76, 0x8d, 0xae, 0xfd, 0x0e, 0xf5, 0x9e, 0x3d, 0x6b, 0x59,
	0xfb, 0xb4, 0xe4, 0x61, 0x13, 0x6f, 0x79, 0x8d, 0x31, 0x31, 0x2b, 0x3e, 0x36, 0x18, 0x3e, 0x9e,
	0xc7, 0x82, 0xb5, 0x65, 0x8b, 0x42, 0xe5, 0x09, 0xb7, 0x9c, 0x03, 0xe7, 0xb6, 0xe5, 0x5c, 0x50,
	0x25, 0x2c, 0x6e, 0x07, 0x18, 0xbd, 0x26, 0xe4, 0x71, 0x42, 0x5b, 0xba, 0x59, 0xa0, 0x36, 0xeb,
	0x1e, 0x41, 0x33, 0xa3, 0x96, 0x20, 0x63, 0x66, 0x4a, 0xe0, 0x89, 0xa9, 0x63, 0x09, 0x99, 0x9c,
	0x15, 0x1b, 0xeb, 0x3d, 0x94, 0xe7, 0xe7, 0x2c, 0x58, 0x10, 0x2a, 0xab, 0xb5, 0xa1, 0x83, 0xb7,
	0x46, 0x1e, 0xa0, 0x1b, 0xcf, 0xf3, 0x61, 0x95, 0xb0, 0x88, 0x75, 0xd2, 0xa0, 0x55, 0xe1, 0xd4,
	0x93, 0xc7, 0xb5, 0x23, 0xfb, 0xd6, 0x26, 0x5b, 0xd0, 0x8f, 0x5d, 0x1e, 0x0d, 0xaa, 0xa6, 0xfc,
	0x05, 0xdf, 0xdb, 0x15, 0xa2, 0xf3, 0xb2, 0xe2, 0xe2, 0x7f, 0x00, 0x7d, 0x6b, 0x99, 0x99, 0xae,
	0x21, 0xd1, 0xef, 0xe1, 0xa7, 0x4e, 0xdb, 0xc0, 0x34, 0x3c, 0xdc, 0x9b, 0x24, 0xa4, 0x12, 0x16,
	0x37, 0x00, 0x8c, 0x5e, 0xb1, 0x31, 0x08, 0xbb, 0x82, 0x33, 0x5b, 0xd4, 0xf5, 0x1b, 0xc9, 0x42,
	0xa9, 0x2d, 0x9d, 0x9f, 0x3c, 0x6c, 0x3c, 0x52, 0x60, 0x96, 0x1d, 0x93, 0x85, 0x9d, 0xe6, 0xed,
	0x97, 0xa7, 0x6a, 0x6b, 0x82, 0xb5, 0xa1, 0x85, 0x2b, 0xf8, 0xb7, 0x5f, 0x8c, 0x56, 0xd7, 0xdb,
	0x2f, 0x31, 0x00, 0x92, 0x5f, 0xf5, 0x79, 0x41, 0x30, 0x6a, 0xf3, 0xc4, 0x4c, 0xe1, 0xdc, 0xbb,
	0xcd, 0x88, 0xbf, 0x2d, 0x2f, 0x2c, 0x66, 0x60, 0xe9, 0x80, 0xfc, 0xd4, 0x30, 0x85, 0x8c, 0x51,
	0x41, 0xcc, 0xaa, 0xb3, 0x46, 0xbe, 0xa2, 0x39, 0x73, 0x9e, 0x17, 0x82, 0x9d, 0xf8, 0x1d, 0x71,
	0xdb, 0x49, 0xb4, 0xca, 0x74, 0x53, 0xb0, 0xd3, 0x31, 0xcf, 0xf9, 0xbc, 0x84, 0x2a, 0x8b, 0xad,
	0x9f, 0x30, 0x41, 0x2c, 0xb6, 0x06, 0xe1, 0x5b, 0x86, 0x55, 0x6f, 0xcc, 0xc1, 0xf5, 0xda, 0x0a,
	0x0b, 0xe0, 0x66, 0xd5, 0x5b, 0x61, 0x94, 0xb0, 0xb8, 0x18, 0xa3, 0xb9, 0xbc, 0xc5, 0x50, 0xae,
	0x92, 0xdc, 0xb2, 0x95, 0x9d, 0xb0, 0xfc, 0x2b, 0x2c, 0x74, 0x25, 0x2b, 0xf4, 0x2c, 0x82, 0x43,
	0x00, 0xde, 0x40, 0x92, 0xa2, 0xdc, 0xe8, 0xc8, 0xda, 0xca, 0xa1, 0x23, 0x3b, 0x80, 0x12, 0x16,
	0x9f, 0xd4, 0x73, 0xff, 0x8d, 0x2a, 0x0a, 0x0c, 0x1d, 0xe5, 0x58, 0x52, 0xaa, 0xec, 0x84, 0xe3,
	0xc8, 0xa4, 0x62, 0x90, 0xfe, 0x19, 0x80, 0x23, 0x29, 0xc5, 0x2e, 0x0a, 0xd6, 0x94, 0x57, 0x54,
	0x2d, 0x2c, 0x2e, 0x12, 0xb8, 0x79, 0x8e, 0xb1, 0x76, 0x4e, 0xc4, 0xc3, 0x09, 0xa2, 0x84, 0xc5,
	0x65, 0x18, 0x3d, 0x21, 0x18, 0x25, 0xa9, 0x9a, 0xd6, 0x46, 0xd7, 0xaf, 0x53, 0x8f, 0xee, 0x50,
	0x57, 0x19, 0xb2, 0xbd, 0xd0, 0xad, 0x25, 0xd1, 0x2d, 0x01, 0x87, 0x8b, 0x42, 0xa1, 0xe3, 0x96,
	0x97, 0xea, 0x9c, 0xf0, 0x4d, 0x00, 0x6f, 0x24, 0x34, 0x10, 0x5b, 0x12, 0x2f, 0x09, 0xd2, 0xba,
	0xa2, 0xf1, 0x09, 0x20, 0x94, 0xb0, 0x18, 0xc6, 0xe8, 0x51, 0xc1, 0x9a, 0xd6, 0xee, 0x98, 0x3c,
	0x2f, 0x67, 0xd2, 0x0d, 0x8a, 0x9f, 0x8d, 0xc2, 0xac, 0x46, 0xf8, 0xb6, 0x91, 0x1e, 0x10, 0x9b,
	0x89, 0xce, 0x15, 0x13, 0xe2, 0x4e, 0xd6, 0xe0, 0x8b, 0xcf, 0x25, 0x01, 0xa5, 0x84, 0xc5, 0x85,
	0x9a, 0x31, 0x66, 0x5c, 0xd0, 0xd4, 0x2f, 0x6c, 0x71, 0x76, 0x2b, 0x41, 0x3b, 0xff, 0x6c, 0x1b,
	0x5b, 0x8a, 0xce, 0x15, 0xdf, 0x05, 0x70, 0x24, 0x39, 0x94, 0xba, 0x13, 0x9b, 0xbd, 0x9d, 0x43,
	0x6c, 0x4e, 0x10, 0x25, 0x2c, 0x2a, 0x64, 0x6f, 0xd8, 0xf4, 0x48, 0xf7, 0xbd, 0x49, 0x02, 0x8a,
	0x2c, 0x28, 0x37, 0x3e, 0xa5, 0xb5, 0xc7, 0xd4, 0x05, 0x6d, 0x70, 0x51, 0x17, 0xb4, 0xd5, 0x5d,
	0x5d, 0x98, 0x00, 0x4a, 0x58, 0x7c, 0x01, 0xa3, 0x29, 0x3c, 0xbe, 0xe9, 0x3d, 0xdc, 0xa8, 0x36,
	0xbd, 0x93, 0xeb, 0xda, 0x42, 0xe4, 0x92, 0x78, 0x0b, 0x7f, 0xca, 0xc6, 0x84, 0xaf, 0xb7, 0x90,
	0x01, 0x5f, 0x49, 0x30, 0xd3, 0xbd, 0x23, 0x6e, 0xbb, 0x12, 0x16, 0x5f, 0xc6, 0xc8, 0x6f, 0xca,
	0x55, 0xe7, 0x6c, 0xc7, 0xb9, 0x31, 0x02, 0x33, 0xe7, 0x5b, 0x05, 0xb7, 0x39, 0x0b, 0x9f, 0x9a,
	0x77, 0x01, 0xdd, 0x30, 0x6c, 0x6d, 0x75, 0xbd, 0x0b, 0x68, 0x99, 0xf3, 0xab, 0x64, 0xce, 0xc4,
	0x05, 0xc2, 0x9b, 0xb3, 0x0b, 0x81, 0xb0, 0x78, 0xce, 0x8d, 0x87, 0xe7, 0x0f, 0x8d, 0x3c, 0x6d,
	0xb4, 0xb4, 0xbc, 0x82, 0x24, 0x3a, 0xf3, 0x10, 0x69, 0xb6, 0xba, 0xe5, 0x69, 0x33, 0x00, 0x4a,
	0x58, 0x7c, 0x56, 0x27, 0x0c, 0x8a, 0xea, 0xf6, 0x7d, 0xbd, 0xed, 0xfb, 0xc8, 0x09, 0x89, 0xe6,
	0xee, 0xb8, 0xb6, 0xf0, 0x91, 0x1c, 0xd4, 0xfa, 0x36, 0xb2, 0x99, 0x87, 0x97, 0x54, 0xd5, 0x86,
	0x16, 0x6a, 0x6a, 0xc1, 0x7e, 0x0b, 0xc3, 0x6c, 0xe0, 0xdc, 0xc2, 0x60, 0xda, 0xe8, 0x25, 0xdf,
	0xe7, 0x05, 0xa1, 0xaf, 0xe1, 0x74, 0xef, 0xd9, 0xb7, 0xfb, 0x76, 0xae, 0x8d, 0x34, 0x6d, 0x26,
	0x77, 0xbc, 0x73, 0x8b, 0xd8, 0xdf, 0x26, 0xfa, 0xd4, 0x3d, 0x5d, 0x3d, 0x5d, 0x9b, 0x56, 0x04,
	0x97, 0x54, 0x92, 0x10, 0x94, 0x11, 0xc1, 0x6a, 0xd6, 0xbe, 0x20, 0x5e, 0x09, 0x1d, 0x9e, 0xc8,
	0x7c, 0x26, 0x27, 0xf8, 0x0e, 0xd1, 0xa6, 0x74, 0x2b, 0xe8, 0x04, 0xf4, 0x67, 0xb1, 0x81, 0x24,
	0x9c, 0x07, 0xf0, 0x16, 0xde, 0x43, 0x87, 0x4f, 0x85, 0x6a, 0xed, 0xe6, 0xab, 0x0b, 0x18, 0xc7,
	0x7c, 0x75, 0x85, 0x54, 0xc2, 0x62, 0x29, 0xc3, 0xab, 0x6c, 0x65, 0x67, 0x9a, 0x0f, 0xeb, 0xda,
	0x42, 0x6c, 0x72, 0xd1, 0xc7, 0x4b, 0x44, 0x34, 0x2a, 0x29, 0x1b, 0x29, 0xda, 0xdf, 0x03, 0xf0,
	0x16, 0xde, 0x9b, 0x6b, 0x9c, 0x45, 0xb9, 0x80, 0x71, 0x16, 0xe5, 0x0a, 0x49, 0xd8, 0x43, 0x5f,
	0x94, 0xfd, 0x15, 0xb7, 0xd8, 0xa2, 0xf8, 0x2d, 0x24, 0x0b, 0x57, 0x4a, 0xb8, 0x28, 0xe1, 0xff,
	0x00, 0xbc, 0x85, 0xcd, 0x7e, 0x8f, 0xb3, 0x22, 0x17, 0x30, 0xce, 0x8a, 0x5c, 0x21, 0x95, 0xb0,
	0xb8, 0x09, 0x60, 0xf4, 0x25, 0x23, 0x67, 0xcc, 0x39, 0x71, 0x75, 0xcd, 0xea, 0xc8, 0xd6, 0x63,
	0x91, 0x8d, 0xed, 0xb9, 0xf7, 0x27, 0x04, 0xb9, 0xd0, 0xdd, 0xac, 0xb6, 0x7c, 0xd0, 0xbb, 0xfa,
	0x0c, 0x81, 0xac, 0x0a, 0x2e, 0x09, 0xa9, 0xb8, 0xb9, 0x3c, 0xa4, 0x94, 0x91, 0x3d, 0xcd, 0x4d,
	0x6a, 0x4f, 0x7f, 0x06, 0xe0, 0xcd, 0x9c, 0x7a, 0xe1, 0x1a, 0x02, 0xee, 0x76, 0xcd, 0xbf, 0xb5,
	0xad, 0xff, 0x9e, 0xe4, 0x00, 0x95, 0xb0, 0xf8, 0x3a, 0xc9, 0x98, 0x73, 0xd4, 0x1f, 0xb7, 0xaf,
	0x3e, 0x31, 0x08, 0xd9, 0x62, 0x21, 0xf1, 0x16, 0xff, 0x1e, 0x50, 0x97, 0x8b, 0x63, 0x46, 0xba,
	0x34, 0xbc, 0x2f, 0x99, 0xb9, 0x1b, 0x92, 0x71, 0x62, 0xf2, 0xc0, 0x54, 0x0c, 0x05, 0x84, 0xbb,
	0x13, 0x2e, 0xc5, 0x7a, 0x2d, 0x24, 0x21, 0x20, 0xff, 0x14, 0xed, 0x58, 0xb9, 0x2e, 0x50, 0xbb,
	0x00, 0x1c, 0xcd, 0x93, 0x1a, 0x76, 0xa7, 0x28, 0x0f, 0x86, 0xe3, 0x14, 0xe5, 0x83, 0x29, 0x61,
	0xf1, 0x29, 0x12, 0x33, 0x73, 0xc8, 0x98, 0x5c, 0xce, 0x6f, 0xf1, 0x6e, 0x0f, 0x98, 0xf3, 0xd7,
	0x48, 0xf3, 0x24, 0x80, 0xa3, 0x79, 0xd2, 0xc1, 0x3e, 0x79, 0x1e, 0x0c, 0x67, 0xf2, 0x7c, 0x30,
	0x25, 0x2c, 0xce, 0xa3, 0x93, 0xb7, 0xcb, 0x92, 0x5c, 0xce, 0x6f, 0x44, 0xfa, 0x4b, 0xf1, 0x27,
	0xaf, 0xa3, 0x9d, 0x27, 0x05, 0xec, 0x33, 0xe7, 0xc1, 0x70, 0x66, 0xce, 0x07, 0x33, 0xd1, 0xee,
	0x94, 0x14, 0xb9, 0x9c, 0xdf, 0xe2, 0xdd, 0x4c, 0xb0, 0xa0, 0xfd, 0x2f, 0x0d, 0x53, 0xdf, 0x36,
	0xf7, 0x09, 0x09, 0x89, 0xdf, 0xcd, 0xd4, 0xe7, 0xcc, 0xbc, 0x54, 0x33, 0x7c, 0xc6, 0xf6, 0x6e,
	0x3a, 0xa9, 0xb6, 0x6c, 0x63, 0x67, 0x19, 0x13, 0x01, 0xf1, 0x1a, 0xf9, 0xe9, 0xbe, 0xf6, 0x5d,
	0xf8, 0x85, 0xe1, 0x42, 0xb2, 0x8e, 0xaf, 0xb3, 0x7d, 0x62, 0x91, 0x65, 0xf0, 0xfc, 0xbd, 0x49,
	0x42, 0x9a, 0xd2, 0x2d, 0xce, 0xbc, 0x8d, 0x1b, 0xfc, 0x09, 0x41, 0x92, 0x91, 0x6e, 0x3a, 0x83,
	0xff, 0x0d, 0x80, 0x63, 0x08, 0x57, 0x1a, 0xb3, 0x79, 0x96, 0xbc, 0x4b, 0x20, 0x70, 0x59, 0xd7,
	0x06, 0xa4, 0xad, 0xef, 0xee, 0xa4, 0xe0, 0x94, 0xb0, 0xb8, 0x40, 0xdf, 0xb2, 0x98, 0x67, 0x88,
	0xb9, 0x2e, 0x40, 0xa9, 0x2e, 0x5e, 0x23, 0x3f, 0x52, 0x6e, 0xac, 0x85, 0x3e, 0xa6, 0xa0, 0xd0,
	0x2c, 0x9e, 0x31, 0x84, 0x57, 0x13, 0x2c, 0x89, 0x0b, 0xc4, 0x59, 0x92, 0x0b, 0x1c, 0x09, 0x55,
	0x3d, 0x2a, 0x4c, 0x60, 0x7d, 0x16, 0xce, 0x89, 0xd3, 0x1c, 0xee, 0xa4, 0xa0, 0x48, 0xe0, 0x5c,
	0x4a, 0xb0, 0x48, 0xe1, 0x9f, 0x00, 0x1c, 0x43, 0x78, 0x3a, 0xc1, 0x0a, 0xb9, 0x40, 0x9c, 0x15,
	0xba, 0xc0, 0x91, 0x0b, 0x05, 0xb6, 0xd3, 0xa8, 0xfb, 0x0a, 0x93, 0x81, 0x22, 0xdb, 0x98, 0x9b,
	0xc4, 0x36, 0xfe, 0xd4, 0x48, 0x78, 0xb0, 0xaf, 0x91, 0x27, 0x21, 0x38, 0x4b, 0xbc, 0x2b, 0x19,
	0x30, 0x73, 0x0f, 0x09, 0x47, 0x25, 0x5a, 0x61, 0x32, 0x50, 0xfc, 0xe4, 0x07, 0xc7, 0x1e, 0xfe,
	0xdc, 0x08, 0x56, 0xd9, 0xe6, 0xa4, 0x4b, 0x97, 0x7b, 0x13, 0xcf, 0xdd, 0x10, 0x2f, 0x52, 0xb2,
	0xa0, 0xc4, 0x0d, 0x3a, 0x4b, 0x18, 0xe7, 0x14, 0x1e, 0xf4, 0xa5, 0x5c, 0x22, 0x5c, 0x12, 0xb4,
	0x93, 0x0d, 0x14, 0xc6, 0xc7, 0x5d, 0x9e, 0x2e, 0x5a, 0xce, 0x7a, 0xe0, 0xd8, 0x38, 0x6f, 0xb5,
	0x0b, 0x13, 0x13, 0xdb, 0x06, 0xb1, 0x27, 0x0f, 0x73, 0xf3, 0x52, 0x80, 0x56, 0xc2, 0xe2, 0xd7,
	0x00, 0x46, 0xad, 0x40, 0xb8, 0xdb, 0x69, 0x3e, 0xa8, 0xb8, 0x39, 0x18, 0x0e, 0x47, 0xdb, 0x1a,
	0xd9, 0xd7, 0x6a, 0x72, 0x2b, 0x92, 0x04, 0xbc, 0xd0, 0xdd, 0x6c, 0xac, 0xd5, 0x47, 0xa6, 0xa2,
	0x1e, 0x5b, 0xdb, 0xd3, 0xd9, 0x65, 0x79, 0xc7, 0x9e, 0x3e, 0xb7, 0xa3, 0x3b, 0x37, 0x3a, 0x4e,
	0xa9, 0x5d, 0xad, 0xec, 0xbb, 0xf8, 0xf1, 0x05, 0x59, 0xa9, 0xf1, 0x1c, 0x0f, 0x90, 0x84, 0xaf,
	0x78, 0xe0, 0xd8, 0x38, 0x4f, 0x54, 0xdb, 0x11, 0x18, 0xff, 0x79, 0x74, 0x3b, 0x02, 0x13, 0xbc,
	0x7d, 0x2d, 0x76, 0x02, 0x8c, 0x36, 0xe9, 0x08, 0xb4, 0x9b, 0x30, 0x7c, 0x04, 0x96, 0x25, 0x09,
	0xc8, 0x45, 0x20, 0x95, 0x8d, 0xbb, 0x3e, 0xb2, 0x20, 0x90, 0x8f, 0x3a, 0x57, 0xf1, 0x68, 0xa0,
	0x4e, 0xe8, 0xf0, 0xc0, 0x5b, 0x5d, 0x5f, 0x40, 0xb5, 0x87, 0xc1, 0xe2, 0xbd, 0xc6, 0x6c, 0x0f,
	0x83, 0xc5, 0x7d, 0x56, 0x55, 0xc7, 0xd8, 0x06, 0x20, 0xdc, 0xed, 0x34, 0x9d, 0xf8, 0x18, 0xfb,
	0x52, 0x92, 0x80, 0xf1, 0x49, 0xce, 0xf0, 0xfd, 0xd8, 0x88, 0x6d, 0xc9, 0x92, 0x8a, 0xda, 0xf8,
	0xb2, 0x96, 0xa5, 0xb4, 0x95, 0x1e, 0xee, 0x19, 0xc7, 0x40, 0x59, 0xe2, 0x33, 0x0e, 0x83, 0xb3,
	0x89, 0xc9, 0x03, 0x2b, 0x61, 0x71, 0x9d, 0x1e, 0x35, 0xcb, 0xe3, 0xbe, 0x28, 0x15, 0x5d, 0x7f,
	0x4a, 0x6d, 0x6f, 0xe3, 0x60, 0x2e, 0x35, 0xf0, 0xf8, 0x02, 0xd9, 0xa4, 0x9a, 0xcd, 0x9e, 0x78,
	0x8f, 0x8c, 0xea, 0x62, 0x79, 0x72, 0xb2, 0x4b, 0x33, 0x84, 0x73, 0x7e, 0x6a, 0x1f, 0x28, 0x61,
	0xf1, 0xad, 0x38, 0xf8, 0x70, 0x2e, 0x8d, 0x8a, 0xec, 0xd4, 0xc0, 0xe3, 0x4b, 0x70, 0x8a, 0x0f,
	0x5d, 0x82, 0x6f, 0x33, 0xbd, 0xc2, 0x46, 0x19, 0x44, 0xbe, 0x57, 0x98, 0xa9, 0xb7, 0xcc, 0xf7,
	0x0a, 0xb3, 0xe5, 0x73, 0x45, 0x84, 0xd1, 0x6d, 0xc2, 0x08, 0xf6, 0x81, 0x8f, 0x5c, 0xcb, 0x5f,
	0x7c, 0xef, 0xef, 0x32, 0xda, 0x85, 0x4e, 0xaf, 0xdb, 0x4c, 0x67, 0xaa, 0xdb, 0xc4, 0x1c, 0x4f,
	0x37, 0xf0, 0x9d, 0xa9, 0x9c, 0x89, 0xb1, 0x25, 0xfa, 0x73, 0x2d, 0x7f, 0xf1, 0xdd, 0xa5, 0x96,
	0x89, 0x6d, 0x31, 0xc3, 0x65, 0x6e, 0x13, 0x73, 0xd4, 0x8c, 0xe7, 0x87, 0xcb, 0x2c, 0x13, 0xfb,
	0x02, 0xc5, 0x58, 0xac, 0xe8, 0x78, 0xae, 0xe5, 0x2f, 0xe2, 0x16, 0x95, 0xdc, 0x26, 0x26, 0x6c,
	0x36, 0x9c, 0xe5, 0xe6, 0xa4, 0x78, 0xce, 0x72, 0x76, 0x4e, 0x77, 0xc4, 0x6d, 0x37, 0xa7, 0xc4,
	0xd6, 0xc2, 0xcc, 0xb5, 0xfc, 0xc5, 0xf7, 0xd4, 0xc6, 0xa6, 0xf4, 0x21, 0xb0, 0x15, 0xa7, 0x76,
	0x8d, 0x91, 0xda, 0x6a, 0xb7, 0x72, 0x63, 0xa4, 0xf6, 0x2a, 0x9d, 0xe2, 0x63, 0xe4, 0x60, 0xeb,
	0x28, 0xd5, 0x99, 0xcb, 0xf9, 0x8d, 0x1f, 0x05, 0x35, 0xa6, 0xaa, 0x31, 0x42, 0x51, 0x29, 0x46,
	0xaf, 0x0a, 0xd3, 0x60, 0x5e, 0xef, 0x96, 0x77, 0xfb, 0x8e, 0x77, 0x46, 0x76, 0x6d, 0x54, 0xdf,
	0xda, 0x47, 0x7d, 0xbd, 0xa7, 0x3e, 0x51, 0x5b, 0x8e, 0x91, 0xf2, 0x74, 0x68, 0x5e, 0x49, 0x6f,
	0xc7, 0xa7, 0x91, 0x1d, 0x9b, 0x22, 0xdb, 0xd6, 0x45, 0xf6, 0xbd, 0x27, 0x67, 0xe6, 0x4f, 0xca,
	0x9f, 0x24, 0x4b, 0x00, 0xc8, 0x23, 0xf5, 0xda, 0x69, 0x65, 0xba, 0x7b, 0x77, 0xf2, 0x6b, 0x4a,
	0x75, 0x95, 0xdf, 0xf1, 0x4b, 0x69, 0x56, 0xb8, 0xa6, 0xba, 0xb6, 0xba, 0xf0, 0xff, 0x0f, 0x00,
	0x00, 0xff, 0xff, 0x4e, 0xee, 0xc9, 0x4c, 0x42, 0x68, 0x02, 0x00,
}
