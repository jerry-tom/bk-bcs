// Code generated by protoc-gen-go.
// source: mesos/fetcher/fetcher.proto
// DO NOT EDIT!

/*
Package mesos_fetcher is a generated protocol buffer package.

It is generated from these files:
	mesos/fetcher/fetcher.proto

It has these top-level messages:
	FetcherInfo
*/
package mesos_fetcher

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import mesos "mesos"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// What action the fetcher program is supposed to perform for a
// given URI.
type FetcherInfo_Item_Action int32

const (
	// Bypass the cache, download directly into the sandbox directory.
	FetcherInfo_Item_BYPASS_CACHE FetcherInfo_Item_Action = 0
	// Download a resource at the given URI to the fetcher's file cache.
	// Then retrieve the resource from the cache into the sandbox
	// directory.
	FetcherInfo_Item_DOWNLOAD_AND_CACHE FetcherInfo_Item_Action = 1
	// Copy or extract the resource from the cache, without downloading.
	FetcherInfo_Item_RETRIEVE_FROM_CACHE FetcherInfo_Item_Action = 2
)

var FetcherInfo_Item_Action_name = map[int32]string{
	0: "BYPASS_CACHE",
	1: "DOWNLOAD_AND_CACHE",
	2: "RETRIEVE_FROM_CACHE",
}
var FetcherInfo_Item_Action_value = map[string]int32{
	"BYPASS_CACHE":        0,
	"DOWNLOAD_AND_CACHE":  1,
	"RETRIEVE_FROM_CACHE": 2,
}

func (x FetcherInfo_Item_Action) Enum() *FetcherInfo_Item_Action {
	p := new(FetcherInfo_Item_Action)
	*p = x
	return p
}
func (x FetcherInfo_Item_Action) String() string {
	return proto.EnumName(FetcherInfo_Item_Action_name, int32(x))
}
func (x *FetcherInfo_Item_Action) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FetcherInfo_Item_Action_value, data, "FetcherInfo_Item_Action")
	if err != nil {
		return err
	}
	*x = FetcherInfo_Item_Action(value)
	return nil
}
func (FetcherInfo_Item_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 0}
}

// *
// Encodes the fetcher environment variable sent to the external fetcher
// program. See also "docs/fetcher.md" and
// "docs/fetcher-cache-internals.md". Note that part of these
// definitions are quoted verbatim in "docs/fetcher.md" and must be
// updated there whenever they change here.
type FetcherInfo struct {
	// Must be present when fetching into the sandbox in any way.
	SandboxDirectory *string `protobuf:"bytes,1,req,name=sandbox_directory,json=sandboxDirectory" json:"sandbox_directory,omitempty"`
	// Optional so that fetch requests that only use BYPASS_CACHE do not
	// need to specify an unused cache directory.
	CacheDirectory   *string             `protobuf:"bytes,2,opt,name=cache_directory,json=cacheDirectory" json:"cache_directory,omitempty"`
	Items            []*FetcherInfo_Item `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	User             *string             `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	FrameworksHome   *string             `protobuf:"bytes,5,opt,name=frameworks_home,json=frameworksHome" json:"frameworks_home,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *FetcherInfo) Reset()                    { *m = FetcherInfo{} }
func (m *FetcherInfo) String() string            { return proto.CompactTextString(m) }
func (*FetcherInfo) ProtoMessage()               {}
func (*FetcherInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FetcherInfo) GetSandboxDirectory() string {
	if m != nil && m.SandboxDirectory != nil {
		return *m.SandboxDirectory
	}
	return ""
}

func (m *FetcherInfo) GetCacheDirectory() string {
	if m != nil && m.CacheDirectory != nil {
		return *m.CacheDirectory
	}
	return ""
}

func (m *FetcherInfo) GetItems() []*FetcherInfo_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *FetcherInfo) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *FetcherInfo) GetFrameworksHome() string {
	if m != nil && m.FrameworksHome != nil {
		return *m.FrameworksHome
	}
	return ""
}

type FetcherInfo_Item struct {
	Uri              *mesos.CommandInfo_URI   `protobuf:"bytes,1,req,name=uri" json:"uri,omitempty"`
	Action           *FetcherInfo_Item_Action `protobuf:"varint,2,req,name=action,enum=mesos.fetcher.FetcherInfo_Item_Action" json:"action,omitempty"`
	CacheFilename    *string                  `protobuf:"bytes,3,opt,name=cache_filename,json=cacheFilename" json:"cache_filename,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *FetcherInfo_Item) Reset()                    { *m = FetcherInfo_Item{} }
func (m *FetcherInfo_Item) String() string            { return proto.CompactTextString(m) }
func (*FetcherInfo_Item) ProtoMessage()               {}
func (*FetcherInfo_Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *FetcherInfo_Item) GetUri() *mesos.CommandInfo_URI {
	if m != nil {
		return m.Uri
	}
	return nil
}

func (m *FetcherInfo_Item) GetAction() FetcherInfo_Item_Action {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return FetcherInfo_Item_BYPASS_CACHE
}

func (m *FetcherInfo_Item) GetCacheFilename() string {
	if m != nil && m.CacheFilename != nil {
		return *m.CacheFilename
	}
	return ""
}

func init() {
	proto.RegisterType((*FetcherInfo)(nil), "mesos.fetcher.FetcherInfo")
	proto.RegisterType((*FetcherInfo_Item)(nil), "mesos.fetcher.FetcherInfo.Item")
	proto.RegisterEnum("mesos.fetcher.FetcherInfo_Item_Action", FetcherInfo_Item_Action_name, FetcherInfo_Item_Action_value)
}

func init() { proto.RegisterFile("mesos/fetcher/fetcher.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x91, 0x5f, 0x6b, 0xe2, 0x40,
	0x14, 0xc5, 0x37, 0x89, 0x0a, 0x5e, 0x57, 0x57, 0x67, 0xc1, 0x0d, 0xee, 0x43, 0x83, 0xd0, 0x36,
	0x50, 0x48, 0x41, 0xe8, 0x6b, 0x21, 0x9a, 0x88, 0xa1, 0xad, 0xca, 0xd8, 0x3f, 0xf4, 0x29, 0xa4,
	0x71, 0x52, 0x43, 0x3b, 0x19, 0x99, 0x44, 0xda, 0x7e, 0xb9, 0x7e, 0x9a, 0x7e, 0x90, 0x92, 0x99,
	0x11, 0xf5, 0xa9, 0x4f, 0x09, 0xbf, 0x73, 0xee, 0x3d, 0xe7, 0x32, 0xf0, 0x9f, 0x92, 0x9c, 0xe5,
	0xe7, 0x09, 0x29, 0xe2, 0x15, 0xe1, 0xdb, 0xaf, 0xb3, 0xe6, 0xac, 0x60, 0xa8, 0x29, 0x44, 0x47,
	0xc1, 0x5e, 0x47, 0x7a, 0x25, 0x14, 0x8e, 0xfe, 0xa7, 0x01, 0x8d, 0xb1, 0x94, 0x83, 0x2c, 0x61,
	0xe8, 0x0c, 0x3a, 0x79, 0x94, 0x2d, 0x9f, 0xd8, 0x7b, 0xb8, 0x4c, 0x39, 0x89, 0x0b, 0xc6, 0x3f,
	0x4c, 0xcd, 0xd2, 0xed, 0x3a, 0x6e, 0x2b, 0xc1, 0xdb, 0x72, 0x74, 0x0a, 0x7f, 0xe2, 0x28, 0x5e,
	0x91, 0x3d, 0xab, 0x6e, 0x69, 0x76, 0x1d, 0xb7, 0x04, 0xde, 0x19, 0x2f, 0xa0, 0x9a, 0x16, 0x84,
	0xe6, 0xa6, 0x61, 0x19, 0x76, 0x63, 0x70, 0xe4, 0x1c, 0xf4, 0x72, 0xf6, 0x0a, 0x38, 0x41, 0x41,
	0x28, 0x96, 0x6e, 0x84, 0xa0, 0xb2, 0xc9, 0x09, 0x37, 0x2b, 0x62, 0xa9, 0xf8, 0x2f, 0x33, 0x13,
	0x1e, 0x51, 0xf2, 0xc6, 0xf8, 0x4b, 0x1e, 0xae, 0x18, 0x25, 0x66, 0x55, 0x66, 0xee, 0xf0, 0x84,
	0x51, 0xd2, 0xfb, 0xd2, 0xa0, 0x52, 0x2e, 0x43, 0x36, 0x18, 0x1b, 0x9e, 0x8a, 0x23, 0x1a, 0x83,
	0xae, 0x8a, 0x1e, 0x31, 0x4a, 0xa3, 0x6c, 0x29, 0x22, 0xef, 0x70, 0x80, 0x4b, 0x0b, 0xba, 0x84,
	0x5a, 0x14, 0x17, 0x29, 0xcb, 0x4c, 0xdd, 0xd2, 0xed, 0xd6, 0xe0, 0xe4, 0x87, 0x9e, 0x8e, 0x2b,
	0xdc, 0x58, 0x4d, 0xa1, 0x63, 0x90, 0x87, 0x87, 0x49, 0xfa, 0x4a, 0xb2, 0x88, 0x12, 0xd3, 0x10,
	0xd5, 0x9a, 0x82, 0x8e, 0x15, 0xec, 0x5f, 0x41, 0x4d, 0x0e, 0xa2, 0x36, 0xfc, 0x1e, 0x3e, 0xce,
	0xdd, 0xc5, 0x22, 0x1c, 0xb9, 0xa3, 0x89, 0xdf, 0xfe, 0x85, 0xba, 0x80, 0xbc, 0xd9, 0xc3, 0xf4,
	0x7a, 0xe6, 0x7a, 0xa1, 0x3b, 0xf5, 0x14, 0xd7, 0xd0, 0x3f, 0xf8, 0x8b, 0xfd, 0x5b, 0x1c, 0xf8,
	0xf7, 0x7e, 0x38, 0xc6, 0xb3, 0x1b, 0x25, 0xe8, 0xc3, 0x3e, 0x98, 0x8c, 0x3f, 0x3b, 0xd1, 0xba,
	0x8c, 0x38, 0xec, 0x3b, 0xac, 0xcd, 0xcb, 0x37, 0xce, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd2,
	0x02, 0x0a, 0x25, 0x24, 0x02, 0x00, 0x00,
}
