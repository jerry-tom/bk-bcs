/*
 * Tencent is pleased to support the open source community by making Blueking Container Service available.
 * Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "bk-bcs/bcs-k8s/tkex-statefulsetplus-operator/pkg/apis/tkex/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StatefulSetPlusLister helps list StatefulSetPluses.
type StatefulSetPlusLister interface {
	// List lists all StatefulSetPluses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StatefulSetPlus, err error)
	// StatefulSetPluses returns an object that can list and get StatefulSetPluses.
	StatefulSetPluses(namespace string) StatefulSetPlusNamespaceLister
	StatefulSetPlusListerExpansion
}

// statefulSetPlusLister implements the StatefulSetPlusLister interface.
type statefulSetPlusLister struct {
	indexer cache.Indexer
}

// NewStatefulSetPlusLister returns a new StatefulSetPlusLister.
func NewStatefulSetPlusLister(indexer cache.Indexer) StatefulSetPlusLister {
	return &statefulSetPlusLister{indexer: indexer}
}

// List lists all StatefulSetPluses in the indexer.
func (s *statefulSetPlusLister) List(selector labels.Selector) (ret []*v1alpha1.StatefulSetPlus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StatefulSetPlus))
	})
	return ret, err
}

// StatefulSetPluses returns an object that can list and get StatefulSetPluses.
func (s *statefulSetPlusLister) StatefulSetPluses(namespace string) StatefulSetPlusNamespaceLister {
	return statefulSetPlusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StatefulSetPlusNamespaceLister helps list and get StatefulSetPluses.
type StatefulSetPlusNamespaceLister interface {
	// List lists all StatefulSetPluses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StatefulSetPlus, err error)
	// Get retrieves the StatefulSetPlus from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StatefulSetPlus, error)
	StatefulSetPlusNamespaceListerExpansion
}

// statefulSetPlusNamespaceLister implements the StatefulSetPlusNamespaceLister
// interface.
type statefulSetPlusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StatefulSetPluses in the indexer for a given namespace.
func (s statefulSetPlusNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StatefulSetPlus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StatefulSetPlus))
	})
	return ret, err
}

// Get retrieves the StatefulSetPlus from the indexer for a given namespace and name.
func (s statefulSetPlusNamespaceLister) Get(name string) (*v1alpha1.StatefulSetPlus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("statefulsetplus"), name)
	}
	return obj.(*v1alpha1.StatefulSetPlus), nil
}
