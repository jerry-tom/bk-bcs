// Code generated by protoc-gen-go.
// source: common.proto
// DO NOT EDIT!

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	common.proto

It has these top-level messages:
	Endpoint
	CommitMetadata
	ReleaseMetadata
	CommitResult
	Business
	App
	Cluster
	Zone
	ConfigSet
	Configs
	Commit
	MultiCommit
	Release
	MultiRelease
	AppInstance
	AppInstanceRelease
	ReportInfo
	Strategy
	ShardingDB
	Sharding
	Audit
	ConfigTemplateSet
	ConfigTemplate
	TemplateVersion
	ConfigTemplateBinding
	Variable
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ErrCode 错误码
type ErrCode int32

const (
	// 0 成功
	ErrCode_E_OK ErrCode = 0
	// 1000 网关服务, 节点调用失败
	ErrCode_E_GW_SYSTEM_UNKONW ErrCode = 1000
	// 2000 接入服务, 节点调用失败
	ErrCode_E_AS_SYSTEM_UNKONW ErrCode = 2000
	// 2001 接入服务, 参数校验失败
	ErrCode_E_AS_PARAMS_INVALID ErrCode = 2001
	// 2002 接入服务, 认证校验失败
	ErrCode_E_AS_AUTH_FAILED ErrCode = 2002
	// 2003 接入服务, 未授权的操作
	ErrCode_E_AS_NOT_AUTHED ErrCode = 2003
	// 3000 模板服务, 节点调用失败
	ErrCode_E_TPL_SYSTEM_UNKONW ErrCode = 3000
	// 3001 模板服务, 参数校验失败
	ErrCode_E_TPL_PARAMS_INVALID ErrCode = 3001
	// 3002 模板服务, 渲染前置检查失败，检查模板和模板规则内容是否正确
	ErrCode_E_TPL_RENDER_CHECK_ERROR ErrCode = 3002
	// 3003 模板服务, 渲染规则非法
	ErrCode_E_TPL_INVALID_TEMPLATE_RULE ErrCode = 3003
	// 3004 模板服务, 渲染规则类型非法
	ErrCode_E_TPL_INVALID_TEMPLATE_RULE_TYPE ErrCode = 3004
	// 3005 模板服务, 渲染失败
	ErrCode_E_TPL_RENDER_FAILED ErrCode = 3005
	// 3006 模板服务, 预览渲染失败, 集群信息未知
	ErrCode_E_TPL_NO_CLUSTER_TO_RENDER ErrCode = 3006
	// 3007 模板服务, 预览渲染失败, 大区信息未知
	ErrCode_E_TPL_NO_ZONE_TO_RENDER ErrCode = 3007
	// 3008 模版服务, 创建绑定失败, 模版信息未知
	ErrCode_E_TPL_NO_TEMPLATE_TO_BIND ErrCode = 3008
	// 3009 模版服务, 创建绑定失败, 模版版本信息未知
	ErrCode_E_TPL_NO_VERSION_TO_BIND ErrCode = 3009
	// 3010 模版服务, 创建绑定失败, App信息未知
	ErrCode_E_TPL_NO_APP_TO_BIND ErrCode = 3010
	// 3011 模版服务, 创建绑定失败, 集群信息未知
	ErrCode_E_TPL_NO_CLUSTER_TO_BIND ErrCode = 3011
	// 3012 模版服务, 创建绑定失败, 大区信息未知
	ErrCode_E_TPL_NO_ZONE_TO_BIND ErrCode = 3012
	// 3013 模版服务, 创建绑定失败，创建configSet失败
	ErrCode_E_TPL_CREATE_CFGSET_FAILED ErrCode = 3013
	// 3014 模版服务, 创建绑定失败, 创建commit失败
	ErrCode_E_TPL_CREATE_COMMIT_FAILED ErrCode = 3014
	// 3015 模版服务, 更新绑定失败, configSet信息未知
	ErrCode_E_TPL_NO_CFGSET_TO_SYNC ErrCode = 3015
	// 3016 模版服务, 获取变量失败
	ErrCode_E_TPL_GET_VARS_FAILED ErrCode = 3016
	// 4000 业务逻辑服务, 节点调用失败
	ErrCode_E_BS_SYSTEM_UNKONW ErrCode = 4000
	// 4001 业务逻辑服务, 参数校验失败
	ErrCode_E_BS_PARAMS_INVALID ErrCode = 4001
	// 4002 业务逻辑服务, 无法根据未提交确认的Commit创建配置发布版本
	ErrCode_E_BS_CREATE_RELEASE_WITH_UNCONFIRMED_COMMIT ErrCode = 4002
	// 4003 业务逻辑服务, 该Commit已撤销，无法再进行Confirm操作
	ErrCode_E_BS_COMMIT_ALREADY_CANCELED ErrCode = 4003
	// 4004 业务逻辑服务, 目标资源已存在无法重复创建
	ErrCode_E_BS_ALREADY_EXISTS ErrCode = 4004
	// 4005 业务逻辑服务, 无法回滚一个未发布的版本
	ErrCode_E_BS_ROLLBACK_UNPUBLISHED_RELEASE ErrCode = 4005
	// 5000 数据管理服务, 通用未知异常
	ErrCode_E_DM_SYSTEM_UNKONW ErrCode = 5000
	// 5001 数据管理服务, 参数校验失败
	ErrCode_E_DM_PARAMS_INVALID ErrCode = 5001
	// 5002 数据管理服务, 指定目标对象不存在
	ErrCode_E_DM_NOT_FOUND ErrCode = 5002
	// 5003 数据管理服务, 指定目标对象已存在
	ErrCode_E_DM_ALREADY_EXISTS ErrCode = 5003
	// 5004 数据管理服务, 获取数据存储分片失败
	ErrCode_E_DM_ERR_DBSHARDING ErrCode = 5004
	// 5005 数据管理服务, 数据操作执行异常
	ErrCode_E_DM_DB_EXEC_ERR ErrCode = 5005
	// 5006 数据管理服务, 更新失败, 无满足限定条件的目标对象
	ErrCode_E_DM_DB_UPDATE_ERR ErrCode = 5006
	// 5007 数据管理服务, 加锁指定配置集合失败
	ErrCode_E_DM_CFGSET_LOCK_FAILED ErrCode = 5007
	// 5008 数据管理服务, 解锁指定配置集合失败
	ErrCode_E_DM_CFGSET_UNLOCK_FAILED ErrCode = 5008
	// 5009 数据管理服务, 配置版本发布失败，无满足限定条件的目标版本对象
	ErrCode_E_DM_PUBLISH_RELEASE_FAILED ErrCode = 5009
	// 5010 数据管理服务, 存在未完结的Commit提交，无法重新创建Commit
	ErrCode_E_DM_ALREADY_EXISTS_UNCONFIRMED_COMMIT ErrCode = 5010
	// 5011 数据管理服务, 关联的Commit已提交或已撤销，无法对其配置实体内容再次修改
	ErrCode_E_DM_COMMIT_NOT_INIT_STATE ErrCode = 5011
	// 5012 数据管理服务, 无法找到指定配置版本的实际配置内如（发布策略触达范围有误或渲染规则有误）
	ErrCode_E_DM_RELEASE_CONFIGS_NOT_FOUND ErrCode = 5012
	// 6000 GSE控制器, 节点调用失败
	ErrCode_E_GSE_SYSTEM_UNKONW ErrCode = 6000
	// 6001 GSE控制器, 参数校验失败
	ErrCode_E_GSE_PARAMS_INVALID ErrCode = 6001
	// 6002 BCS控制器, 配置版本发布消息解析失败
	ErrCode_E_GSE_MARSHAL_PUBLISHING_FAILED ErrCode = 6002
	// 6003 GSE控制器, 配置版本任务发布失败
	ErrCode_E_GSE_PUBLISH_RELEASE_FAILED ErrCode = 6003
	// 6004 BCS控制器, 配置版本已执行发布，请勿重复执行
	ErrCode_E_GSE_ALREADY_PUBLISHED ErrCode = 6004
	// 6005 BCS控制器, 配置版本已撤销，无法执行发布
	ErrCode_E_GSE_ALREADY_CANCELED ErrCode = 6005
	// 7000 BCS控制器, 节点调用失败
	ErrCode_E_BCS_SYSTEM_UNKONW ErrCode = 7000
	// 7001 BCS控制器, 参数校验失败
	ErrCode_E_BCS_PARAMS_INVALID ErrCode = 7001
	// 7002 BCS控制器, 配置版本发布消息解析失败
	ErrCode_E_BCS_MARSHAL_PUBLISHING_FAILED ErrCode = 7002
	// 7003 BCS控制器, 广播配置版本发布消息失败
	ErrCode_E_BCS_PUBLISH_RELEASE_FAILED ErrCode = 7003
	// 7004 BCS控制器, 配置版本已执行发布，请勿重复执行
	ErrCode_E_BCS_ALREADY_PUBLISHED ErrCode = 7004
	// 7005 BCS控制器, 配置版本已撤销，无法执行发布
	ErrCode_E_BCS_ALREADY_CANCELED ErrCode = 7005
	// 8000 会话链接服务, 节点调用失败
	ErrCode_E_CONNS_SYSTEM_UNKONW ErrCode = 8000
	// 8001 会话链接服务, 参数校验失败
	ErrCode_E_CONNS_PARAMS_INVALID ErrCode = 8001
	// 8002 会话链接服务, BCS sidecar接入调度失败
	ErrCode_E_CONNS_SCHEDULE_RES_FAILED ErrCode = 8002
	// 9000 逻辑集成服务, 节点调用失败
	ErrCode_E_ITG_SYSTEM_UNKONW ErrCode = 9000
	// 9001 逻辑集成服务, 参数校验失败
	ErrCode_E_ITG_PARAMS_INVALID ErrCode = 9001
	// 9002 逻辑集成服务, 操作集合描述文件解析失败
	ErrCode_E_ITG_METADATA_INVALID ErrCode = 9002
	// 9003 逻辑集成服务, 未知操作集合描述类型
	ErrCode_E_ITG_UNKNOW_METADATA_KIND ErrCode = 9003
	// 9004 逻辑集成服务, 未知操作集合描述类型
	ErrCode_E_ITG_UNKNOW_METADATA_OP ErrCode = 9004
	// 9005 逻辑集成服务, 创建版本发布策略失败
	ErrCode_E_ITG_CREATE_STRATEGY_FAILED ErrCode = 9005
	// 9006 逻辑集成服务, 创建集群结构失败
	ErrCode_E_ITG_CONSTRUCT_CLUSTER_FAILED ErrCode = 9006
	// 9007 逻辑集成服务, 创建大区结构失败
	ErrCode_E_ITG_CONSTRUCT_ZONE_FAILED ErrCode = 9007
	// 10000 通道服务, 节点调用失败
	ErrCode_E_TS_SYSTEM_UNKONW ErrCode = 10000
	// 10001 通道服务, 参数校验失败
	ErrCode_E_TS_PARAMS_INVALID ErrCode = 10001
	// 10002 通道服务, 配置版本发布失败
	ErrCode_E_TS_PUBLISH_RELEASE_FAILED ErrCode = 10002
	// 11000 实例服务, 节点调用失败
	ErrCode_E_IS_SYSTEM_UNKONW ErrCode = 11000
	// 11001 实例服务, 参数校验失败
	ErrCode_E_IS_PARAMS_INVALID ErrCode = 11001
)

var ErrCode_name = map[int32]string{
	0:     "E_OK",
	1000:  "E_GW_SYSTEM_UNKONW",
	2000:  "E_AS_SYSTEM_UNKONW",
	2001:  "E_AS_PARAMS_INVALID",
	2002:  "E_AS_AUTH_FAILED",
	2003:  "E_AS_NOT_AUTHED",
	3000:  "E_TPL_SYSTEM_UNKONW",
	3001:  "E_TPL_PARAMS_INVALID",
	3002:  "E_TPL_RENDER_CHECK_ERROR",
	3003:  "E_TPL_INVALID_TEMPLATE_RULE",
	3004:  "E_TPL_INVALID_TEMPLATE_RULE_TYPE",
	3005:  "E_TPL_RENDER_FAILED",
	3006:  "E_TPL_NO_CLUSTER_TO_RENDER",
	3007:  "E_TPL_NO_ZONE_TO_RENDER",
	3008:  "E_TPL_NO_TEMPLATE_TO_BIND",
	3009:  "E_TPL_NO_VERSION_TO_BIND",
	3010:  "E_TPL_NO_APP_TO_BIND",
	3011:  "E_TPL_NO_CLUSTER_TO_BIND",
	3012:  "E_TPL_NO_ZONE_TO_BIND",
	3013:  "E_TPL_CREATE_CFGSET_FAILED",
	3014:  "E_TPL_CREATE_COMMIT_FAILED",
	3015:  "E_TPL_NO_CFGSET_TO_SYNC",
	3016:  "E_TPL_GET_VARS_FAILED",
	4000:  "E_BS_SYSTEM_UNKONW",
	4001:  "E_BS_PARAMS_INVALID",
	4002:  "E_BS_CREATE_RELEASE_WITH_UNCONFIRMED_COMMIT",
	4003:  "E_BS_COMMIT_ALREADY_CANCELED",
	4004:  "E_BS_ALREADY_EXISTS",
	4005:  "E_BS_ROLLBACK_UNPUBLISHED_RELEASE",
	5000:  "E_DM_SYSTEM_UNKONW",
	5001:  "E_DM_PARAMS_INVALID",
	5002:  "E_DM_NOT_FOUND",
	5003:  "E_DM_ALREADY_EXISTS",
	5004:  "E_DM_ERR_DBSHARDING",
	5005:  "E_DM_DB_EXEC_ERR",
	5006:  "E_DM_DB_UPDATE_ERR",
	5007:  "E_DM_CFGSET_LOCK_FAILED",
	5008:  "E_DM_CFGSET_UNLOCK_FAILED",
	5009:  "E_DM_PUBLISH_RELEASE_FAILED",
	5010:  "E_DM_ALREADY_EXISTS_UNCONFIRMED_COMMIT",
	5011:  "E_DM_COMMIT_NOT_INIT_STATE",
	5012:  "E_DM_RELEASE_CONFIGS_NOT_FOUND",
	6000:  "E_GSE_SYSTEM_UNKONW",
	6001:  "E_GSE_PARAMS_INVALID",
	6002:  "E_GSE_MARSHAL_PUBLISHING_FAILED",
	6003:  "E_GSE_PUBLISH_RELEASE_FAILED",
	6004:  "E_GSE_ALREADY_PUBLISHED",
	6005:  "E_GSE_ALREADY_CANCELED",
	7000:  "E_BCS_SYSTEM_UNKONW",
	7001:  "E_BCS_PARAMS_INVALID",
	7002:  "E_BCS_MARSHAL_PUBLISHING_FAILED",
	7003:  "E_BCS_PUBLISH_RELEASE_FAILED",
	7004:  "E_BCS_ALREADY_PUBLISHED",
	7005:  "E_BCS_ALREADY_CANCELED",
	8000:  "E_CONNS_SYSTEM_UNKONW",
	8001:  "E_CONNS_PARAMS_INVALID",
	8002:  "E_CONNS_SCHEDULE_RES_FAILED",
	9000:  "E_ITG_SYSTEM_UNKONW",
	9001:  "E_ITG_PARAMS_INVALID",
	9002:  "E_ITG_METADATA_INVALID",
	9003:  "E_ITG_UNKNOW_METADATA_KIND",
	9004:  "E_ITG_UNKNOW_METADATA_OP",
	9005:  "E_ITG_CREATE_STRATEGY_FAILED",
	9006:  "E_ITG_CONSTRUCT_CLUSTER_FAILED",
	9007:  "E_ITG_CONSTRUCT_ZONE_FAILED",
	10000: "E_TS_SYSTEM_UNKONW",
	10001: "E_TS_PARAMS_INVALID",
	10002: "E_TS_PUBLISH_RELEASE_FAILED",
	11000: "E_IS_SYSTEM_UNKONW",
	11001: "E_IS_PARAMS_INVALID",
}
var ErrCode_value = map[string]int32{
	"E_OK":                                        0,
	"E_GW_SYSTEM_UNKONW":                          1000,
	"E_AS_SYSTEM_UNKONW":                          2000,
	"E_AS_PARAMS_INVALID":                         2001,
	"E_AS_AUTH_FAILED":                            2002,
	"E_AS_NOT_AUTHED":                             2003,
	"E_TPL_SYSTEM_UNKONW":                         3000,
	"E_TPL_PARAMS_INVALID":                        3001,
	"E_TPL_RENDER_CHECK_ERROR":                    3002,
	"E_TPL_INVALID_TEMPLATE_RULE":                 3003,
	"E_TPL_INVALID_TEMPLATE_RULE_TYPE":            3004,
	"E_TPL_RENDER_FAILED":                         3005,
	"E_TPL_NO_CLUSTER_TO_RENDER":                  3006,
	"E_TPL_NO_ZONE_TO_RENDER":                     3007,
	"E_TPL_NO_TEMPLATE_TO_BIND":                   3008,
	"E_TPL_NO_VERSION_TO_BIND":                    3009,
	"E_TPL_NO_APP_TO_BIND":                        3010,
	"E_TPL_NO_CLUSTER_TO_BIND":                    3011,
	"E_TPL_NO_ZONE_TO_BIND":                       3012,
	"E_TPL_CREATE_CFGSET_FAILED":                  3013,
	"E_TPL_CREATE_COMMIT_FAILED":                  3014,
	"E_TPL_NO_CFGSET_TO_SYNC":                     3015,
	"E_TPL_GET_VARS_FAILED":                       3016,
	"E_BS_SYSTEM_UNKONW":                          4000,
	"E_BS_PARAMS_INVALID":                         4001,
	"E_BS_CREATE_RELEASE_WITH_UNCONFIRMED_COMMIT": 4002,
	"E_BS_COMMIT_ALREADY_CANCELED":                4003,
	"E_BS_ALREADY_EXISTS":                         4004,
	"E_BS_ROLLBACK_UNPUBLISHED_RELEASE":           4005,
	"E_DM_SYSTEM_UNKONW":                          5000,
	"E_DM_PARAMS_INVALID":                         5001,
	"E_DM_NOT_FOUND":                              5002,
	"E_DM_ALREADY_EXISTS":                         5003,
	"E_DM_ERR_DBSHARDING":                         5004,
	"E_DM_DB_EXEC_ERR":                            5005,
	"E_DM_DB_UPDATE_ERR":                          5006,
	"E_DM_CFGSET_LOCK_FAILED":                     5007,
	"E_DM_CFGSET_UNLOCK_FAILED":                   5008,
	"E_DM_PUBLISH_RELEASE_FAILED":                 5009,
	"E_DM_ALREADY_EXISTS_UNCONFIRMED_COMMIT":      5010,
	"E_DM_COMMIT_NOT_INIT_STATE":                  5011,
	"E_DM_RELEASE_CONFIGS_NOT_FOUND":              5012,
	"E_GSE_SYSTEM_UNKONW":                         6000,
	"E_GSE_PARAMS_INVALID":                        6001,
	"E_GSE_MARSHAL_PUBLISHING_FAILED":             6002,
	"E_GSE_PUBLISH_RELEASE_FAILED":                6003,
	"E_GSE_ALREADY_PUBLISHED":                     6004,
	"E_GSE_ALREADY_CANCELED":                      6005,
	"E_BCS_SYSTEM_UNKONW":                         7000,
	"E_BCS_PARAMS_INVALID":                        7001,
	"E_BCS_MARSHAL_PUBLISHING_FAILED":             7002,
	"E_BCS_PUBLISH_RELEASE_FAILED":                7003,
	"E_BCS_ALREADY_PUBLISHED":                     7004,
	"E_BCS_ALREADY_CANCELED":                      7005,
	"E_CONNS_SYSTEM_UNKONW":                       8000,
	"E_CONNS_PARAMS_INVALID":                      8001,
	"E_CONNS_SCHEDULE_RES_FAILED":                 8002,
	"E_ITG_SYSTEM_UNKONW":                         9000,
	"E_ITG_PARAMS_INVALID":                        9001,
	"E_ITG_METADATA_INVALID":                      9002,
	"E_ITG_UNKNOW_METADATA_KIND":                  9003,
	"E_ITG_UNKNOW_METADATA_OP":                    9004,
	"E_ITG_CREATE_STRATEGY_FAILED":                9005,
	"E_ITG_CONSTRUCT_CLUSTER_FAILED":              9006,
	"E_ITG_CONSTRUCT_ZONE_FAILED":                 9007,
	"E_TS_SYSTEM_UNKONW":                          10000,
	"E_TS_PARAMS_INVALID":                         10001,
	"E_TS_PUBLISH_RELEASE_FAILED":                 10002,
	"E_IS_SYSTEM_UNKONW":                          11000,
	"E_IS_PARAMS_INVALID":                         11001,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}
func (ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// CommonState 通用状态
type CommonState int32

const (
	// 0 正常
	CommonState_CS_VALID CommonState = 0
	// 1 异常
	CommonState_CS_INVALID CommonState = 1
)

var CommonState_name = map[int32]string{
	0: "CS_VALID",
	1: "CS_INVALID",
}
var CommonState_value = map[string]int32{
	"CS_VALID":   0,
	"CS_INVALID": 1,
}

func (x CommonState) String() string {
	return proto.EnumName(CommonState_name, int32(x))
}
func (CommonState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// ReleaseState 发布版本状态
type ReleaseState int32

const (
	// 0 初始化
	ReleaseState_RS_INIT ReleaseState = 0
	// 1 已发布
	ReleaseState_RS_PUBLISHED ReleaseState = 1
	// 2 已撤销
	ReleaseState_RS_CANCELED ReleaseState = 2
	// 3 已回滚
	ReleaseState_RS_ROLLBACKED ReleaseState = 3
)

var ReleaseState_name = map[int32]string{
	0: "RS_INIT",
	1: "RS_PUBLISHED",
	2: "RS_CANCELED",
	3: "RS_ROLLBACKED",
}
var ReleaseState_value = map[string]int32{
	"RS_INIT":       0,
	"RS_PUBLISHED":  1,
	"RS_CANCELED":   2,
	"RS_ROLLBACKED": 3,
}

func (x ReleaseState) String() string {
	return proto.EnumName(ReleaseState_name, int32(x))
}
func (ReleaseState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// AppInstanceState 应用实例状态
type AppInstanceState int32

const (
	// 0 离线
	AppInstanceState_INSS_OFFLINE AppInstanceState = 0
	// 1 在线
	AppInstanceState_INSS_ONLINE AppInstanceState = 1
)

var AppInstanceState_name = map[int32]string{
	0: "INSS_OFFLINE",
	1: "INSS_ONLINE",
}
var AppInstanceState_value = map[string]int32{
	"INSS_OFFLINE": 0,
	"INSS_ONLINE":  1,
}

func (x AppInstanceState) String() string {
	return proto.EnumName(AppInstanceState_name, int32(x))
}
func (AppInstanceState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// CommitState 改动提交状态
type CommitState int32

const (
	// 0 初始化
	CommitState_CS_INIT CommitState = 0
	// 1 已提交
	CommitState_CS_CONFIRMED CommitState = 1
	// 2 已撤销
	CommitState_CS_CANCELED CommitState = 2
)

var CommitState_name = map[int32]string{
	0: "CS_INIT",
	1: "CS_CONFIRMED",
	2: "CS_CANCELED",
}
var CommitState_value = map[string]int32{
	"CS_INIT":      0,
	"CS_CONFIRMED": 1,
	"CS_CANCELED":  2,
}

func (x CommitState) String() string {
	return proto.EnumName(CommitState_name, int32(x))
}
func (CommitState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// DeployType 部署环境类型
type DeployType int32

const (
	// 0 BCS容器部署
	DeployType_DT_BCS DeployType = 0
	// 1 GSE进程部署
	DeployType_DT_GSE DeployType = 1
	// 2 GSE容器部署(插件与Sidecar交互)
	DeployType_DT_GSE_PLUGIN DeployType = 2
)

var DeployType_name = map[int32]string{
	0: "DT_BCS",
	1: "DT_GSE",
	2: "DT_GSE_PLUGIN",
}
var DeployType_value = map[string]int32{
	"DT_BCS":        0,
	"DT_GSE":        1,
	"DT_GSE_PLUGIN": 2,
}

func (x DeployType) String() string {
	return proto.EnumName(DeployType_name, int32(x))
}
func (DeployType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// AppState 应用模块分组状态
type AppState int32

const (
	// 0 已创建、可用状态
	AppState_AS_CREATED AppState = 0
	// 1 已删除状态
	AppState_AS_DELETED AppState = 1
)

var AppState_name = map[int32]string{
	0: "AS_CREATED",
	1: "AS_DELETED",
}
var AppState_value = map[string]int32{
	"AS_CREATED": 0,
	"AS_DELETED": 1,
}

func (x AppState) String() string {
	return proto.EnumName(AppState_name, int32(x))
}
func (AppState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// ClusterState 集群状态
type ClusterState int32

const (
	// 0 已创建、可用状态
	ClusterState_CS_CREATED ClusterState = 0
	// 1 已删除状态
	ClusterState_CS_DELETED ClusterState = 1
)

var ClusterState_name = map[int32]string{
	0: "CS_CREATED",
	1: "CS_DELETED",
}
var ClusterState_value = map[string]int32{
	"CS_CREATED": 0,
	"CS_DELETED": 1,
}

func (x ClusterState) String() string {
	return proto.EnumName(ClusterState_name, int32(x))
}
func (ClusterState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// ZoneState 可用区状态
type ZoneState int32

const (
	// 0 已创建、可用状态
	ZoneState_ZS_CREATED ZoneState = 0
	// 1 已删除状态
	ZoneState_ZS_DELETED ZoneState = 1
)

var ZoneState_name = map[int32]string{
	0: "ZS_CREATED",
	1: "ZS_DELETED",
}
var ZoneState_value = map[string]int32{
	"ZS_CREATED": 0,
	"ZS_DELETED": 1,
}

func (x ZoneState) String() string {
	return proto.EnumName(ZoneState_name, int32(x))
}
func (ZoneState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// StrategyState 策略状态
type StrategyState int32

const (
	// 0 已创建、可用状态
	StrategyState_SS_CREATED StrategyState = 0
	// 1 已删除状态
	StrategyState_SS_DELETED StrategyState = 1
)

var StrategyState_name = map[int32]string{
	0: "SS_CREATED",
	1: "SS_DELETED",
}
var StrategyState_value = map[string]int32{
	"SS_CREATED": 0,
	"SS_DELETED": 1,
}

func (x StrategyState) String() string {
	return proto.EnumName(StrategyState_name, int32(x))
}
func (StrategyState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// ConfigSetState 配置集合状态
type ConfigSetState int32

const (
	// 0 已创建、可用状态
	ConfigSetState_CSS_CREATED ConfigSetState = 0
	// 1 已删除状态
	ConfigSetState_CSS_DELETED ConfigSetState = 1
)

var ConfigSetState_name = map[int32]string{
	0: "CSS_CREATED",
	1: "CSS_DELETED",
}
var ConfigSetState_value = map[string]int32{
	"CSS_CREATED": 0,
	"CSS_DELETED": 1,
}

func (x ConfigSetState) String() string {
	return proto.EnumName(ConfigSetState_name, int32(x))
}
func (ConfigSetState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// ConfigTemplateSetState 配置模版集合状态
type ConfigTemplateSetState int32

const (
	// 0 已创建、可用状态
	ConfigTemplateSetState_CTSS_CREATED ConfigTemplateSetState = 0
	// 1 已删除状态
	ConfigTemplateSetState_CTSS_DELETED ConfigTemplateSetState = 1
)

var ConfigTemplateSetState_name = map[int32]string{
	0: "CTSS_CREATED",
	1: "CTSS_DELETED",
}
var ConfigTemplateSetState_value = map[string]int32{
	"CTSS_CREATED": 0,
	"CTSS_DELETED": 1,
}

func (x ConfigTemplateSetState) String() string {
	return proto.EnumName(ConfigTemplateSetState_name, int32(x))
}
func (ConfigTemplateSetState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// ConfigTemplateState 配置模版状态
type ConfigTemplateState int32

const (
	// 0 已创建、可用状态
	ConfigTemplateState_CTS_CREATED ConfigTemplateState = 0
	// 1 已删除状态
	ConfigTemplateState_CTS_DELETED ConfigTemplateState = 1
)

var ConfigTemplateState_name = map[int32]string{
	0: "CTS_CREATED",
	1: "CTS_DELETED",
}
var ConfigTemplateState_value = map[string]int32{
	"CTS_CREATED": 0,
	"CTS_DELETED": 1,
}

func (x ConfigTemplateState) String() string {
	return proto.EnumName(ConfigTemplateState_name, int32(x))
}
func (ConfigTemplateState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

// ConfigTemplateVersionState 配置模版版本状态
type ConfigTemplateVersionState int32

const (
	// 0 已创建、可用状态
	ConfigTemplateVersionState_CTVS_CREATED ConfigTemplateVersionState = 0
	// 1 已删除状态
	ConfigTemplateVersionState_CTVS_DELETED ConfigTemplateVersionState = 1
)

var ConfigTemplateVersionState_name = map[int32]string{
	0: "CTVS_CREATED",
	1: "CTVS_DELETED",
}
var ConfigTemplateVersionState_value = map[string]int32{
	"CTVS_CREATED": 0,
	"CTVS_DELETED": 1,
}

func (x ConfigTemplateVersionState) String() string {
	return proto.EnumName(ConfigTemplateVersionState_name, int32(x))
}
func (ConfigTemplateVersionState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// VariableState 变量状态
type VariableState int32

const (
	// 0 已创建、可用状态
	VariableState_VS_CREATED VariableState = 0
	// 1 已删除状态
	VariableState_VS_DELETED VariableState = 1
)

var VariableState_name = map[int32]string{
	0: "VS_CREATED",
	1: "VS_DELETED",
}
var VariableState_value = map[string]int32{
	"VS_CREATED": 0,
	"VS_DELETED": 1,
}

func (x VariableState) String() string {
	return proto.EnumName(VariableState_name, int32(x))
}
func (VariableState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

// SourceType 系统资源类型
type SourceType int32

const (
	// 0 业务资源
	SourceType_ST_BUSINESS SourceType = 0
	// 1 应用模块资源
	SourceType_ST_APP SourceType = 1
	// 2 集群资源
	SourceType_ST_CLUSTER SourceType = 2
	// 3 可用区资源
	SourceType_ST_ZONE SourceType = 3
	// 4 配置集合资源
	SourceType_ST_CONFIGSET SourceType = 4
	// 5 提交资源
	SourceType_ST_COMMIT SourceType = 5
	// 6 版本资源
	SourceType_ST_RELEASE SourceType = 6
	// 7 策略资源
	SourceType_ST_STRATEGY SourceType = 7
	// 8 组模式提交资源
	SourceType_ST_MULTI_COMMIT SourceType = 8
	// 9 组模式配置版本
	SourceType_ST_MULTI_RELEASE SourceType = 9
	SourceType_ST_END           SourceType = 10
)

var SourceType_name = map[int32]string{
	0:  "ST_BUSINESS",
	1:  "ST_APP",
	2:  "ST_CLUSTER",
	3:  "ST_ZONE",
	4:  "ST_CONFIGSET",
	5:  "ST_COMMIT",
	6:  "ST_RELEASE",
	7:  "ST_STRATEGY",
	8:  "ST_MULTI_COMMIT",
	9:  "ST_MULTI_RELEASE",
	10: "ST_END",
}
var SourceType_value = map[string]int32{
	"ST_BUSINESS":      0,
	"ST_APP":           1,
	"ST_CLUSTER":       2,
	"ST_ZONE":          3,
	"ST_CONFIGSET":     4,
	"ST_COMMIT":        5,
	"ST_RELEASE":       6,
	"ST_STRATEGY":      7,
	"ST_MULTI_COMMIT":  8,
	"ST_MULTI_RELEASE": 9,
	"ST_END":           10,
}

func (x SourceType) String() string {
	return proto.EnumName(SourceType_name, int32(x))
}
func (SourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

// SourceOpType 资源操作类型
type SourceOpType int32

const (
	// 0 创建
	SourceOpType_SOT_CREATE SourceOpType = 0
	// 1 更新
	SourceOpType_SOT_UPDATE SourceOpType = 1
	// 2 查询
	SourceOpType_SOT_QUERY SourceOpType = 2
	// 3 查询列表、历史记录
	SourceOpType_SOT_LIST SourceOpType = 3
	// 4 删除
	SourceOpType_SOT_DELETE SourceOpType = 4
	// 5 取消
	SourceOpType_SOT_CANCEL SourceOpType = 5
	// 6 确认提交
	SourceOpType_SOT_CONFIRM SourceOpType = 6
	// 7 发布版本
	SourceOpType_SOT_PUBLISH SourceOpType = 7
	// 8 回滚版本
	SourceOpType_SOT_ROLLBACK SourceOpType = 8
	// 9 锁定资源
	SourceOpType_SOT_LOCK SourceOpType = 9
	// 10 解锁资源
	SourceOpType_SOT_UNLOCK SourceOpType = 10
	SourceOpType_SOT_END    SourceOpType = 11
)

var SourceOpType_name = map[int32]string{
	0:  "SOT_CREATE",
	1:  "SOT_UPDATE",
	2:  "SOT_QUERY",
	3:  "SOT_LIST",
	4:  "SOT_DELETE",
	5:  "SOT_CANCEL",
	6:  "SOT_CONFIRM",
	7:  "SOT_PUBLISH",
	8:  "SOT_ROLLBACK",
	9:  "SOT_LOCK",
	10: "SOT_UNLOCK",
	11: "SOT_END",
}
var SourceOpType_value = map[string]int32{
	"SOT_CREATE":   0,
	"SOT_UPDATE":   1,
	"SOT_QUERY":    2,
	"SOT_LIST":     3,
	"SOT_DELETE":   4,
	"SOT_CANCEL":   5,
	"SOT_CONFIRM":  6,
	"SOT_PUBLISH":  7,
	"SOT_ROLLBACK": 8,
	"SOT_LOCK":     9,
	"SOT_UNLOCK":   10,
	"SOT_END":      11,
}

func (x SourceOpType) String() string {
	return proto.EnumName(SourceOpType_name, int32(x))
}
func (SourceOpType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

// TemplateEngineType template engine type
type TemplateEngineType int32

const (
	// 0 golang template
	TemplateEngineType_TET_GOLANG TemplateEngineType = 0
	// 1 python mako
	TemplateEngineType_TET_PYTHONMAKO TemplateEngineType = 1
)

var TemplateEngineType_name = map[int32]string{
	0: "TET_GOLANG",
	1: "TET_PYTHONMAKO",
}
var TemplateEngineType_value = map[string]int32{
	"TET_GOLANG":     0,
	"TET_PYTHONMAKO": 1,
}

func (x TemplateEngineType) String() string {
	return proto.EnumName(TemplateEngineType_name, int32(x))
}
func (TemplateEngineType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

// VariableType variable type
type VariableType int32

const (
	// 0 global variable
	VariableType_VT_GLOBAL VariableType = 0
	// 1 cluster variable
	VariableType_VT_CLUSTER VariableType = 1
	// 2 zone variable
	VariableType_VT_ZONE VariableType = 2
)

var VariableType_name = map[int32]string{
	0: "VT_GLOBAL",
	1: "VT_CLUSTER",
	2: "VT_ZONE",
}
var VariableType_value = map[string]int32{
	"VT_GLOBAL":  0,
	"VT_CLUSTER": 1,
	"VT_ZONE":    2,
}

func (x VariableType) String() string {
	return proto.EnumName(VariableType_name, int32(x))
}
func (VariableType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type Endpoint struct {
	IP   string `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Endpoint) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *Endpoint) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type CommitMetadata struct {
	Cfgsetid     string `protobuf:"bytes,1,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Templateid   string `protobuf:"bytes,2,opt,name=templateid" json:"templateid,omitempty"`
	Template     string `protobuf:"bytes,3,opt,name=template" json:"template,omitempty"`
	TemplateRule string `protobuf:"bytes,4,opt,name=templateRule" json:"templateRule,omitempty"`
	Configs      []byte `protobuf:"bytes,5,opt,name=configs,proto3" json:"configs,omitempty"`
	Changes      string `protobuf:"bytes,6,opt,name=changes" json:"changes,omitempty"`
	Commitid     string `protobuf:"bytes,7,opt,name=commitid" json:"commitid,omitempty"`
}

func (m *CommitMetadata) Reset()                    { *m = CommitMetadata{} }
func (m *CommitMetadata) String() string            { return proto.CompactTextString(m) }
func (*CommitMetadata) ProtoMessage()               {}
func (*CommitMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommitMetadata) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *CommitMetadata) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *CommitMetadata) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *CommitMetadata) GetTemplateRule() string {
	if m != nil {
		return m.TemplateRule
	}
	return ""
}

func (m *CommitMetadata) GetConfigs() []byte {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *CommitMetadata) GetChanges() string {
	if m != nil {
		return m.Changes
	}
	return ""
}

func (m *CommitMetadata) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

type ReleaseMetadata struct {
	Cfgsetid  string `protobuf:"bytes,1,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Releaseid string `protobuf:"bytes,2,opt,name=releaseid" json:"releaseid,omitempty"`
	Commitid  string `protobuf:"bytes,3,opt,name=commitid" json:"commitid,omitempty"`
}

func (m *ReleaseMetadata) Reset()                    { *m = ReleaseMetadata{} }
func (m *ReleaseMetadata) String() string            { return proto.CompactTextString(m) }
func (*ReleaseMetadata) ProtoMessage()               {}
func (*ReleaseMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReleaseMetadata) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *ReleaseMetadata) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *ReleaseMetadata) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

type CommitResult struct {
	Cfgsetid string `protobuf:"bytes,1,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Result   string `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *CommitResult) Reset()                    { *m = CommitResult{} }
func (m *CommitResult) String() string            { return proto.CompactTextString(m) }
func (*CommitResult) ProtoMessage()               {}
func (*CommitResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CommitResult) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *CommitResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type Business struct {
	Bid          string `protobuf:"bytes,1,opt,name=bid" json:"bid,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Depid        string `protobuf:"bytes,3,opt,name=depid" json:"depid,omitempty"`
	Creator      string `protobuf:"bytes,4,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,5,opt,name=lastModifyBy" json:"lastModifyBy,omitempty"`
	Memo         string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
	CreatedAt    string `protobuf:"bytes,8,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,9,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// add fields here.
	Auth string `protobuf:"bytes,10,opt,name=auth" json:"auth,omitempty"`
}

func (m *Business) Reset()                    { *m = Business{} }
func (m *Business) String() string            { return proto.CompactTextString(m) }
func (*Business) ProtoMessage()               {}
func (*Business) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Business) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *Business) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Business) GetDepid() string {
	if m != nil {
		return m.Depid
	}
	return ""
}

func (m *Business) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Business) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *Business) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Business) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Business) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Business) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Business) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type App struct {
	Appid        string `protobuf:"bytes,1,opt,name=appid" json:"appid,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Bid          string `protobuf:"bytes,3,opt,name=bid" json:"bid,omitempty"`
	DeployType   int32  `protobuf:"varint,4,opt,name=deployType" json:"deployType,omitempty"`
	Creator      string `protobuf:"bytes,5,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,6,opt,name=lastModifyBy" json:"lastModifyBy,omitempty"`
	Memo         string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
	CreatedAt    string `protobuf:"bytes,9,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,10,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *App) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *App) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *App) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *App) GetDeployType() int32 {
	if m != nil {
		return m.DeployType
	}
	return 0
}

func (m *App) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *App) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *App) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *App) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *App) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *App) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type Cluster struct {
	Clusterid    string `protobuf:"bytes,1,opt,name=clusterid" json:"clusterid,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Bid          string `protobuf:"bytes,3,opt,name=bid" json:"bid,omitempty"`
	Appid        string `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty"`
	RClusterid   string `protobuf:"bytes,5,opt,name=rClusterid" json:"rClusterid,omitempty"`
	Creator      string `protobuf:"bytes,6,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,7,opt,name=lastModifyBy" json:"lastModifyBy,omitempty"`
	Memo         string `protobuf:"bytes,8,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,9,opt,name=state" json:"state,omitempty"`
	CreatedAt    string `protobuf:"bytes,10,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,11,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// add fields here.
	Labels string `protobuf:"bytes,12,opt,name=labels" json:"labels,omitempty"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Cluster) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *Cluster) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *Cluster) GetRClusterid() string {
	if m != nil {
		return m.RClusterid
	}
	return ""
}

func (m *Cluster) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Cluster) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *Cluster) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Cluster) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Cluster) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Cluster) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Cluster) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

type Zone struct {
	Zoneid       string `protobuf:"bytes,1,opt,name=zoneid" json:"zoneid,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Bid          string `protobuf:"bytes,3,opt,name=bid" json:"bid,omitempty"`
	Appid        string `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty"`
	Clusterid    string `protobuf:"bytes,5,opt,name=clusterid" json:"clusterid,omitempty"`
	Creator      string `protobuf:"bytes,6,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,7,opt,name=lastModifyBy" json:"lastModifyBy,omitempty"`
	Memo         string `protobuf:"bytes,8,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,9,opt,name=state" json:"state,omitempty"`
	CreatedAt    string `protobuf:"bytes,10,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,11,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *Zone) Reset()                    { *m = Zone{} }
func (m *Zone) String() string            { return proto.CompactTextString(m) }
func (*Zone) ProtoMessage()               {}
func (*Zone) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Zone) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *Zone) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Zone) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *Zone) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *Zone) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *Zone) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Zone) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *Zone) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Zone) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Zone) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Zone) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ConfigSet struct {
	Cfgsetid     string `protobuf:"bytes,1,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Bid          string `protobuf:"bytes,3,opt,name=bid" json:"bid,omitempty"`
	Appid        string `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty"`
	Creator      string `protobuf:"bytes,5,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,6,opt,name=lastModifyBy" json:"lastModifyBy,omitempty"`
	Memo         string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
	CreatedAt    string `protobuf:"bytes,9,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,10,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// add fields here.
	Fpath string `protobuf:"bytes,11,opt,name=fpath" json:"fpath,omitempty"`
}

func (m *ConfigSet) Reset()                    { *m = ConfigSet{} }
func (m *ConfigSet) String() string            { return proto.CompactTextString(m) }
func (*ConfigSet) ProtoMessage()               {}
func (*ConfigSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ConfigSet) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *ConfigSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigSet) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *ConfigSet) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *ConfigSet) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ConfigSet) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *ConfigSet) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *ConfigSet) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ConfigSet) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ConfigSet) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *ConfigSet) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

type Configs struct {
	Cfgsetid     string `protobuf:"bytes,1,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Bid          string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid        string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid    string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid       string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Commitid     string `protobuf:"bytes,6,opt,name=commitid" json:"commitid,omitempty"`
	Cid          string `protobuf:"bytes,7,opt,name=cid" json:"cid,omitempty"`
	CfgLink      string `protobuf:"bytes,8,opt,name=cfgLink" json:"cfgLink,omitempty"`
	Content      []byte `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty"`
	Creator      string `protobuf:"bytes,10,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,11,opt,name=lastModifyBy" json:"lastModifyBy,omitempty"`
	Memo         string `protobuf:"bytes,12,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,13,opt,name=state" json:"state,omitempty"`
	CreatedAt    string `protobuf:"bytes,14,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,15,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// add fields here.
	Index string `protobuf:"bytes,16,opt,name=index" json:"index,omitempty"`
}

func (m *Configs) Reset()                    { *m = Configs{} }
func (m *Configs) String() string            { return proto.CompactTextString(m) }
func (*Configs) ProtoMessage()               {}
func (*Configs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Configs) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *Configs) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *Configs) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *Configs) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *Configs) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *Configs) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *Configs) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *Configs) GetCfgLink() string {
	if m != nil {
		return m.CfgLink
	}
	return ""
}

func (m *Configs) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Configs) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Configs) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *Configs) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Configs) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Configs) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Configs) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Configs) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type Commit struct {
	Commitid     string `protobuf:"bytes,1,opt,name=commitid" json:"commitid,omitempty"`
	Bid          string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid        string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Cfgsetid     string `protobuf:"bytes,4,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Op           int32  `protobuf:"varint,5,opt,name=op" json:"op,omitempty"`
	Operator     string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	Templateid   string `protobuf:"bytes,7,opt,name=templateid" json:"templateid,omitempty"`
	Template     string `protobuf:"bytes,8,opt,name=template" json:"template,omitempty"`
	TemplateRule string `protobuf:"bytes,9,opt,name=templateRule" json:"templateRule,omitempty"`
	PrevConfigs  []byte `protobuf:"bytes,10,opt,name=prevConfigs,proto3" json:"prevConfigs,omitempty"`
	Configs      []byte `protobuf:"bytes,11,opt,name=configs,proto3" json:"configs,omitempty"`
	Changes      string `protobuf:"bytes,12,opt,name=changes" json:"changes,omitempty"`
	Releaseid    string `protobuf:"bytes,13,opt,name=releaseid" json:"releaseid,omitempty"`
	Memo         string `protobuf:"bytes,14,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,15,opt,name=state" json:"state,omitempty"`
	CreatedAt    string `protobuf:"bytes,16,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,17,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// add fields here.
	MultiCommitid string `protobuf:"bytes,18,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Commit) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *Commit) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *Commit) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *Commit) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *Commit) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *Commit) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Commit) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *Commit) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *Commit) GetTemplateRule() string {
	if m != nil {
		return m.TemplateRule
	}
	return ""
}

func (m *Commit) GetPrevConfigs() []byte {
	if m != nil {
		return m.PrevConfigs
	}
	return nil
}

func (m *Commit) GetConfigs() []byte {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *Commit) GetChanges() string {
	if m != nil {
		return m.Changes
	}
	return ""
}

func (m *Commit) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *Commit) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Commit) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Commit) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Commit) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Commit) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

type MultiCommit struct {
	MultiCommitid  string `protobuf:"bytes,1,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
	Bid            string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid          string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Operator       string `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	MultiReleaseid string `protobuf:"bytes,5,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
	Memo           string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
	State          int32  `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
	CreatedAt      string `protobuf:"bytes,8,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt      string `protobuf:"bytes,9,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *MultiCommit) Reset()                    { *m = MultiCommit{} }
func (m *MultiCommit) String() string            { return proto.CompactTextString(m) }
func (*MultiCommit) ProtoMessage()               {}
func (*MultiCommit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MultiCommit) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

func (m *MultiCommit) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *MultiCommit) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *MultiCommit) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MultiCommit) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

func (m *MultiCommit) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *MultiCommit) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *MultiCommit) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *MultiCommit) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type Release struct {
	ID           uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Releaseid    string `protobuf:"bytes,2,opt,name=releaseid" json:"releaseid,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Bid          string `protobuf:"bytes,4,opt,name=bid" json:"bid,omitempty"`
	Appid        string `protobuf:"bytes,5,opt,name=appid" json:"appid,omitempty"`
	Cfgsetid     string `protobuf:"bytes,6,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	CfgsetName   string `protobuf:"bytes,7,opt,name=cfgsetName" json:"cfgsetName,omitempty"`
	Strategyid   string `protobuf:"bytes,8,opt,name=strategyid" json:"strategyid,omitempty"`
	Strategies   string `protobuf:"bytes,9,opt,name=strategies" json:"strategies,omitempty"`
	Creator      string `protobuf:"bytes,10,opt,name=creator" json:"creator,omitempty"`
	Commitid     string `protobuf:"bytes,11,opt,name=commitid" json:"commitid,omitempty"`
	LastModifyBy string `protobuf:"bytes,12,opt,name=lastModifyBy" json:"lastModifyBy,omitempty"`
	Memo         string `protobuf:"bytes,13,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,14,opt,name=state" json:"state,omitempty"`
	CreatedAt    string `protobuf:"bytes,15,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,16,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// add fields here.
	CfgsetFpath    string `protobuf:"bytes,17,opt,name=cfgsetFpath" json:"cfgsetFpath,omitempty"`
	MultiReleaseid string `protobuf:"bytes,18,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
}

func (m *Release) Reset()                    { *m = Release{} }
func (m *Release) String() string            { return proto.CompactTextString(m) }
func (*Release) ProtoMessage()               {}
func (*Release) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Release) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Release) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *Release) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Release) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *Release) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *Release) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *Release) GetCfgsetName() string {
	if m != nil {
		return m.CfgsetName
	}
	return ""
}

func (m *Release) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

func (m *Release) GetStrategies() string {
	if m != nil {
		return m.Strategies
	}
	return ""
}

func (m *Release) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Release) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *Release) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *Release) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Release) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Release) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Release) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Release) GetCfgsetFpath() string {
	if m != nil {
		return m.CfgsetFpath
	}
	return ""
}

func (m *Release) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

type MultiRelease struct {
	ID             uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	MultiReleaseid string `protobuf:"bytes,2,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Bid            string `protobuf:"bytes,4,opt,name=bid" json:"bid,omitempty"`
	Appid          string `protobuf:"bytes,5,opt,name=appid" json:"appid,omitempty"`
	Strategyid     string `protobuf:"bytes,6,opt,name=strategyid" json:"strategyid,omitempty"`
	Strategies     string `protobuf:"bytes,7,opt,name=strategies" json:"strategies,omitempty"`
	Creator        string `protobuf:"bytes,8,opt,name=creator" json:"creator,omitempty"`
	MultiCommitid  string `protobuf:"bytes,9,opt,name=multiCommitid" json:"multiCommitid,omitempty"`
	LastModifyBy   string `protobuf:"bytes,10,opt,name=lastModifyBy" json:"lastModifyBy,omitempty"`
	Memo           string `protobuf:"bytes,11,opt,name=memo" json:"memo,omitempty"`
	State          int32  `protobuf:"varint,12,opt,name=state" json:"state,omitempty"`
	CreatedAt      string `protobuf:"bytes,13,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt      string `protobuf:"bytes,14,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *MultiRelease) Reset()                    { *m = MultiRelease{} }
func (m *MultiRelease) String() string            { return proto.CompactTextString(m) }
func (*MultiRelease) ProtoMessage()               {}
func (*MultiRelease) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MultiRelease) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *MultiRelease) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

func (m *MultiRelease) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MultiRelease) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *MultiRelease) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *MultiRelease) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

func (m *MultiRelease) GetStrategies() string {
	if m != nil {
		return m.Strategies
	}
	return ""
}

func (m *MultiRelease) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MultiRelease) GetMultiCommitid() string {
	if m != nil {
		return m.MultiCommitid
	}
	return ""
}

func (m *MultiRelease) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *MultiRelease) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *MultiRelease) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *MultiRelease) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *MultiRelease) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type AppInstance struct {
	Instanceid uint64 `protobuf:"varint,1,opt,name=instanceid" json:"instanceid,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid      string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid  string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid     string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Dc         string `protobuf:"bytes,6,opt,name=dc" json:"dc,omitempty"`
	IP         string `protobuf:"bytes,7,opt,name=IP" json:"IP,omitempty"`
	Labels     string `protobuf:"bytes,8,opt,name=labels" json:"labels,omitempty"`
	State      int32  `protobuf:"varint,9,opt,name=state" json:"state,omitempty"`
	EffectTime string `protobuf:"bytes,10,opt,name=effectTime" json:"effectTime,omitempty"`
	CreatedAt  string `protobuf:"bytes,11,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt  string `protobuf:"bytes,12,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// add fields here.
	EffectCode int32  `protobuf:"varint,13,opt,name=effectCode" json:"effectCode,omitempty"`
	EffectMsg  string `protobuf:"bytes,14,opt,name=effectMsg" json:"effectMsg,omitempty"`
	ReloadTime string `protobuf:"bytes,15,opt,name=reloadTime" json:"reloadTime,omitempty"`
	ReloadCode int32  `protobuf:"varint,16,opt,name=reloadCode" json:"reloadCode,omitempty"`
	ReloadMsg  string `protobuf:"bytes,17,opt,name=reloadMsg" json:"reloadMsg,omitempty"`
}

func (m *AppInstance) Reset()                    { *m = AppInstance{} }
func (m *AppInstance) String() string            { return proto.CompactTextString(m) }
func (*AppInstance) ProtoMessage()               {}
func (*AppInstance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AppInstance) GetInstanceid() uint64 {
	if m != nil {
		return m.Instanceid
	}
	return 0
}

func (m *AppInstance) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *AppInstance) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *AppInstance) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *AppInstance) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *AppInstance) GetDc() string {
	if m != nil {
		return m.Dc
	}
	return ""
}

func (m *AppInstance) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *AppInstance) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *AppInstance) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *AppInstance) GetEffectTime() string {
	if m != nil {
		return m.EffectTime
	}
	return ""
}

func (m *AppInstance) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *AppInstance) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *AppInstance) GetEffectCode() int32 {
	if m != nil {
		return m.EffectCode
	}
	return 0
}

func (m *AppInstance) GetEffectMsg() string {
	if m != nil {
		return m.EffectMsg
	}
	return ""
}

func (m *AppInstance) GetReloadTime() string {
	if m != nil {
		return m.ReloadTime
	}
	return ""
}

func (m *AppInstance) GetReloadCode() int32 {
	if m != nil {
		return m.ReloadCode
	}
	return 0
}

func (m *AppInstance) GetReloadMsg() string {
	if m != nil {
		return m.ReloadMsg
	}
	return ""
}

type AppInstanceRelease struct {
	Instanceid uint64 `protobuf:"varint,1,opt,name=instanceid" json:"instanceid,omitempty"`
	Bid        string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Appid      string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Clusterid  string `protobuf:"bytes,4,opt,name=clusterid" json:"clusterid,omitempty"`
	Zoneid     string `protobuf:"bytes,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Dc         string `protobuf:"bytes,6,opt,name=dc" json:"dc,omitempty"`
	IP         string `protobuf:"bytes,7,opt,name=IP" json:"IP,omitempty"`
	Labels     string `protobuf:"bytes,8,opt,name=labels" json:"labels,omitempty"`
	Cfgsetid   string `protobuf:"bytes,9,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Releaseid  string `protobuf:"bytes,10,opt,name=releaseid" json:"releaseid,omitempty"`
	EffectTime string `protobuf:"bytes,11,opt,name=effectTime" json:"effectTime,omitempty"`
	CreatedAt  string `protobuf:"bytes,12,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt  string `protobuf:"bytes,13,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// add fields here.
	EffectCode int32  `protobuf:"varint,14,opt,name=effectCode" json:"effectCode,omitempty"`
	EffectMsg  string `protobuf:"bytes,15,opt,name=effectMsg" json:"effectMsg,omitempty"`
	ReloadTime string `protobuf:"bytes,16,opt,name=reloadTime" json:"reloadTime,omitempty"`
	ReloadCode int32  `protobuf:"varint,17,opt,name=reloadCode" json:"reloadCode,omitempty"`
	ReloadMsg  string `protobuf:"bytes,18,opt,name=reloadMsg" json:"reloadMsg,omitempty"`
}

func (m *AppInstanceRelease) Reset()                    { *m = AppInstanceRelease{} }
func (m *AppInstanceRelease) String() string            { return proto.CompactTextString(m) }
func (*AppInstanceRelease) ProtoMessage()               {}
func (*AppInstanceRelease) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AppInstanceRelease) GetInstanceid() uint64 {
	if m != nil {
		return m.Instanceid
	}
	return 0
}

func (m *AppInstanceRelease) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *AppInstanceRelease) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *AppInstanceRelease) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *AppInstanceRelease) GetZoneid() string {
	if m != nil {
		return m.Zoneid
	}
	return ""
}

func (m *AppInstanceRelease) GetDc() string {
	if m != nil {
		return m.Dc
	}
	return ""
}

func (m *AppInstanceRelease) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *AppInstanceRelease) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *AppInstanceRelease) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *AppInstanceRelease) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *AppInstanceRelease) GetEffectTime() string {
	if m != nil {
		return m.EffectTime
	}
	return ""
}

func (m *AppInstanceRelease) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *AppInstanceRelease) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *AppInstanceRelease) GetEffectCode() int32 {
	if m != nil {
		return m.EffectCode
	}
	return 0
}

func (m *AppInstanceRelease) GetEffectMsg() string {
	if m != nil {
		return m.EffectMsg
	}
	return ""
}

func (m *AppInstanceRelease) GetReloadTime() string {
	if m != nil {
		return m.ReloadTime
	}
	return ""
}

func (m *AppInstanceRelease) GetReloadCode() int32 {
	if m != nil {
		return m.ReloadCode
	}
	return 0
}

func (m *AppInstanceRelease) GetReloadMsg() string {
	if m != nil {
		return m.ReloadMsg
	}
	return ""
}

type ReportInfo struct {
	Cfgsetid   string `protobuf:"bytes,1,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Releaseid  string `protobuf:"bytes,2,opt,name=releaseid" json:"releaseid,omitempty"`
	EffectTime string `protobuf:"bytes,3,opt,name=effectTime" json:"effectTime,omitempty"`
	// add fields here.
	MultiReleaseid string `protobuf:"bytes,4,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
	EffectCode     int32  `protobuf:"varint,5,opt,name=effectCode" json:"effectCode,omitempty"`
	EffectMsg      string `protobuf:"bytes,6,opt,name=effectMsg" json:"effectMsg,omitempty"`
	ReloadTime     string `protobuf:"bytes,7,opt,name=reloadTime" json:"reloadTime,omitempty"`
	ReloadCode     int32  `protobuf:"varint,8,opt,name=reloadCode" json:"reloadCode,omitempty"`
	ReloadMsg      string `protobuf:"bytes,9,opt,name=reloadMsg" json:"reloadMsg,omitempty"`
}

func (m *ReportInfo) Reset()                    { *m = ReportInfo{} }
func (m *ReportInfo) String() string            { return proto.CompactTextString(m) }
func (*ReportInfo) ProtoMessage()               {}
func (*ReportInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ReportInfo) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *ReportInfo) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *ReportInfo) GetEffectTime() string {
	if m != nil {
		return m.EffectTime
	}
	return ""
}

func (m *ReportInfo) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

func (m *ReportInfo) GetEffectCode() int32 {
	if m != nil {
		return m.EffectCode
	}
	return 0
}

func (m *ReportInfo) GetEffectMsg() string {
	if m != nil {
		return m.EffectMsg
	}
	return ""
}

func (m *ReportInfo) GetReloadTime() string {
	if m != nil {
		return m.ReloadTime
	}
	return ""
}

func (m *ReportInfo) GetReloadCode() int32 {
	if m != nil {
		return m.ReloadCode
	}
	return 0
}

func (m *ReportInfo) GetReloadMsg() string {
	if m != nil {
		return m.ReloadMsg
	}
	return ""
}

type Strategy struct {
	Strategyid   string `protobuf:"bytes,1,opt,name=strategyid" json:"strategyid,omitempty"`
	Appid        string `protobuf:"bytes,2,opt,name=appid" json:"appid,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Content      string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	Creator      string `protobuf:"bytes,5,opt,name=creator" json:"creator,omitempty"`
	Memo         string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
	State        int32  `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
	LastModifyBy string `protobuf:"bytes,8,opt,name=lastModifyBy" json:"lastModifyBy,omitempty"`
	CreatedAt    string `protobuf:"bytes,9,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,10,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *Strategy) Reset()                    { *m = Strategy{} }
func (m *Strategy) String() string            { return proto.CompactTextString(m) }
func (*Strategy) ProtoMessage()               {}
func (*Strategy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Strategy) GetStrategyid() string {
	if m != nil {
		return m.Strategyid
	}
	return ""
}

func (m *Strategy) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *Strategy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Strategy) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Strategy) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Strategy) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Strategy) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Strategy) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *Strategy) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Strategy) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ShardingDB struct {
	Dbid      string `protobuf:"bytes,1,opt,name=dbid" json:"dbid,omitempty"`
	Host      string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Port      int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	User      string `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Password  string `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	Memo      string `protobuf:"bytes,6,opt,name=memo" json:"memo,omitempty"`
	State     int32  `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
	CreatedAt string `protobuf:"bytes,8,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt string `protobuf:"bytes,9,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *ShardingDB) Reset()                    { *m = ShardingDB{} }
func (m *ShardingDB) String() string            { return proto.CompactTextString(m) }
func (*ShardingDB) ProtoMessage()               {}
func (*ShardingDB) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ShardingDB) GetDbid() string {
	if m != nil {
		return m.Dbid
	}
	return ""
}

func (m *ShardingDB) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ShardingDB) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ShardingDB) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ShardingDB) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ShardingDB) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *ShardingDB) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ShardingDB) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ShardingDB) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type Sharding struct {
	Key       string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Dbid      string `protobuf:"bytes,2,opt,name=dbid" json:"dbid,omitempty"`
	Dbname    string `protobuf:"bytes,3,opt,name=dbname" json:"dbname,omitempty"`
	Memo      string `protobuf:"bytes,4,opt,name=memo" json:"memo,omitempty"`
	State     int32  `protobuf:"varint,5,opt,name=state" json:"state,omitempty"`
	CreatedAt string `protobuf:"bytes,6,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt string `protobuf:"bytes,7,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *Sharding) Reset()                    { *m = Sharding{} }
func (m *Sharding) String() string            { return proto.CompactTextString(m) }
func (*Sharding) ProtoMessage()               {}
func (*Sharding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Sharding) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Sharding) GetDbid() string {
	if m != nil {
		return m.Dbid
	}
	return ""
}

func (m *Sharding) GetDbname() string {
	if m != nil {
		return m.Dbname
	}
	return ""
}

func (m *Sharding) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Sharding) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Sharding) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Sharding) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type Audit struct {
	ID         uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	SourceType int32  `protobuf:"varint,2,opt,name=sourceType" json:"sourceType,omitempty"`
	OpType     int32  `protobuf:"varint,3,opt,name=opType" json:"opType,omitempty"`
	Bid        string `protobuf:"bytes,4,opt,name=bid" json:"bid,omitempty"`
	Sourceid   string `protobuf:"bytes,5,opt,name=sourceid" json:"sourceid,omitempty"`
	Operator   string `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	Memo       string `protobuf:"bytes,7,opt,name=memo" json:"memo,omitempty"`
	State      int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
	CreatedAt  string `protobuf:"bytes,9,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt  string `protobuf:"bytes,10,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *Audit) Reset()                    { *m = Audit{} }
func (m *Audit) String() string            { return proto.CompactTextString(m) }
func (*Audit) ProtoMessage()               {}
func (*Audit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Audit) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Audit) GetSourceType() int32 {
	if m != nil {
		return m.SourceType
	}
	return 0
}

func (m *Audit) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func (m *Audit) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *Audit) GetSourceid() string {
	if m != nil {
		return m.Sourceid
	}
	return ""
}

func (m *Audit) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Audit) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Audit) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Audit) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Audit) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ConfigTemplateSet struct {
	Setid        string `protobuf:"bytes,1,opt,name=setid" json:"setid,omitempty"`
	Bid          string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Memo         string `protobuf:"bytes,4,opt,name=memo" json:"memo,omitempty"`
	Fpath        string `protobuf:"bytes,5,opt,name=fpath" json:"fpath,omitempty"`
	Creator      string `protobuf:"bytes,6,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,7,opt,name=lastModifyBy" json:"lastModifyBy,omitempty"`
	State        int32  `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`
	CreatedAt    string `protobuf:"bytes,9,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,10,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *ConfigTemplateSet) Reset()                    { *m = ConfigTemplateSet{} }
func (m *ConfigTemplateSet) String() string            { return proto.CompactTextString(m) }
func (*ConfigTemplateSet) ProtoMessage()               {}
func (*ConfigTemplateSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ConfigTemplateSet) GetSetid() string {
	if m != nil {
		return m.Setid
	}
	return ""
}

func (m *ConfigTemplateSet) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *ConfigTemplateSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigTemplateSet) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *ConfigTemplateSet) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

func (m *ConfigTemplateSet) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ConfigTemplateSet) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *ConfigTemplateSet) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ConfigTemplateSet) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ConfigTemplateSet) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ConfigTemplate struct {
	Templateid   string `protobuf:"bytes,1,opt,name=templateid" json:"templateid,omitempty"`
	Bid          string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Setid        string `protobuf:"bytes,3,opt,name=setid" json:"setid,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Memo         string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Fpath        string `protobuf:"bytes,6,opt,name=fpath" json:"fpath,omitempty"`
	User         string `protobuf:"bytes,7,opt,name=user" json:"user,omitempty"`
	Group        string `protobuf:"bytes,8,opt,name=group" json:"group,omitempty"`
	Permission   int32  `protobuf:"varint,9,opt,name=permission" json:"permission,omitempty"`
	FileEncoding string `protobuf:"bytes,10,opt,name=fileEncoding" json:"fileEncoding,omitempty"`
	EngineType   int32  `protobuf:"varint,11,opt,name=engineType" json:"engineType,omitempty"`
	Creator      string `protobuf:"bytes,12,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,13,opt,name=lastModifyBy" json:"lastModifyBy,omitempty"`
	State        int32  `protobuf:"varint,14,opt,name=state" json:"state,omitempty"`
	CreatedAt    string `protobuf:"bytes,15,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,16,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *ConfigTemplate) Reset()                    { *m = ConfigTemplate{} }
func (m *ConfigTemplate) String() string            { return proto.CompactTextString(m) }
func (*ConfigTemplate) ProtoMessage()               {}
func (*ConfigTemplate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ConfigTemplate) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *ConfigTemplate) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *ConfigTemplate) GetSetid() string {
	if m != nil {
		return m.Setid
	}
	return ""
}

func (m *ConfigTemplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigTemplate) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *ConfigTemplate) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

func (m *ConfigTemplate) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ConfigTemplate) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *ConfigTemplate) GetPermission() int32 {
	if m != nil {
		return m.Permission
	}
	return 0
}

func (m *ConfigTemplate) GetFileEncoding() string {
	if m != nil {
		return m.FileEncoding
	}
	return ""
}

func (m *ConfigTemplate) GetEngineType() int32 {
	if m != nil {
		return m.EngineType
	}
	return 0
}

func (m *ConfigTemplate) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ConfigTemplate) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *ConfigTemplate) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ConfigTemplate) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ConfigTemplate) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type TemplateVersion struct {
	Versionid    string `protobuf:"bytes,1,opt,name=versionid" json:"versionid,omitempty"`
	Bid          string `protobuf:"bytes,2,opt,name=bid" json:"bid,omitempty"`
	Templateid   string `protobuf:"bytes,3,opt,name=templateid" json:"templateid,omitempty"`
	VersionName  string `protobuf:"bytes,4,opt,name=versionName" json:"versionName,omitempty"`
	Memo         string `protobuf:"bytes,5,opt,name=memo" json:"memo,omitempty"`
	Content      string `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	Creator      string `protobuf:"bytes,7,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy string `protobuf:"bytes,8,opt,name=lastModifyBy" json:"lastModifyBy,omitempty"`
	State        int32  `protobuf:"varint,9,opt,name=state" json:"state,omitempty"`
	CreatedAt    string `protobuf:"bytes,10,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,11,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *TemplateVersion) Reset()                    { *m = TemplateVersion{} }
func (m *TemplateVersion) String() string            { return proto.CompactTextString(m) }
func (*TemplateVersion) ProtoMessage()               {}
func (*TemplateVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *TemplateVersion) GetVersionid() string {
	if m != nil {
		return m.Versionid
	}
	return ""
}

func (m *TemplateVersion) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *TemplateVersion) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *TemplateVersion) GetVersionName() string {
	if m != nil {
		return m.VersionName
	}
	return ""
}

func (m *TemplateVersion) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *TemplateVersion) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *TemplateVersion) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *TemplateVersion) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *TemplateVersion) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *TemplateVersion) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *TemplateVersion) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ConfigTemplateBinding struct {
	Bid           string `protobuf:"bytes,1,opt,name=bid" json:"bid,omitempty"`
	Templateid    string `protobuf:"bytes,2,opt,name=templateid" json:"templateid,omitempty"`
	Appid         string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Versionid     string `protobuf:"bytes,4,opt,name=versionid" json:"versionid,omitempty"`
	Cfgsetid      string `protobuf:"bytes,5,opt,name=cfgsetid" json:"cfgsetid,omitempty"`
	Commitid      string `protobuf:"bytes,6,opt,name=commitid" json:"commitid,omitempty"`
	BindingParams string `protobuf:"bytes,7,opt,name=bindingParams" json:"bindingParams,omitempty"`
	Creator       string `protobuf:"bytes,8,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy  string `protobuf:"bytes,9,opt,name=lastModifyBy" json:"lastModifyBy,omitempty"`
	State         int32  `protobuf:"varint,10,opt,name=state" json:"state,omitempty"`
	CreatedAt     string `protobuf:"bytes,11,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt     string `protobuf:"bytes,12,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *ConfigTemplateBinding) Reset()                    { *m = ConfigTemplateBinding{} }
func (m *ConfigTemplateBinding) String() string            { return proto.CompactTextString(m) }
func (*ConfigTemplateBinding) ProtoMessage()               {}
func (*ConfigTemplateBinding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ConfigTemplateBinding) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *ConfigTemplateBinding) GetTemplateid() string {
	if m != nil {
		return m.Templateid
	}
	return ""
}

func (m *ConfigTemplateBinding) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *ConfigTemplateBinding) GetVersionid() string {
	if m != nil {
		return m.Versionid
	}
	return ""
}

func (m *ConfigTemplateBinding) GetCfgsetid() string {
	if m != nil {
		return m.Cfgsetid
	}
	return ""
}

func (m *ConfigTemplateBinding) GetCommitid() string {
	if m != nil {
		return m.Commitid
	}
	return ""
}

func (m *ConfigTemplateBinding) GetBindingParams() string {
	if m != nil {
		return m.BindingParams
	}
	return ""
}

func (m *ConfigTemplateBinding) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ConfigTemplateBinding) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *ConfigTemplateBinding) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ConfigTemplateBinding) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ConfigTemplateBinding) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type Variable struct {
	Bid           string `protobuf:"bytes,1,opt,name=bid" json:"bid,omitempty"`
	Vid           string `protobuf:"bytes,2,opt,name=vid" json:"vid,omitempty"`
	Cluster       string `protobuf:"bytes,3,opt,name=cluster" json:"cluster,omitempty"`
	ClusterLabels string `protobuf:"bytes,4,opt,name=clusterLabels" json:"clusterLabels,omitempty"`
	Zone          string `protobuf:"bytes,5,opt,name=zone" json:"zone,omitempty"`
	Type          int32  `protobuf:"varint,6,opt,name=type" json:"type,omitempty"`
	Key           string `protobuf:"bytes,7,opt,name=key" json:"key,omitempty"`
	Value         string `protobuf:"bytes,8,opt,name=value" json:"value,omitempty"`
	Memo          string `protobuf:"bytes,9,opt,name=memo" json:"memo,omitempty"`
	Creator       string `protobuf:"bytes,10,opt,name=creator" json:"creator,omitempty"`
	LastModifyBy  string `protobuf:"bytes,11,opt,name=lastModifyBy" json:"lastModifyBy,omitempty"`
	State         int32  `protobuf:"varint,12,opt,name=state" json:"state,omitempty"`
	CreatedAt     string `protobuf:"bytes,13,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt     string `protobuf:"bytes,14,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *Variable) Reset()                    { *m = Variable{} }
func (m *Variable) String() string            { return proto.CompactTextString(m) }
func (*Variable) ProtoMessage()               {}
func (*Variable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Variable) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *Variable) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *Variable) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *Variable) GetClusterLabels() string {
	if m != nil {
		return m.ClusterLabels
	}
	return ""
}

func (m *Variable) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Variable) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Variable) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Variable) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Variable) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Variable) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Variable) GetLastModifyBy() string {
	if m != nil {
		return m.LastModifyBy
	}
	return ""
}

func (m *Variable) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Variable) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Variable) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func init() {
	proto.RegisterType((*Endpoint)(nil), "common.Endpoint")
	proto.RegisterType((*CommitMetadata)(nil), "common.CommitMetadata")
	proto.RegisterType((*ReleaseMetadata)(nil), "common.ReleaseMetadata")
	proto.RegisterType((*CommitResult)(nil), "common.CommitResult")
	proto.RegisterType((*Business)(nil), "common.Business")
	proto.RegisterType((*App)(nil), "common.App")
	proto.RegisterType((*Cluster)(nil), "common.Cluster")
	proto.RegisterType((*Zone)(nil), "common.Zone")
	proto.RegisterType((*ConfigSet)(nil), "common.ConfigSet")
	proto.RegisterType((*Configs)(nil), "common.Configs")
	proto.RegisterType((*Commit)(nil), "common.Commit")
	proto.RegisterType((*MultiCommit)(nil), "common.MultiCommit")
	proto.RegisterType((*Release)(nil), "common.Release")
	proto.RegisterType((*MultiRelease)(nil), "common.MultiRelease")
	proto.RegisterType((*AppInstance)(nil), "common.AppInstance")
	proto.RegisterType((*AppInstanceRelease)(nil), "common.AppInstanceRelease")
	proto.RegisterType((*ReportInfo)(nil), "common.ReportInfo")
	proto.RegisterType((*Strategy)(nil), "common.Strategy")
	proto.RegisterType((*ShardingDB)(nil), "common.ShardingDB")
	proto.RegisterType((*Sharding)(nil), "common.Sharding")
	proto.RegisterType((*Audit)(nil), "common.Audit")
	proto.RegisterType((*ConfigTemplateSet)(nil), "common.ConfigTemplateSet")
	proto.RegisterType((*ConfigTemplate)(nil), "common.ConfigTemplate")
	proto.RegisterType((*TemplateVersion)(nil), "common.TemplateVersion")
	proto.RegisterType((*ConfigTemplateBinding)(nil), "common.ConfigTemplateBinding")
	proto.RegisterType((*Variable)(nil), "common.Variable")
	proto.RegisterEnum("common.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterEnum("common.CommonState", CommonState_name, CommonState_value)
	proto.RegisterEnum("common.ReleaseState", ReleaseState_name, ReleaseState_value)
	proto.RegisterEnum("common.AppInstanceState", AppInstanceState_name, AppInstanceState_value)
	proto.RegisterEnum("common.CommitState", CommitState_name, CommitState_value)
	proto.RegisterEnum("common.DeployType", DeployType_name, DeployType_value)
	proto.RegisterEnum("common.AppState", AppState_name, AppState_value)
	proto.RegisterEnum("common.ClusterState", ClusterState_name, ClusterState_value)
	proto.RegisterEnum("common.ZoneState", ZoneState_name, ZoneState_value)
	proto.RegisterEnum("common.StrategyState", StrategyState_name, StrategyState_value)
	proto.RegisterEnum("common.ConfigSetState", ConfigSetState_name, ConfigSetState_value)
	proto.RegisterEnum("common.ConfigTemplateSetState", ConfigTemplateSetState_name, ConfigTemplateSetState_value)
	proto.RegisterEnum("common.ConfigTemplateState", ConfigTemplateState_name, ConfigTemplateState_value)
	proto.RegisterEnum("common.ConfigTemplateVersionState", ConfigTemplateVersionState_name, ConfigTemplateVersionState_value)
	proto.RegisterEnum("common.VariableState", VariableState_name, VariableState_value)
	proto.RegisterEnum("common.SourceType", SourceType_name, SourceType_value)
	proto.RegisterEnum("common.SourceOpType", SourceOpType_name, SourceOpType_value)
	proto.RegisterEnum("common.TemplateEngineType", TemplateEngineType_name, TemplateEngineType_value)
	proto.RegisterEnum("common.VariableType", VariableType_name, VariableType_value)
}

func init() { proto.RegisterFile("common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 6089 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x5c, 0x7d, 0x70, 0x53, 0xd7,
	0x95, 0x47, 0xb6, 0x24, 0x4b, 0xd7, 0xb2, 0xfd, 0x78, 0x40, 0x6c, 0x48, 0x02, 0x42, 0x6d, 0x62,
	0x78, 0xd8, 0x0e, 0x7e, 0x04, 0x03, 0x6a, 0x3e, 0x78, 0x96, 0x64, 0xa3, 0x62, 0x4b, 0xee, 0x93,
	0x4c, 0x42, 0x76, 0x76, 0xb5, 0xc2, 0x7a, 0x18, 0x4d, 0x6c, 0x49, 0x6b, 0x09, 0x02, 0xcd, 0x32,
	0x63, 0xbe, 0x6d, 0x30, 0xd8, 0x79, 0x40, 0x48, 0x0c, 0x21, 0x90, 0x92, 0xc6, 0x69, 0x8b, 0x9d,
	0x34, 0x6d, 0xe2, 0x18, 0x03, 0x6d, 0xf7, 0x73, 0x76, 0x66, 0x77, 0xb6, 0xdd, 0x7f, 0xb6, 0xbb,
	0xdd, 0xfd, 0x4b, 0x4f, 0xb2, 0x67, 0x76, 0xd6, 0xed, 0xee, 0x76, 0xa7, 0xdb, 0x99, 0xce, 0xec,
	0xbc, 0x7b, 0xef, 0x7b, 0xba, 0xef, 0x49, 0x80, 0x62, 0xe3, 0xdd, 0xb2, 0xdb, 0x4e, 0x33, 0xe8,
	0xbd, 0x73, 0xce, 0x3d, 0xe7, 0x9e, 0xfb, 0x3b, 0xe7, 0x9e, 0xfb, 0xf1, 0x0c, 0x6c, 0x5d, 0xf1,
	0xde, 0xde, 0x78, 0xac, 0x21, 0xd1, 0x17, 0x4f, 0xc5, 0x69, 0x33, 0x7a, 0x5a, 0x55, 0x07, 0x1f,
	0xbb, 0xea, 0xbb, 0x85, 0x58, 0x7d, 0xf2, 0xb5, 0x70, 0x77, 0xb7, 0xd0, 0xf7, 0x4c, 0x3c, 0x91,
	0x8a, 0xc6, 0x63, 0xc9, 0x67, 0xc2, 0xb1, 0x58, 0x3c, 0x15, 0x86, 0xbf, 0x91, 0x94, 0xa3, 0x01,
	0x58, 0x3c, 0xb1, 0x48, 0x22, 0x1e, 0x8d, 0xa5, 0xe8, 0x4a, 0x50, 0xe2, 0xed, 0xa8, 0x31, 0xd8,
	0x0d, 0xeb, 0xac, 0x7c, 0x89, 0xb7, 0x83, 0xa6, 0x81, 0x31, 0x11, 0xef, 0x4b, 0xd5, 0x94, 0xd8,
	0x0d, 0xeb, 0x4c, 0x3c, 0xfc, 0xed, 0xf8, 0x59, 0x19, 0xa8, 0x74, 0xc5, 0x7b, 0x7b, 0xa3, 0xa9,
	0x76, 0x21, 0x15, 0x8e, 0x84, 0x53, 0x61, 0x7a, 0x0b, 0xb0, 0x74, 0xed, 0xed, 0x4e, 0x0a, 0xa9,
	0x68, 0x04, 0x09, 0x37, 0x3f, 0x2e, 0x72, 0x35, 0xcc, 0xf2, 0xec, 0xe5, 0xf1, 0xcc, 0xb5, 0x53,
	0xb3, 0x27, 0xce, 0x66, 0x6f, 0x8f, 0xcf, 0x5e, 0x3e, 0x29, 0x8d, 0x0c, 0x78, 0xdd, 0x07, 0xb7,
	0xf3, 0x2a, 0x33, 0xdd, 0x05, 0x40, 0x4a, 0xe8, 0x4d, 0xf4, 0x84, 0x53, 0x42, 0x34, 0x02, 0xb5,
	0x58, 0x9b, 0x5d, 0x22, 0xb7, 0x9d, 0xa9, 0x44, 0x42, 0x99, 0xb1, 0xeb, 0x99, 0x77, 0xee, 0x7a,
	0xdd, 0x6c, 0x9d, 0x34, 0x3c, 0x31, 0xdb, 0x3f, 0x58, 0x67, 0xcf, 0x5e, 0x18, 0x4b, 0x4f, 0x9d,
	0x93, 0x4e, 0x7c, 0x32, 0x73, 0xe4, 0x82, 0x74, 0xe3, 0xcd, 0xd9, 0x63, 0x63, 0x88, 0x27, 0x3b,
	0x7e, 0x3d, 0x3b, 0x72, 0x32, 0x73, 0xed, 0xd4, 0xcc, 0xc4, 0xc9, 0x83, 0xdb, 0x79, 0xa2, 0x59,
	0x7a, 0xc0, 0x00, 0x2c, 0xca, 0x63, 0x4d, 0x29, 0xd4, 0xd1, 0x23, 0x72, 0x51, 0xc6, 0x46, 0xea,
	0x60, 0x83, 0x8a, 0x06, 0xf2, 0xad, 0x74, 0xf2, 0x84, 0x34, 0xfe, 0xf9, 0xdc, 0xf4, 0x90, 0xf4,
	0xee, 0x54, 0x7a, 0xea, 0x5c, 0xab, 0xdf, 0x1e, 0xc4, 0x0d, 0x49, 0xd3, 0x17, 0x33, 0xe7, 0xcf,
	0xd5, 0xd9, 0x67, 0xaf, 0xf4, 0xcf, 0xdc, 0xbd, 0x3c, 0x73, 0x7d, 0x08, 0x8b, 0x4d, 0x7e, 0x37,
	0xf3, 0xee, 0xf9, 0xcc, 0xa5, 0x4f, 0xd3, 0xd3, 0xd7, 0x66, 0xfb, 0xc5, 0x83, 0xfd, 0xfd, 0xfd,
	0x06, 0x5e, 0xd5, 0x4e, 0x5f, 0x34, 0x00, 0x9b, 0xf2, 0xc0, 0xef, 0xef, 0x11, 0x6a, 0x8c, 0xd0,
	0x9c, 0x3f, 0x12, 0xb9, 0x18, 0x43, 0x93, 0x8a, 0x67, 0x3e, 0x38, 0x2e, 0x0d, 0xbc, 0x5d, 0xd8,
	0x28, 0x44, 0x5b, 0x90, 0x51, 0xdb, 0x79, 0x8d, 0x19, 0xf4, 0x1f, 0x83, 0xb2, 0xae, 0x78, 0x6c,
	0x6f, 0xb4, 0x3b, 0x59, 0x63, 0xb2, 0x1b, 0xd6, 0xd9, 0x9a, 0xf7, 0x88, 0x5c, 0x48, 0x71, 0x10,
	0x72, 0x02, 0xfb, 0x55, 0x64, 0xcb, 0xdc, 0x34, 0x6e, 0x55, 0x3a, 0xf7, 0xae, 0xf4, 0xc1, 0x19,
	0xd5, 0x43, 0xb3, 0xef, 0x5c, 0xd5, 0x68, 0x1b, 0xbb, 0x2e, 0x4d, 0x0f, 0xab, 0x3a, 0xeb, 0xec,
	0x7b, 0xc2, 0x49, 0xa1, 0xe9, 0x59, 0xe9, 0xf6, 0x7b, 0xd2, 0xf4, 0x30, 0x72, 0x8b, 0xa2, 0x92,
	0xee, 0x05, 0x65, 0x5d, 0xfb, 0xc2, 0xb1, 0x6e, 0x21, 0x59, 0x63, 0x86, 0xfe, 0x08, 0x88, 0x5c,
	0x07, 0x53, 0x83, 0xd5, 0x0c, 0xbf, 0x95, 0xb9, 0xfc, 0x3d, 0xe9, 0xb3, 0x71, 0x69, 0xfa, 0x68,
	0x66, 0x78, 0x78, 0xe6, 0xee, 0x47, 0xec, 0x33, 0x39, 0x4b, 0x6e, 0xbd, 0x35, 0x33, 0x7e, 0x23,
	0x3d, 0x39, 0x95, 0xfd, 0x70, 0xaa, 0xce, 0x9e, 0x19, 0x3d, 0x9a, 0x9e, 0x3c, 0x2b, 0x8d, 0x4c,
	0x64, 0x2f, 0x8c, 0x91, 0x02, 0x8a, 0x3a, 0xa4, 0x83, 0x6e, 0x04, 0x96, 0x2e, 0x88, 0xdf, 0x68,
	0xa4, 0xa6, 0x0c, 0xea, 0x5b, 0x21, 0x72, 0xb4, 0x0a, 0xb9, 0xe1, 0x91, 0xf4, 0xd4, 0x0d, 0x8c,
	0x53, 0xcc, 0xe6, 0x9c, 0x31, 0x88, 0x5c, 0xda, 0x00, 0x6a, 0x19, 0x1d, 0xf2, 0xd9, 0x15, 0xa4,
	0x90, 0x74, 0xe2, 0x58, 0xe6, 0xe2, 0x47, 0x99, 0xb3, 0xe3, 0xec, 0xa4, 0x81, 0xfe, 0xbe, 0xe1,
	0x75, 0xbb, 0x43, 0x01, 0xba, 0xc3, 0x69, 0x77, 0x34, 0xb1, 0x4d, 0x5b, 0xb7, 0x6e, 0xdb, 0x13,
	0xae, 0x17, 0xb6, 0x75, 0x35, 0xd6, 0x37, 0x36, 0x0a, 0xdb, 0xea, 0xb7, 0x76, 0xb1, 0x9b, 0xea,
	0x37, 0xb3, 0x9b, 0x9f, 0xdd, 0xb8, 0x71, 0xef, 0xb6, 0x6d, 0xec, 0x96, 0xad, 0x8e, 0x3a, 0xbb,
	0x23, 0x87, 0x5c, 0x59, 0x2a, 0x95, 0xe8, 0x89, 0x46, 0xea, 0x37, 0x36, 0x92, 0x14, 0xf9, 0xfd,
	0xeb, 0xaf, 0xdb, 0x1b, 0xec, 0x87, 0x0f, 0x93, 0xaf, 0xe5, 0x91, 0x84, 0x24, 0xf8, 0x16, 0x3b,
	0x57, 0x7e, 0x11, 0x69, 0xdd, 0x97, 0xe8, 0x3a, 0xd4, 0x2c, 0xff, 0xb7, 0xcf, 0xdb, 0xba, 0xeb,
	0xd9, 0xdd, 0x2f, 0x35, 0xbe, 0xb6, 0xa7, 0xb5, 0xf3, 0x79, 0x99, 0xad, 0x57, 0xe8, 0x8d, 0xcb,
	0x3c, 0xd2, 0x8d, 0x53, 0x99, 0x4f, 0xc6, 0x1c, 0x87, 0x1d, 0xa7, 0x4a, 0x41, 0x15, 0x2f, 0xf4,
	0x08, 0xe1, 0xa4, 0xb0, 0xf0, 0xf8, 0xde, 0x04, 0xac, 0x7d, 0xa8, 0x2d, 0x35, 0xbc, 0x91, 0xaf,
	0xa5, 0xe1, 0x37, 0xa4, 0xc9, 0x63, 0xd9, 0xc1, 0x81, 0xcc, 0x95, 0xef, 0x40, 0x99, 0x1c, 0x9f,
	0x66, 0x7c, 0x4a, 0x8b, 0x1b, 0x9f, 0x9f, 0x18, 0x44, 0xee, 0x6f, 0x0c, 0x60, 0x1d, 0xa3, 0x37,
	0x5d, 0x19, 0x20, 0xa4, 0x29, 0x37, 0x40, 0xd7, 0x0d, 0xf4, 0xd5, 0xf9, 0x0e, 0x90, 0x6a, 0xa9,
	0x2c, 0xb4, 0x65, 0xeb, 0xe6, 0x2d, 0x8d, 0x6c, 0xd3, 0xa6, 0x07, 0x09, 0x29, 0xa6, 0xca, 0x32,
	0xdb, 0xb6, 0x6e, 0x7d, 0x76, 0xcb, 0xe6, 0x07, 0x28, 0x3a, 0xec, 0xf8, 0x65, 0x09, 0xb0, 0x21,
	0xb8, 0xf1, 0x42, 0x72, 0x7f, 0x4f, 0x6a, 0xfe, 0xc3, 0xf0, 0x0c, 0x30, 0xf7, 0xc1, 0x26, 0xf0,
	0x18, 0x54, 0x8b, 0xdc, 0x72, 0x86, 0xce, 0x9c, 0x3f, 0x9b, 0xbe, 0x7d, 0x65, 0xf6, 0xc2, 0xdb,
	0x33, 0x13, 0x13, 0xe9, 0xbb, 0xd7, 0x33, 0x47, 0x26, 0x78, 0xcc, 0xe6, 0xfc, 0xb5, 0x41, 0xe4,
	0xfe, 0xd3, 0x00, 0xb6, 0x31, 0x1a, 0x03, 0xd8, 0xf5, 0xe4, 0x10, 0x64, 0x6f, 0x9d, 0xcf, 0x5c,
	0xbd, 0xb2, 0x0e, 0x25, 0xe4, 0xec, 0xad, 0xe3, 0x38, 0xe2, 0x21, 0x6d, 0xfd, 0xa3, 0x1c, 0x01,
	0xbf, 0x32, 0x02, 0x4b, 0xf3, 0xfe, 0x64, 0x34, 0x26, 0x24, 0x93, 0xf4, 0x5a, 0x50, 0xba, 0x47,
	0x75, 0x77, 0x95, 0xc8, 0xd9, 0x18, 0x4b, 0x7a, 0x72, 0x54, 0x3a, 0x7d, 0x1d, 0xba, 0x58, 0xa6,
	0xd1, 0xb5, 0xc0, 0x18, 0x0b, 0xf7, 0x0a, 0xd8, 0xb7, 0xcb, 0x44, 0x8e, 0x62, 0x6c, 0x88, 0x47,
	0x1a, 0x39, 0x9b, 0xfd, 0xe0, 0xa3, 0x83, 0xdb, 0x79, 0xc8, 0x40, 0x6f, 0x06, 0xa6, 0x88, 0x90,
	0x50, 0x51, 0xbd, 0x46, 0xe4, 0x9e, 0x60, 0x6a, 0x30, 0xe7, 0x6d, 0x51, 0xfa, 0xf8, 0xea, 0xec,
	0xb1, 0xb1, 0xd9, 0x4b, 0x63, 0xea, 0x24, 0x86, 0xb8, 0xe9, 0x8d, 0xa0, 0xac, 0xab, 0x4f, 0x08,
	0xa7, 0xe2, 0x7d, 0x78, 0xba, 0x78, 0x4c, 0xe4, 0x96, 0x31, 0x55, 0xd2, 0xc0, 0x65, 0xe9, 0xd6,
	0xd4, 0x4c, 0xff, 0x09, 0x55, 0x8b, 0xc2, 0x46, 0xb7, 0x00, 0x5b, 0x4f, 0x38, 0x99, 0x6a, 0x8f,
	0x47, 0xa2, 0x7b, 0x0f, 0x35, 0x1f, 0x82, 0x39, 0xdd, 0xda, 0xec, 0x10, 0xb9, 0x35, 0xcc, 0xe3,
	0x19, 0x79, 0x6e, 0x78, 0x23, 0x3d, 0xd9, 0x9f, 0xf9, 0xce, 0xf5, 0xf4, 0xdd, 0xf1, 0xcc, 0x85,
	0xcf, 0xc9, 0x26, 0x34, 0x72, 0x72, 0xcf, 0x64, 0xef, 0xe0, 0xac, 0x8c, 0x7a, 0x86, 0xdc, 0x84,
	0xf0, 0x22, 0xf7, 0x4c, 0x66, 0xa0, 0x9f, 0x03, 0xa6, 0x64, 0x4a, 0x9e, 0x5e, 0xe5, 0x7c, 0x6a,
	0x6a, 0x7e, 0x5a, 0xe4, 0xbe, 0xc4, 0x98, 0xb3, 0xa7, 0x3f, 0xcd, 0xf4, 0x1f, 0x61, 0x29, 0x94,
	0xa4, 0x37, 0xce, 0x4d, 0x8f, 0x66, 0x6e, 0x7e, 0x43, 0x9a, 0x9c, 0xdc, 0xbd, 0x04, 0xfe, 0xef,
	0xe7, 0x2f, 0xf2, 0x48, 0x88, 0x0e, 0x00, 0x2b, 0xb4, 0x5c, 0x88, 0x70, 0xa9, 0x1a, 0x0b, 0xd4,
	0xb5, 0x59, 0xe4, 0x58, 0xc6, 0x86, 0xba, 0x98, 0xb9, 0xf4, 0xe9, 0xec, 0xa5, 0xef, 0xb1, 0x0e,
	0xf2, 0x69, 0x6e, 0x7a, 0x88, 0xdd, 0xd8, 0xb8, 0xad, 0x7e, 0xe3, 0xd6, 0x7a, 0x76, 0x9b, 0xbd,
	0x71, 0x8b, 0xb3, 0x71, 0xab, 0x93, 0x65, 0xf9, 0x5c, 0x3b, 0xf4, 0xab, 0xc0, 0xba, 0x3f, 0x11,
	0xc1, 0x8d, 0x5a, 0x61, 0xa3, 0xed, 0x22, 0xf7, 0x55, 0xa6, 0x26, 0xdf, 0x01, 0x58, 0x41, 0xc3,
	0xbd, 0x28, 0xf7, 0x52, 0xa6, 0xb6, 0x4f, 0xd7, 0x03, 0x63, 0x78, 0x7f, 0x6a, 0x5f, 0x0d, 0x80,
	0x7a, 0x56, 0x8a, 0xdc, 0x63, 0x0c, 0x9d, 0x39, 0x37, 0x90, 0x79, 0xe7, 0xd8, 0xcc, 0xf8, 0x8d,
	0x99, 0x89, 0x23, 0x39, 0x77, 0xc9, 0x6c, 0x4e, 0x39, 0xfe, 0x00, 0xcd, 0xa8, 0x28, 0x63, 0xcd,
	0x08, 0x05, 0x8e, 0x0f, 0x4d, 0xa0, 0x94, 0x4b, 0x24, 0xe8, 0xa7, 0x80, 0x29, 0x9c, 0x48, 0xe8,
	0x70, 0x27, 0x4d, 0x5d, 0xc8, 0x5e, 0x18, 0x83, 0xb8, 0x43, 0xd4, 0x82, 0xc8, 0x43, 0x5c, 0x3a,
	0xe4, 0x61, 0x14, 0x97, 0xde, 0x07, 0xc5, 0x07, 0x01, 0x88, 0x08, 0x89, 0x9e, 0xf8, 0xa1, 0xe0,
	0xa1, 0x04, 0xaa, 0x4b, 0x4c, 0xcd, 0x2f, 0x8b, 0x5c, 0x27, 0x43, 0xcf, 0x1e, 0x1b, 0xcb, 0xde,
	0xfe, 0x6e, 0xf6, 0xdc, 0x84, 0xf4, 0xde, 0xb1, 0xec, 0xc7, 0xb7, 0xa4, 0xab, 0x67, 0xd8, 0x26,
	0xf2, 0x69, 0x6e, 0x7a, 0xc8, 0xbe, 0xd1, 0x69, 0x6f, 0x76, 0x05, 0xa4, 0xf1, 0xcf, 0xa5, 0xb7,
	0xc7, 0x10, 0xcd, 0x6e, 0x6f, 0x74, 0xda, 0x5b, 0x03, 0x9e, 0x99, 0xbb, 0x97, 0xb3, 0x63, 0x67,
	0xd0, 0xbb, 0xdc, 0xc8, 0x13, 0xba, 0x48, 0x7c, 0x9b, 0xe6, 0x87, 0x6f, 0xf3, 0x02, 0xf1, 0x5d,
	0x56, 0x34, 0xbe, 0x2d, 0x0b, 0xc6, 0xb7, 0x75, 0x31, 0xf0, 0x0d, 0x16, 0x17, 0xdf, 0x4e, 0x5a,
	0xe4, 0xaa, 0x40, 0x05, 0x23, 0x63, 0x93, 0x35, 0x23, 0x84, 0x39, 0x7e, 0x6d, 0x02, 0x65, 0xae,
	0x9e, 0xfd, 0xc9, 0x94, 0xd0, 0x47, 0xd7, 0x03, 0x6b, 0x17, 0xfa, 0xa9, 0xc3, 0xec, 0xec, 0xe5,
	0x93, 0xd9, 0x3b, 0x68, 0xb6, 0xce, 0x71, 0x14, 0xc4, 0x2d, 0xe2, 0xfc, 0xe2, 0xb8, 0x55, 0x43,
	0xc5, 0x78, 0xdf, 0x50, 0xd9, 0x06, 0x40, 0x9f, 0x4b, 0x35, 0xd1, 0x44, 0xc4, 0x29, 0x52, 0x9c,
	0x1d, 0xfc, 0x50, 0xb3, 0x7e, 0xc8, 0x31, 0x93, 0xf8, 0x34, 0xcf, 0x0f, 0x9f, 0x65, 0x0b, 0xc4,
	0xa7, 0xa5, 0x68, 0x7c, 0x5a, 0x17, 0x8c, 0x4f, 0xb0, 0x18, 0xf8, 0x2c, 0x5f, 0xe4, 0xfc, 0xfb,
	0x12, 0x30, 0xf7, 0x84, 0xf7, 0x08, 0x3d, 0xc9, 0x1a, 0x1b, 0xd4, 0xf4, 0xa2, 0xc8, 0x3d, 0xa7,
	0x40, 0x2a, 0x73, 0xed, 0x54, 0xf6, 0xe6, 0x1d, 0x76, 0x7d, 0x7a, 0xf2, 0xd6, 0xcc, 0x37, 0x8f,
	0xe0, 0xf5, 0xa3, 0x38, 0xe4, 0x72, 0xa5, 0x27, 0x6f, 0x4a, 0x1f, 0x1f, 0xcd, 0x4e, 0x7d, 0x80,
	0x56, 0x09, 0xd2, 0x91, 0x51, 0xb4, 0xac, 0x3c, 0xd8, 0x6f, 0xe0, 0x71, 0x73, 0x4e, 0x79, 0xa8,
	0xc1, 0x52, 0x46, 0x01, 0x3a, 0x6b, 0x46, 0x6d, 0x3a, 0x06, 0x4d, 0xc0, 0xf8, 0x4a, 0x3c, 0x26,
	0xd0, 0xb5, 0xc0, 0xfc, 0xf5, 0x78, 0x4c, 0xd0, 0xa7, 0xea, 0x1b, 0x1f, 0x48, 0x43, 0x53, 0x10,
	0x7f, 0x98, 0x5c, 0x38, 0x57, 0x43, 0xb6, 0x45, 0xc3, 0xbc, 0x26, 0x2a, 0x4d, 0x0f, 0x8c, 0xca,
	0xdf, 0xe1, 0xfc, 0xb7, 0x1d, 0xe7, 0x4e, 0xd9, 0x35, 0xa0, 0x92, 0x81, 0xd0, 0x63, 0xcd, 0x08,
	0x3e, 0x8e, 0x09, 0x13, 0xb0, 0xba, 0x60, 0xad, 0x1b, 0x10, 0x52, 0x70, 0xf5, 0xa4, 0x5d, 0x24,
	0x90, 0xab, 0xa7, 0x82, 0xcb, 0x83, 0x7a, 0x0d, 0x34, 0x71, 0x56, 0x24, 0xd8, 0x17, 0x0d, 0xa0,
	0xbf, 0x9b, 0xf9, 0x7f, 0xdb, 0x67, 0x7e, 0x7a, 0x13, 0x30, 0xed, 0x4d, 0x84, 0x53, 0xfb, 0x30,
	0xb4, 0x9f, 0x14, 0xb9, 0x55, 0xcc, 0x0a, 0x0d, 0x38, 0x6e, 0x8e, 0xcc, 0x7c, 0x36, 0x21, 0xdd,
	0x39, 0x7e, 0xb0, 0xdf, 0xc2, 0x23, 0x5e, 0xe7, 0x6a, 0x91, 0x7b, 0x1c, 0xac, 0x64, 0x72, 0xa8,
	0x64, 0x6d, 0xa4, 0x88, 0xe3, 0x5f, 0xcb, 0x40, 0x99, 0x0b, 0x6f, 0xfe, 0xcc, 0x03, 0xaf, 0x18,
	0x80, 0x25, 0xc5, 0x00, 0xb0, 0xb4, 0xf8, 0x0c, 0x69, 0x2c, 0xa2, 0x6e, 0x51, 0x92, 0xbd, 0xe9,
	0xfe, 0xc9, 0x9e, 0xdc, 0xc2, 0x30, 0x13, 0x9d, 0xca, 0x5c, 0xf8, 0x5c, 0x3a, 0x3d, 0x56, 0x68,
	0x0b, 0x83, 0xae, 0x07, 0xa5, 0x5d, 0xea, 0x86, 0x14, 0x5a, 0xd7, 0x93, 0xdb, 0x6f, 0xd9, 0x9b,
	0x77, 0xa4, 0x91, 0xb3, 0xa8, 0x83, 0x5d, 0xd1, 0x08, 0xfd, 0x2c, 0x28, 0xeb, 0xda, 0xdb, 0xdd,
	0x16, 0x8d, 0xbd, 0x8a, 0xb3, 0xe6, 0x2a, 0x91, 0xab, 0x56, 0xc2, 0x76, 0xe6, 0xfb, 0xc7, 0x33,
	0x53, 0x23, 0xb3, 0xe7, 0xef, 0x64, 0xce, 0xbd, 0x7f, 0xb0, 0xdf, 0xce, 0x2b, 0xac, 0x74, 0x13,
	0xdc, 0xe7, 0x4b, 0x09, 0x31, 0x84, 0x46, 0x5b, 0xf3, 0x13, 0x22, 0xb7, 0x52, 0x91, 0x92, 0xc6,
	0xaf, 0xa6, 0x6f, 0x9f, 0x47, 0xea, 0x0e, 0xf6, 0xf7, 0xf7, 0x97, 0xf0, 0x0a, 0x33, 0x19, 0xa8,
	0x60, 0x7e, 0x81, 0x5a, 0xbe, 0xc0, 0x40, 0xb5, 0x15, 0x1d, 0xa8, 0x15, 0x0b, 0x0e, 0xd4, 0xca,
	0xc5, 0x08, 0xd4, 0xaa, 0x45, 0x0e, 0xd4, 0xc3, 0xc0, 0x14, 0x8d, 0x45, 0x84, 0x83, 0x35, 0x14,
	0x54, 0xd4, 0x2d, 0x72, 0x11, 0x66, 0xb5, 0x06, 0x41, 0xa3, 0xc7, 0x67, 0xdf, 0x7b, 0x47, 0xba,
	0xf1, 0x66, 0x66, 0xf0, 0xc3, 0xec, 0xf7, 0xde, 0x93, 0xa6, 0x2f, 0xb2, 0xdb, 0x33, 0x83, 0x1f,
	0x4a, 0x1f, 0x5f, 0x44, 0x4f, 0x73, 0xd3, 0x43, 0xd2, 0x37, 0x8f, 0xa2, 0xb2, 0x68, 0xfc, 0x6a,
	0xfa, 0xce, 0x99, 0xec, 0xe8, 0x71, 0x6f, 0x07, 0xf2, 0xb2, 0x66, 0x37, 0x19, 0xee, 0xa0, 0x21,
	0x19, 0x39, 0x92, 0xa0, 0x56, 0xa7, 0x0c, 0x24, 0x50, 0xcd, 0x28, 0x61, 0xcd, 0x6a, 0xf6, 0x8e,
	0x1d, 0x13, 0x16, 0x60, 0x46, 0x3b, 0x49, 0x9a, 0xd0, 0x30, 0x14, 0x17, 0x1a, 0x0f, 0x2f, 0xde,
	0xc9, 0x64, 0x63, 0x2c, 0x36, 0xd9, 0x94, 0xc4, 0x13, 0x30, 0xde, 0x4d, 0xcd, 0x4b, 0x45, 0xae,
	0x92, 0xb1, 0xa1, 0x7d, 0x33, 0xb4, 0xf6, 0xe5, 0x4b, 0xe2, 0x09, 0x9a, 0x05, 0x96, 0x78, 0x42,
	0xe8, 0xcb, 0xab, 0x9c, 0x10, 0x23, 0x89, 0x6d, 0x95, 0x8f, 0xde, 0xac, 0x39, 0xf9, 0x28, 0xb0,
	0x0d, 0x8d, 0x4f, 0x3e, 0x74, 0x67, 0x19, 0x2c, 0x71, 0x94, 0x61, 0xc9, 0xa9, 0xd2, 0x1c, 0x65,
	0xe8, 0x0f, 0x1d, 0x5e, 0xd4, 0x9d, 0x39, 0x58, 0x73, 0x29, 0xa6, 0xc0, 0x99, 0x43, 0x81, 0xd3,
	0x01, 0x0e, 0x94, 0x27, 0xfa, 0x84, 0x03, 0x78, 0x68, 0x61, 0x06, 0xb0, 0xa1, 0xdd, 0xab, 0x15,
	0xd2, 0xe0, 0xd9, 0xf4, 0x64, 0x7f, 0x7a, 0xf2, 0x5b, 0x78, 0x83, 0x55, 0x4d, 0x1e, 0x06, 0x9e,
	0x94, 0xc1, 0x89, 0x07, 0x8a, 0x97, 0x3f, 0x30, 0xf1, 0x10, 0x47, 0x03, 0x4d, 0xb9, 0xa3, 0x01,
	0x94, 0x01, 0x34, 0x72, 0xf7, 0xde, 0xe3, 0xd7, 0x6c, 0x3c, 0x57, 0x14, 0xb9, 0xf1, 0xac, 0xe4,
	0x9a, 0xca, 0xa2, 0x73, 0x4d, 0x55, 0xf1, 0xb9, 0x66, 0xc9, 0xf6, 0x82, 0xb9, 0x86, 0x5a, 0x8c,
	0x5c, 0xb3, 0x74, 0x91, 0x73, 0xcd, 0x0b, 0xa0, 0xa2, 0x77, 0x7f, 0x4f, 0x2a, 0xea, 0x52, 0x02,
	0x99, 0x86, 0x0a, 0x6b, 0x44, 0x6e, 0x05, 0xb3, 0x54, 0xb7, 0x15, 0x0c, 0x9d, 0xac, 0x65, 0x77,
	0xae, 0x15, 0xb9, 0xd5, 0xe0, 0x09, 0x06, 0xa7, 0x04, 0x56, 0x41, 0x21, 0x91, 0x01, 0x1c, 0x73,
	0x46, 0x50, 0xde, 0x9e, 0x13, 0xca, 0x57, 0x69, 0xf8, 0x42, 0x2a, 0x1f, 0x62, 0x0e, 0x21, 0xa3,
	0xdd, 0x58, 0x64, 0xb4, 0xb7, 0x80, 0x4a, 0x68, 0x0e, 0xaf, 0x62, 0x12, 0x15, 0x10, 0x72, 0xa1,
	0xc4, 0x54, 0xab, 0xe6, 0xe7, 0x81, 0x53, 0x27, 0xb5, 0xb8, 0x1b, 0xb2, 0xf7, 0x40, 0xe8, 0xa3,
	0xb8, 0x21, 0xeb, 0x6c, 0x14, 0xb9, 0x06, 0x50, 0xc7, 0x90, 0x10, 0x62, 0x9f, 0xcc, 0x87, 0xd9,
	0x3a, 0xd5, 0xf5, 0xeb, 0x1d, 0x53, 0x16, 0x50, 0x86, 0x3d, 0x4d, 0x7f, 0x19, 0x94, 0x78, 0xdd,
	0x10, 0x62, 0xc6, 0xe6, 0xe5, 0x22, 0xb7, 0x94, 0xa9, 0xc2, 0xf9, 0x6d, 0x6a, 0x58, 0x1a, 0xb8,
	0x24, 0x0d, 0x7f, 0xc6, 0x97, 0x78, 0xdd, 0xf3, 0x3b, 0xdd, 0x52, 0x16, 0x5b, 0xa5, 0xc4, 0x62,
	0x8b, 0xe4, 0x2f, 0xbc, 0xd8, 0x32, 0x16, 0x83, 0x5b, 0x53, 0xd1, 0x73, 0x9f, 0xb9, 0xb8, 0xb9,
	0x6f, 0x1b, 0x00, 0xe8, 0xb7, 0x4f, 0xb6, 0xb8, 0xec, 0x41, 0xcb, 0x43, 0x82, 0x59, 0x9e, 0xdf,
	0x92, 0xa9, 0xbe, 0x70, 0x4a, 0xe8, 0x3e, 0x14, 0x8d, 0x60, 0x0c, 0x69, 0x9c, 0x73, 0xf3, 0xcd,
	0xec, 0xc5, 0xf7, 0xd1, 0xfc, 0x96, 0x63, 0x94, 0x35, 0xe2, 0xa7, 0xa8, 0x90, 0xc4, 0x28, 0xd1,
	0xf8, 0x08, 0x8a, 0xe1, 0xa9, 0x22, 0x27, 0x1a, 0x15, 0x92, 0xf3, 0xa8, 0x51, 0xc9, 0x52, 0xa4,
	0xbc, 0xb8, 0x52, 0x44, 0x5f, 0xd6, 0xda, 0x16, 0x58, 0xd6, 0x56, 0x14, 0x1d, 0xc8, 0x95, 0x0b,
	0x0e, 0xe4, 0xaa, 0xc5, 0x08, 0x64, 0x6a, 0x91, 0xa7, 0x9a, 0x17, 0x41, 0x39, 0x42, 0x55, 0x0b,
	0x5c, 0x85, 0x2e, 0x2d, 0x66, 0x15, 0x4a, 0x4a, 0x14, 0x48, 0xbd, 0xf4, 0x7c, 0x52, 0xaf, 0x5a,
	0xe0, 0xe2, 0x37, 0xac, 0x8d, 0x94, 0x70, 0xf4, 0x97, 0x01, 0x5b, 0x3b, 0x21, 0x50, 0x64, 0x06,
	0xc9, 0x37, 0xae, 0x64, 0x5e, 0xf3, 0xc2, 0xff, 0x5a, 0x52, 0xd1, 0x86, 0xb9, 0x79, 0x7e, 0x61,
	0x5e, 0x36, 0xcf, 0x30, 0xb7, 0x14, 0xbb, 0x14, 0xd5, 0x95, 0x0e, 0x28, 0xad, 0xd8, 0x45, 0xee,
	0x49, 0x66, 0xa5, 0x36, 0xd6, 0x89, 0xf9, 0x20, 0xbf, 0x84, 0xd0, 0xc7, 0x3e, 0x58, 0x60, 0xec,
	0x97, 0x17, 0x1d, 0xfb, 0xb6, 0x05, 0xc7, 0x7e, 0xc5, 0x62, 0xc4, 0x7e, 0xe5, 0x22, 0x4f, 0xe2,
	0x75, 0x22, 0xb7, 0x1e, 0xd4, 0x32, 0x9a, 0xc0, 0x62, 0xab, 0x49, 0x5c, 0x93, 0xf3, 0xf7, 0x3f,
	0x5b, 0x40, 0x39, 0x97, 0x48, 0x78, 0x63, 0xc9, 0x54, 0x38, 0xd6, 0x25, 0xd0, 0x9b, 0x00, 0x88,
	0xe2, 0xdf, 0xb8, 0x5c, 0x34, 0x22, 0x67, 0x57, 0xe2, 0x23, 0x52, 0xb8, 0xc8, 0xf5, 0xba, 0x79,
	0x82, 0xed, 0x11, 0xd8, 0x5a, 0x5a, 0x0f, 0x4a, 0x22, 0x5d, 0x38, 0xd2, 0x50, 0xc8, 0xe0, 0xa3,
	0xab, 0x2b, 0x53, 0x99, 0x81, 0xbb, 0xea, 0x01, 0x56, 0x49, 0xa4, 0x8b, 0x5e, 0x09, 0x6f, 0xf3,
	0xa1, 0xe8, 0xb2, 0x8a, 0x9c, 0x99, 0x29, 0xf1, 0x76, 0x1c, 0xb4, 0xc3, 0x8b, 0x7d, 0xac, 0x7a,
	0x60, 0x42, 0xee, 0x1e, 0x91, 0x8e, 0x41, 0x64, 0x39, 0x9d, 0x62, 0xce, 0x05, 0x6e, 0xbe, 0xff,
	0x21, 0x00, 0xc2, 0xde, 0xbd, 0x42, 0x57, 0x2a, 0x18, 0xed, 0x15, 0x70, 0xec, 0x6c, 0x17, 0xb9,
	0xe7, 0x65, 0xfb, 0xe5, 0xa1, 0xcc, 0x5e, 0x78, 0x37, 0x73, 0x71, 0x00, 0x83, 0xa6, 0x36, 0xff,
	0x5d, 0x9d, 0xbd, 0x10, 0x5a, 0x88, 0x36, 0xb5, 0x80, 0x2f, 0x5f, 0x0c, 0xc0, 0xdb, 0x16, 0x79,
	0xb2, 0x73, 0x2a, 0x3e, 0x72, 0xc5, 0x23, 0xca, 0x46, 0x16, 0x1c, 0x99, 0x15, 0xe9, 0xc9, 0x33,
	0xd2, 0xf0, 0x1b, 0x99, 0xc1, 0x0f, 0x66, 0xae, 0x0f, 0xa1, 0x1b, 0x3b, 0xd9, 0x6b, 0x47, 0x78,
	0x82, 0x9b, 0xfe, 0x0a, 0xb0, 0xa2, 0xa7, 0xf6, 0x64, 0x37, 0x8e, 0x4c, 0x38, 0x4d, 0xd6, 0xe4,
	0x8b, 0xe2, 0xcb, 0x3e, 0x39, 0x7e, 0x79, 0x70, 0xfa, 0x84, 0x9e, 0x78, 0x38, 0x02, 0x07, 0xa7,
	0x2a, 0x6f, 0x70, 0x10, 0x51, 0x3b, 0x38, 0xe4, 0xbb, 0x7b, 0x0c, 0x4e, 0xae, 0x4d, 0xda, 0xa3,
	0x68, 0x80, 0x5d, 0xa3, 0x60, 0xd7, 0x9e, 0x12, 0x39, 0x07, 0x63, 0xe3, 0xe1, 0x6b, 0x8c, 0x23,
	0x1a, 0xb7, 0x0a, 0xad, 0x45, 0x37, 0x8c, 0x78, 0x42, 0x90, 0x7e, 0x19, 0x96, 0xdc, 0xf1, 0x70,
	0x44, 0xee, 0x25, 0x2a, 0x06, 0x9c, 0x22, 0xb7, 0x85, 0xa1, 0x51, 0x2b, 0x68, 0x2f, 0x00, 0xf5,
	0x8f, 0x5d, 0x8b, 0x5a, 0x41, 0xfc, 0xd2, 0xe9, 0xb1, 0xf4, 0xed, 0x2b, 0xd9, 0xd1, 0xe3, 0xa8,
	0x51, 0xc4, 0xc8, 0xe7, 0x1a, 0x73, 0xca, 0xd3, 0x01, 0x78, 0x9c, 0x21, 0x53, 0x08, 0x6b, 0x23,
	0x03, 0xc2, 0xf1, 0x9e, 0x15, 0xd0, 0x04, 0x55, 0x99, 0xe9, 0x7f, 0x97, 0x67, 0x1e, 0x72, 0x9e,
	0x21, 0x17, 0x2a, 0xd6, 0xe2, 0x16, 0x2a, 0x9a, 0x95, 0x18, 0x28, 0x72, 0x25, 0xa6, 0xcd, 0x48,
	0xe5, 0x8b, 0x9d, 0x91, 0x6c, 0x8b, 0x91, 0x91, 0x2a, 0xfe, 0x47, 0x33, 0x52, 0xe5, 0xfc, 0x33,
	0x52, 0xd5, 0x82, 0x32, 0x12, 0xb5, 0xe8, 0x19, 0x69, 0xe9, 0x43, 0xc9, 0x48, 0xf4, 0xc3, 0xcc,
	0x48, 0x9b, 0x44, 0x6e, 0x23, 0x68, 0x60, 0x0a, 0xe4, 0x1c, 0xb6, 0x86, 0x8c, 0x20, 0xd4, 0x79,
	0xa4, 0xc2, 0xf1, 0xbe, 0x09, 0x00, 0x5e, 0x48, 0xc4, 0xfb, 0x52, 0xde, 0xd8, 0xde, 0xf8, 0x7c,
	0x4e, 0xd7, 0xe6, 0xb5, 0xab, 0xb1, 0x57, 0x13, 0x4b, 0x28, 0x63, 0xb5, 0x88, 0x9c, 0x8b, 0xa9,
	0xc1, 0xd6, 0xc1, 0x21, 0x5f, 0x78, 0x44, 0xe5, 0x2f, 0x98, 0x8c, 0xf3, 0x5a, 0x30, 0x69, 0x71,
	0x6d, 0x9a, 0x3f, 0xae, 0xcd, 0x0b, 0xc2, 0x75, 0xd9, 0x22, 0xe0, 0xda, 0xa9, 0xc1, 0xb5, 0x85,
	0xe8, 0x1a, 0x4f, 0x20, 0x99, 0xe8, 0x1a, 0x01, 0xe6, 0xaf, 0x90, 0x60, 0xb6, 0x12, 0x5d, 0xcb,
	0x17, 0x55, 0xba, 0x96, 0xc3, 0xeb, 0x06, 0x91, 0x5b, 0x07, 0x9e, 0x66, 0x08, 0xf8, 0x69, 0x71,
	0x9a, 0x9e, 0x3c, 0x9d, 0x39, 0xfd, 0x3e, 0xc6, 0xe9, 0x19, 0x13, 0xb0, 0x04, 0xf0, 0x82, 0x50,
	0xb7, 0x8a, 0x34, 0x14, 0xbb, 0x8a, 0x54, 0x67, 0xc8, 0x92, 0x07, 0xcc, 0x90, 0xf7, 0x5c, 0x1c,
	0xa3, 0x65, 0xa6, 0x76, 0x71, 0x4c, 0x9c, 0x91, 0x1a, 0x89, 0x23, 0x87, 0x02, 0x0b, 0x53, 0xf5,
	0xa8, 0x42, 0x7f, 0x46, 0x5a, 0xe4, 0x65, 0x86, 0xb5, 0x9a, 0xdd, 0xdc, 0x0a, 0x91, 0x03, 0x8c,
	0x19, 0x2d, 0x04, 0x1f, 0xd2, 0xc5, 0x5a, 0xfd, 0x8a, 0xd5, 0x32, 0xcf, 0x15, 0xeb, 0xa3, 0x7f,
	0x81, 0x51, 0x46, 0x31, 0xa8, 0x61, 0x54, 0xc8, 0xa9, 0xdb, 0x37, 0x70, 0x3c, 0x1d, 0x3f, 0x35,
	0x02, 0x10, 0xd8, 0x17, 0xee, 0x8b, 0x44, 0x63, 0xdd, 0xee, 0x66, 0xba, 0x09, 0x18, 0x23, 0xb9,
	0x5b, 0xdf, 0xc8, 0x5f, 0xd2, 0xc0, 0xc9, 0xec, 0xe0, 0x29, 0x74, 0xf8, 0x29, 0x4d, 0x9d, 0x47,
	0x90, 0x56, 0xcb, 0x20, 0xc8, 0x4f, 0x37, 0x00, 0xe3, 0xbe, 0x78, 0x52, 0xb9, 0x65, 0x0f, 0x83,
	0x6e, 0x99, 0x4e, 0x42, 0xa6, 0xcb, 0xfc, 0xf2, 0xbf, 0x32, 0x3f, 0xfc, 0xbc, 0xaa, 0x94, 0x08,
	0x52, 0x1d, 0x7f, 0xf6, 0xdb, 0x13, 0xd2, 0xf0, 0x37, 0xd0, 0xa7, 0x57, 0x74, 0x23, 0x30, 0xee,
	0x4f, 0x0a, 0xca, 0xb1, 0x03, 0x8a, 0x4c, 0x3d, 0xff, 0x85, 0xb1, 0xcc, 0xc0, 0x67, 0xd2, 0xc8,
	0x59, 0x1e, 0xb2, 0xd2, 0x4d, 0xc0, 0x92, 0x08, 0x27, 0x93, 0xaf, 0xc5, 0xfb, 0x94, 0x8a, 0xaf,
	0xa0, 0x1a, 0x69, 0xe2, 0xa4, 0x9c, 0x0b, 0x54, 0xde, 0xc5, 0xc7, 0xe6, 0xa3, 0x7f, 0xc6, 0x20,
	0x17, 0x0b, 0xc0, 0xce, 0x10, 0xc0, 0x61, 0x69, 0x84, 0x12, 0xe9, 0xe6, 0x5b, 0xd2, 0x51, 0x65,
	0xd9, 0xf0, 0xcb, 0x52, 0x60, 0x51, 0x58, 0xe8, 0x06, 0x50, 0xfa, 0xaa, 0x70, 0x08, 0x03, 0x0b,
	0x26, 0x96, 0x15, 0xa4, 0x08, 0x3a, 0x82, 0xdd, 0xe9, 0xd9, 0x2d, 0x2f, 0x02, 0x5e, 0x15, 0x0e,
	0xa9, 0x48, 0x2c, 0xf9, 0x82, 0x48, 0xdc, 0x06, 0xcc, 0x91, 0x3d, 0x44, 0xd6, 0x5b, 0x2b, 0x72,
	0xab, 0x99, 0x55, 0xa4, 0xaa, 0xf6, 0x43, 0x81, 0xaf, 0xb5, 0xd9, 0x23, 0xe1, 0x54, 0x78, 0x4f,
	0x38, 0x29, 0xc8, 0x85, 0x3f, 0x12, 0x50, 0x47, 0xde, 0x58, 0xc4, 0xc8, 0x9b, 0x16, 0x3c, 0xf2,
	0xe6, 0xc5, 0x18, 0xf9, 0xb2, 0x45, 0x1e, 0xf9, 0x2f, 0x89, 0x9c, 0x1d, 0xac, 0x66, 0xd4, 0x61,
	0xd5, 0x8e, 0x3b, 0x1a, 0x44, 0xc7, 0x5f, 0x1b, 0x81, 0x89, 0xdb, 0x1f, 0x89, 0xa6, 0xe4, 0xa5,
	0x94, 0xba, 0x17, 0x0c, 0xa7, 0x9f, 0xe5, 0xd2, 0xf8, 0xf5, 0x19, 0xf9, 0xff, 0x1f, 0x49, 0xb7,
	0x2f, 0x4a, 0x17, 0x26, 0xd2, 0x93, 0xfd, 0x5e, 0x37, 0xdc, 0x10, 0x6e, 0x04, 0x20, 0x19, 0xdf,
	0xdf, 0xd7, 0x25, 0xc0, 0x5b, 0xf8, 0x25, 0xc4, 0xad, 0x03, 0x74, 0xa7, 0x07, 0xdf, 0x3a, 0x20,
	0x98, 0xe8, 0xf5, 0xc0, 0x1c, 0x4f, 0x40, 0xf6, 0xd2, 0x7b, 0x5d, 0x52, 0xc0, 0x0c, 0xc5, 0xec,
	0xfb, 0x6e, 0x00, 0x16, 0xd4, 0xb6, 0x6e, 0x85, 0x88, 0xd4, 0xa3, 0x52, 0x51, 0x61, 0xa0, 0xeb,
	0xf2, 0x2e, 0x3e, 0x50, 0x22, 0x57, 0xc1, 0x58, 0x91, 0xf2, 0xf4, 0xd4, 0x94, 0xe6, 0x10, 0x74,
	0xad, 0xe6, 0xce, 0xdd, 0xfd, 0x81, 0xf5, 0xff, 0xf4, 0x9e, 0xbd, 0x9c, 0x9b, 0xc1, 0x0a, 0x06,
	0xe1, 0x86, 0xb5, 0x21, 0x98, 0xe0, 0x8a, 0xe9, 0x17, 0x26, 0xb0, 0x14, 0x5d, 0xa7, 0x50, 0x3e,
	0xf7, 0x44, 0xd7, 0x3d, 0x4d, 0xf9, 0x1f, 0x84, 0xa9, 0xb7, 0x3a, 0xb2, 0x83, 0x03, 0x44, 0x8d,
	0x6f, 0x2a, 0xfa, 0xfa, 0xdc, 0x26, 0x4d, 0xc9, 0x84, 0x3e, 0x54, 0xca, 0x6f, 0x54, 0x1a, 0x39,
	0x2b, 0xdd, 0xbc, 0xa4, 0x16, 0x4e, 0x9b, 0x34, 0x89, 0xe3, 0x5e, 0x42, 0xf8, 0xba, 0x86, 0x32,
	0xe2, 0xaf, 0x29, 0xf7, 0x0b, 0x11, 0xd8, 0xc2, 0x22, 0xf7, 0x07, 0x85, 0xa4, 0xd0, 0xe1, 0x0e,
	0xfb, 0xe2, 0xcc, 0xc4, 0xfb, 0xf9, 0xc4, 0xf4, 0xe4, 0x99, 0xb9, 0xe9, 0xa1, 0xcc, 0x60, 0x7f,
	0xe6, 0xca, 0x20, 0x7a, 0x2f, 0x2f, 0x2a, 0x06, 0x46, 0xf0, 0xa7, 0x7f, 0xa3, 0xc7, 0xb3, 0x03,
	0x9f, 0x2a, 0xa7, 0x43, 0x06, 0x7c, 0x47, 0x91, 0x7e, 0x4e, 0x7f, 0xdb, 0x19, 0x26, 0x57, 0xab,
	0x5a, 0xae, 0xb1, 0x94, 0xfa, 0x73, 0x6e, 0x7a, 0xb4, 0x37, 0xdc, 0x97, 0x24, 0x4b, 0x37, 0xbe,
	0xe0, 0xcd, 0xe7, 0x06, 0x91, 0xdb, 0xc0, 0x54, 0x65, 0xae, 0xf4, 0x4b, 0x23, 0xe7, 0xd0, 0xc0,
	0xa7, 0xa7, 0xa6, 0xd8, 0xc7, 0x74, 0x2f, 0x72, 0xcd, 0x69, 0xab, 0xac, 0xb5, 0x5a, 0xf0, 0x97,
	0x8b, 0x9c, 0x45, 0x01, 0xff, 0xff, 0x1d, 0x84, 0xe3, 0x3d, 0xfd, 0x7c, 0x24, 0xb3, 0x74, 0xfe,
	0xc0, 0x3a, 0x7e, 0x63, 0x05, 0x95, 0x5a, 0x4e, 0xdd, 0xc5, 0x29, 0x43, 0xa1, 0x8b, 0x53, 0xd9,
	0xc1, 0x81, 0xbc, 0x8b, 0x53, 0x45, 0x80, 0x5e, 0x0d, 0xa5, 0xd2, 0xa2, 0x43, 0xe9, 0x10, 0x8e,
	0x13, 0x04, 0x79, 0x41, 0xe4, 0xf6, 0x30, 0x9a, 0x6e, 0xa0, 0x7a, 0x9a, 0xfd, 0x6a, 0xe6, 0x4a,
	0x7f, 0xf6, 0xd6, 0x40, 0xee, 0xb6, 0xd3, 0x9d, 0x33, 0x99, 0x37, 0x4f, 0xa5, 0x6f, 0x61, 0x54,
	0x3e, 0x7f, 0x2f, 0xbc, 0x6f, 0xc8, 0x6f, 0x4b, 0x8d, 0xb6, 0x7a, 0x1c, 0x6d, 0xa6, 0xbc, 0x53,
	0x79, 0xc4, 0xae, 0x8b, 0xb3, 0xa3, 0x06, 0x25, 0xd0, 0xcc, 0xb9, 0x2f, 0xe0, 0xef, 0x1d, 0x68,
	0x0f, 0xd3, 0xe2, 0x5c, 0xcc, 0x35, 0xe3, 0xfa, 0x95, 0x88, 0x96, 0x5a, 0x52, 0x00, 0x85, 0x2d,
	0x52, 0x94, 0x1d, 0x3d, 0x9e, 0x19, 0xec, 0x97, 0x3e, 0xbe, 0x8a, 0x2a, 0x5a, 0xb9, 0x23, 0xb0,
	0xa0, 0x6d, 0x05, 0xa6, 0xee, 0xbe, 0xf8, 0xfe, 0x04, 0xae, 0x19, 0x1b, 0x45, 0xae, 0x81, 0x61,
	0x8a, 0x6c, 0x24, 0x7b, 0xeb, 0xb8, 0x3c, 0x76, 0x50, 0x9e, 0xde, 0x01, 0x40, 0x42, 0xe8, 0xeb,
	0x8d, 0x26, 0x93, 0xd1, 0x78, 0x0c, 0x9f, 0x69, 0xac, 0x13, 0xb9, 0xa7, 0x98, 0xb5, 0xf7, 0x6b,
	0xed, 0x9d, 0x63, 0xb3, 0x6f, 0x8f, 0xc8, 0xd8, 0xca, 0xc9, 0xd2, 0x6d, 0xc0, 0xb6, 0x37, 0xda,
	0x23, 0x78, 0x62, 0x5d, 0x71, 0xb9, 0x1a, 0xc0, 0x31, 0xf4, 0xc0, 0xb6, 0xb2, 0xd3, 0x6f, 0x66,
	0xaf, 0x1d, 0x91, 0xd3, 0x00, 0x29, 0x4d, 0xc7, 0x00, 0x10, 0x62, 0xdd, 0xd1, 0x18, 0x2a, 0x01,
	0xca, 0xa1, 0x5d, 0x3e, 0x91, 0xdb, 0xc9, 0xd0, 0xd8, 0xab, 0xf0, 0x23, 0x7f, 0xfc, 0x21, 0x5e,
	0x9d, 0x3c, 0x1d, 0x76, 0xc7, 0x7b, 0xc2, 0xb1, 0x6e, 0x44, 0x9d, 0x9b, 0xbe, 0x6c, 0x6f, 0x9c,
	0x9b, 0x1e, 0x4d, 0x1c, 0x4a, 0xed, 0x8b, 0xc7, 0xec, 0xbd, 0xe1, 0x57, 0xe3, 0x2a, 0x81, 0xf8,
	0xfc, 0x2e, 0xa7, 0x81, 0x4c, 0x84, 0xb6, 0x85, 0x27, 0xc2, 0x8a, 0x87, 0x99, 0x08, 0x2b, 0x8b,
	0x4b, 0x84, 0x8f, 0xe2, 0xc5, 0x06, 0xa5, 0x86, 0xd4, 0xa5, 0x37, 0xd6, 0x46, 0x02, 0xc6, 0xd1,
	0x6f, 0x06, 0x55, 0x0a, 0x69, 0x97, 0xd0, 0x07, 0xd1, 0xb6, 0x0d, 0x58, 0x0f, 0xa0, 0x9f, 0xf7,
	0x99, 0xf5, 0xc9, 0x5d, 0x3a, 0x95, 0xbb, 0x98, 0x24, 0xa8, 0x4d, 0xaf, 0xa5, 0xc5, 0xa6, 0x57,
	0x0e, 0x94, 0x63, 0x35, 0xbe, 0x5c, 0x3e, 0xcc, 0x2f, 0x01, 0x74, 0xb7, 0x11, 0x48, 0x19, 0xfa,
	0x59, 0x4d, 0x42, 0x83, 0xa7, 0xf3, 0x05, 0x64, 0x95, 0xdb, 0x9e, 0x06, 0xb5, 0x62, 0x54, 0x77,
	0x6b, 0x88, 0x69, 0xbc, 0x90, 0xd2, 0x42, 0xf7, 0xda, 0x09, 0xec, 0x97, 0x2d, 0x1c, 0xfb, 0x96,
	0x87, 0x89, 0x7d, 0x6b, 0x71, 0xd8, 0x7f, 0x24, 0x3f, 0x63, 0x62, 0x44, 0xae, 0x16, 0x3c, 0xc5,
	0xe8, 0xa1, 0xad, 0x2d, 0x01, 0xf0, 0xcd, 0x9a, 0xdf, 0x58, 0xc0, 0x0a, 0x6d, 0x8c, 0x34, 0x47,
	0x63, 0x30, 0x51, 0x16, 0xf1, 0x69, 0xfe, 0xe6, 0x02, 0x7f, 0x5f, 0xa6, 0x08, 0x34, 0x17, 0x79,
	0xf4, 0xa6, 0x89, 0x44, 0xe3, 0x17, 0x8a, 0xc4, 0x0d, 0xc4, 0xbe, 0xbc, 0xe6, 0xcb, 0x3c, 0x28,
	0xa9, 0xdb, 0x91, 0x67, 0xf3, 0xbe, 0x26, 0x41, 0x5b, 0x8b, 0x88, 0x19, 0x91, 0xec, 0xba, 0x8b,
	0x6a, 0x97, 0x4a, 0x41, 0xc5, 0x1e, 0xe4, 0xa8, 0x8e, 0x70, 0x5f, 0xb8, 0x57, 0xb9, 0x65, 0xf3,
	0xf3, 0x12, 0x91, 0xfb, 0x97, 0x12, 0x86, 0x96, 0x4e, 0x7c, 0x96, 0xbe, 0x7d, 0x3e, 0x7b, 0xeb,
	0x0d, 0x69, 0x7c, 0x54, 0x1a, 0x3e, 0x9a, 0xb9, 0xf8, 0x11, 0xfb, 0xe3, 0x12, 0xe5, 0x6f, 0x39,
	0xc8, 0x2f, 0x51, 0xe3, 0xe9, 0xc9, 0x73, 0xea, 0x47, 0x3c, 0xd9, 0xd1, 0xe3, 0x88, 0x73, 0x6e,
	0x7a, 0x08, 0x4d, 0x65, 0xf0, 0xaf, 0xad, 0x0c, 0x65, 0x47, 0x8f, 0x93, 0x75, 0xc2, 0xdc, 0xf4,
	0x50, 0xfa, 0xce, 0x19, 0xe9, 0x9b, 0x47, 0xe7, 0xa6, 0x47, 0x7f, 0xef, 0x75, 0x07, 0x3e, 0x7a,
	0x6c, 0x83, 0x67, 0x7b, 0x0e, 0xe7, 0xeb, 0x0e, 0x21, 0x76, 0x20, 0xda, 0x17, 0x8f, 0xf5, 0x0a,
	0xb1, 0x94, 0xc3, 0xe9, 0x38, 0xb4, 0x3f, 0x96, 0xf9, 0xfe, 0x99, 0x99, 0x89, 0x8b, 0xe8, 0x0b,
	0x71, 0x47, 0x9d, 0x22, 0xe0, 0x70, 0x3a, 0xd0, 0x09, 0x26, 0xeb, 0xa8, 0x73, 0x44, 0xba, 0x1c,
	0x4e, 0x47, 0x72, 0x5f, 0xa4, 0xcb, 0x71, 0xb8, 0xce, 0xf1, 0xf5, 0x78, 0x4c, 0x70, 0x38, 0xe1,
	0x3f, 0x8d, 0x8e, 0x3a, 0x47, 0xee, 0x54, 0x55, 0xe6, 0x39, 0xd0, 0xd5, 0x18, 0x6a, 0x64, 0xb7,
	0x84, 0x36, 0x86, 0x36, 0x86, 0x1a, 0x1d, 0x87, 0xeb, 0x1e, 0x68, 0x80, 0xbc, 0x96, 0x9c, 0x1e,
	0x7e, 0xb0, 0xf6, 0xae, 0x48, 0x9e, 0x76, 0xb6, 0x80, 0x76, 0x96, 0xd4, 0xfe, 0xfb, 0x07, 0xfb,
	0xaf, 0x99, 0x79, 0xed, 0x38, 0x90, 0x39, 0xc7, 0xb2, 0xf0, 0x9c, 0x63, 0x7d, 0x98, 0x39, 0x07,
	0x14, 0x97, 0x73, 0x1e, 0xc5, 0xbb, 0x15, 0xce, 0x26, 0x91, 0xdb, 0x04, 0x1a, 0x99, 0xc2, 0xb9,
	0x84, 0xd5, 0x4e, 0x18, 0x28, 0x2a, 0x4e, 0x7c, 0x92, 0xfd, 0xe4, 0x96, 0xe3, 0x73, 0x33, 0xb0,
	0xec, 0x0a, 0xf7, 0x45, 0xc3, 0x7b, 0x7a, 0x84, 0x62, 0x52, 0xce, 0x5a, 0x50, 0x7a, 0x40, 0x7f,
	0x24, 0x31, 0xfc, 0xd6, 0xec, 0xa9, 0x61, 0xc4, 0x72, 0x00, 0x1e, 0x48, 0x94, 0x61, 0x98, 0xe1,
	0x04, 0x53, 0xf0, 0x0b, 0x78, 0x85, 0x87, 0x76, 0x82, 0x0a, 0x0d, 0x86, 0x71, 0xaa, 0x81, 0xb7,
	0x0a, 0x35, 0xdf, 0x38, 0xcb, 0xb3, 0xa2, 0x96, 0x95, 0x7e, 0x0a, 0x18, 0x65, 0xa4, 0xe2, 0x1c,
	0x03, 0xb7, 0x86, 0x80, 0xfc, 0x22, 0xb7, 0x98, 0x90, 0x9f, 0xe8, 0x06, 0x60, 0x4c, 0xc9, 0xd5,
	0xa6, 0x39, 0xb7, 0x11, 0x6d, 0x43, 0x56, 0xa3, 0x3a, 0x33, 0x77, 0xb9, 0x0c, 0xf2, 0xd1, 0xeb,
	0xd0, 0x36, 0x66, 0x59, 0x5e, 0x32, 0x42, 0x42, 0xaf, 0x0a, 0x87, 0x94, 0x0d, 0xcc, 0x67, 0x80,
	0xe9, 0x40, 0xb8, 0x67, 0xbf, 0xf2, 0xb5, 0x0a, 0x5c, 0xa7, 0x2c, 0x25, 0x79, 0x21, 0xf5, 0x60,
	0x3f, 0xc5, 0x23, 0x3e, 0xd9, 0x14, 0x58, 0x06, 0x58, 0xf3, 0xbe, 0x6a, 0x43, 0xfc, 0x85, 0x0a,
	0x00, 0xcd, 0xb5, 0xdf, 0x05, 0x85, 0x53, 0xf9, 0xc3, 0x0c, 0x27, 0x5b, 0x71, 0xe1, 0xf4, 0x48,
	0xde, 0xcd, 0x53, 0xb6, 0x40, 0x95, 0xd0, 0xd0, 0xce, 0xdd, 0x68, 0xa8, 0x98, 0x9b, 0x14, 0x28,
	0xf3, 0xf4, 0xf5, 0xc1, 0xa3, 0x45, 0x0b, 0x30, 0x7a, 0x42, 0xfe, 0x9d, 0xd4, 0x12, 0xba, 0x1a,
	0xd0, 0x9e, 0x50, 0xeb, 0x4b, 0xa1, 0xc0, 0xee, 0x40, 0xd0, 0xd3, 0x1e, 0xea, 0xf4, 0xed, 0xf4,
	0xfb, 0x5e, 0xa2, 0x66, 0xca, 0x10, 0x81, 0x0b, 0xe8, 0x08, 0x7f, 0x5b, 0x45, 0xd7, 0x80, 0x65,
	0x90, 0xd0, 0xc1, 0xf1, 0x5c, 0x7b, 0x20, 0xe4, 0xf5, 0xed, 0xe2, 0xda, 0xbc, 0x6e, 0xea, 0xc7,
	0x55, 0xf4, 0x0a, 0x40, 0x41, 0x0a, 0xd7, 0x19, 0xdc, 0x11, 0x6a, 0xe1, 0xbc, 0x6d, 0x1e, 0x37,
	0xf5, 0x93, 0x2a, 0x7a, 0x39, 0xa8, 0x82, 0xaf, 0x7d, 0xfe, 0x20, 0x24, 0x79, 0xdc, 0xd4, 0xdf,
	0xe1, 0x66, 0x82, 0x1d, 0x6d, 0x3a, 0x05, 0x93, 0xd5, 0xf4, 0x4a, 0xb0, 0x1c, 0x51, 0x74, 0x1a,
	0x3e, 0xaf, 0xa6, 0x9f, 0x04, 0x35, 0x88, 0xc4, 0x7b, 0x7c, 0x6e, 0x0f, 0x1f, 0x72, 0xed, 0xf0,
	0xb8, 0x76, 0x86, 0x3c, 0x3c, 0xef, 0xe7, 0xa9, 0xa9, 0x6a, 0xda, 0x0e, 0x1e, 0x47, 0x64, 0x2c,
	0x12, 0x0a, 0x7a, 0xda, 0x3b, 0xda, 0xb8, 0xa0, 0x27, 0xc4, 0x77, 0xb6, 0x79, 0xa8, 0x5b, 0xd5,
	0xf4, 0x53, 0xc0, 0x7e, 0x1f, 0x8e, 0x50, 0x70, 0x77, 0x87, 0x87, 0x9a, 0xae, 0xce, 0x19, 0x87,
	0xf5, 0xe0, 0xce, 0xdc, 0xae, 0xa6, 0xd7, 0x80, 0x55, 0x88, 0xe2, 0xf3, 0x87, 0x5c, 0x6d, 0x9d,
	0x81, 0xa0, 0x87, 0x0f, 0x05, 0xfd, 0x98, 0x8f, 0xba, 0x53, 0x4d, 0x3f, 0x01, 0xaa, 0x55, 0x86,
	0x57, 0xfc, 0x3e, 0x0f, 0x41, 0xbd, 0x5b, 0x4d, 0xaf, 0x06, 0x2b, 0x55, 0xaa, 0xaa, 0x3a, 0xe8,
	0x0f, 0x35, 0x7b, 0x7d, 0x6e, 0xea, 0x07, 0x44, 0x07, 0x7d, 0xfe, 0xd0, 0x2e, 0x0f, 0x1f, 0xf0,
	0xfa, 0x7d, 0x2a, 0xf9, 0x87, 0x84, 0x6b, 0x7c, 0xfe, 0x10, 0xd7, 0xd1, 0xa1, 0x92, 0x7e, 0xa4,
	0x95, 0x24, 0x0c, 0x83, 0xe4, 0x3f, 0xa9, 0xa6, 0x57, 0x81, 0x15, 0x79, 0x66, 0x41, 0xda, 0x9f,
	0x12, 0x7d, 0x72, 0xf1, 0x1e, 0xd9, 0x1e, 0x57, 0x4b, 0x6b, 0xc0, 0x13, 0x54, 0x3a, 0xfd, 0x67,
	0x05, 0x18, 0xfc, 0xed, 0xed, 0x5e, 0x95, 0xe1, 0xcf, 0xb5, 0x9d, 0xc6, 0xd2, 0x41, 0x7f, 0x28,
	0xb0, 0xdb, 0xe7, 0xa2, 0xfe, 0x82, 0xd0, 0xdd, 0xea, 0x09, 0x86, 0x76, 0x71, 0x7c, 0x40, 0x91,
	0xfc, 0xcb, 0x6a, 0x04, 0xb3, 0x66, 0x3d, 0xcc, 0xae, 0xad, 0x41, 0x43, 0xd0, 0x9c, 0x07, 0xb3,
	0xeb, 0x6b, 0xe8, 0x8d, 0x60, 0x03, 0xa4, 0x60, 0x63, 0x78, 0x4f, 0x9b, 0x87, 0x0b, 0x78, 0x42,
	0x2f, 0x79, 0x83, 0x3b, 0x42, 0x9d, 0x3e, 0x97, 0xdf, 0xd7, 0xe2, 0xe5, 0xdb, 0x3d, 0x6e, 0x6c,
	0x25, 0xf5, 0xde, 0x1a, 0x7a, 0x2d, 0x78, 0x02, 0x49, 0x20, 0xbb, 0xb9, 0x36, 0xde, 0xc3, 0xb9,
	0x77, 0x87, 0x5c, 0x9c, 0xcf, 0xe5, 0x91, 0xed, 0xf8, 0x46, 0x4e, 0x9d, 0x42, 0xf3, 0xbc, 0xec,
	0x0d, 0x04, 0x03, 0xd4, 0x8d, 0x35, 0xf4, 0xd3, 0x60, 0x2d, 0xa4, 0xf0, 0xfe, 0xb6, 0xb6, 0x66,
	0xce, 0xb5, 0x33, 0xd4, 0xe9, 0xeb, 0xe8, 0x6c, 0x6e, 0xf3, 0x06, 0x76, 0x78, 0xdc, 0x8a, 0x72,
	0xea, 0xfd, 0x35, 0xa8, 0x27, 0xee, 0x76, 0x5d, 0x4f, 0x06, 0x6a, 0x51, 0xd3, 0xee, 0x76, 0x7d,
	0x4f, 0x06, 0x6b, 0xe9, 0x65, 0xa0, 0x12, 0x52, 0xe4, 0xc8, 0x68, 0xf1, 0x77, 0xfa, 0xdc, 0xd4,
	0xe9, 0x1c, 0xbb, 0xce, 0x92, 0x33, 0x39, 0x8a, 0x87, 0xe7, 0x43, 0xee, 0xe6, 0xc0, 0x0e, 0x8e,
	0x77, 0x7b, 0x7d, 0xad, 0xd4, 0x50, 0x2d, 0x8a, 0x3c, 0x77, 0x7b, 0xc8, 0xdd, 0x1c, 0xf2, 0xbc,
	0xec, 0x71, 0xc9, 0x1c, 0xd4, 0xd9, 0x5a, 0xd5, 0x24, 0x77, 0x73, 0xa8, 0xb3, 0xc3, 0x2d, 0x3b,
	0x4b, 0x26, 0x9c, 0xab, 0x45, 0xe3, 0xe5, 0x6e, 0x57, 0xc6, 0xaa, 0xcd, 0xef, 0xda, 0xa9, 0x8c,
	0xc9, 0x70, 0x2d, 0x02, 0x69, 0x8e, 0xda, 0xe9, 0x23, 0xe9, 0x23, 0xb5, 0x28, 0xcc, 0xe4, 0x0e,
	0x21, 0x37, 0xa8, 0x23, 0x80, 0x39, 0xde, 0xa8, 0xa5, 0x37, 0x80, 0xa7, 0x0b, 0xf4, 0xa1, 0xd0,
	0xe8, 0x88, 0xb5, 0x08, 0x5d, 0xb2, 0x3a, 0x34, 0x3a, 0xb2, 0x33, 0xbc, 0x3e, 0x6f, 0x30, 0x14,
	0x08, 0x72, 0x41, 0x0f, 0x75, 0xbe, 0x96, 0xfe, 0x12, 0x58, 0x0d, 0x19, 0x14, 0x3d, 0xb0, 0x91,
	0xd6, 0x00, 0xe1, 0xb6, 0x0b, 0xd8, 0x39, 0xad, 0x01, 0x8f, 0xce, 0xff, 0x3f, 0x6f, 0x40, 0x41,
	0x23, 0x53, 0x74, 0x03, 0xf0, 0x8b, 0x06, 0xfa, 0xcb, 0x60, 0x0d, 0x22, 0xb5, 0x73, 0x7c, 0x60,
	0x07, 0xd7, 0xa6, 0x74, 0xc9, 0xeb, 0x6b, 0x55, 0x7a, 0xf3, 0x6f, 0x0d, 0x08, 0x3e, 0xb0, 0x81,
	0xc2, 0x1d, 0xfe, 0xf7, 0x06, 0xe4, 0x50, 0x99, 0x45, 0xe9, 0xb1, 0x0a, 0x11, 0xea, 0x3f, 0x1a,
	0xe8, 0xc7, 0xc1, 0x63, 0x5a, 0xaa, 0x8a, 0xbc, 0x5f, 0x36, 0x60, 0xe4, 0xb9, 0xf4, 0x21, 0xf0,
	0xf7, 0x4d, 0xc8, 0x70, 0x99, 0xa2, 0x33, 0xfc, 0xa7, 0x4d, 0xc8, 0x70, 0x99, 0x74, 0x6f, 0xc3,
	0xff, 0xa1, 0x09, 0xe3, 0x5e, 0x6e, 0xa0, 0xb0, 0xe1, 0xff, 0xd8, 0x84, 0x0c, 0x97, 0x59, 0xf2,
	0x0d, 0xff, 0x59, 0x13, 0x32, 0x9c, 0xa4, 0xaa, 0x86, 0xff, 0x53, 0x13, 0x0a, 0x6b, 0x97, 0xdf,
	0xe7, 0xd3, 0x9b, 0xfe, 0x83, 0x17, 0x90, 0x20, 0xa2, 0xe9, 0x8c, 0xff, 0xe1, 0x0b, 0x08, 0x3f,
	0x58, 0xd0, 0xb5, 0xc3, 0xe3, 0x96, 0x33, 0x2f, 0xef, 0x51, 0xb3, 0xc2, 0x8f, 0x5e, 0x40, 0x3e,
	0xf1, 0x06, 0x5b, 0x75, 0x0d, 0x8f, 0xb5, 0x20, 0x9f, 0xc8, 0x14, 0x5d, 0xb3, 0x1f, 0xb6, 0x20,
	0x9d, 0x32, 0xa9, 0xdd, 0x13, 0xe4, 0xdc, 0x5c, 0x90, 0x53, 0x89, 0xdf, 0x6a, 0x41, 0x20, 0x93,
	0x89, 0x9d, 0xbe, 0x9d, 0x3e, 0xff, 0x4b, 0x39, 0x9e, 0x9d, 0x72, 0x12, 0xfc, 0x76, 0x0b, 0xca,
	0x9f, 0x85, 0x18, 0xfc, 0x1d, 0xd4, 0x77, 0x5a, 0x90, 0x2b, 0x65, 0x32, 0xce, 0x3a, 0x81, 0x20,
	0xcf, 0x05, 0x3d, 0xad, 0xbb, 0x15, 0xa3, 0x6f, 0xb6, 0x20, 0x98, 0x42, 0x16, 0xbf, 0x2f, 0x10,
	0xe4, 0x3b, 0x5d, 0x41, 0x35, 0x11, 0x63, 0xa6, 0xf1, 0x16, 0xd4, 0x77, 0x2d, 0x13, 0x4c, 0xc7,
	0x98, 0x63, 0xa2, 0x05, 0x05, 0x6d, 0x50, 0xef, 0xd3, 0x11, 0x1f, 0x9e, 0x94, 0xf2, 0x1c, 0xfa,
	0x86, 0x0f, 0xcf, 0x7b, 0xf7, 0x1c, 0x66, 0xd1, 0x87, 0x1a, 0xf5, 0xea, 0x1b, 0xfd, 0x55, 0x27,
	0xf6, 0x74, 0x5e, 0xa3, 0xff, 0xd5, 0xc9, 0x6c, 0x00, 0xe5, 0x2e, 0xf8, 0x27, 0x6c, 0x03, 0xb0,
	0x4a, 0xb2, 0x01, 0x8b, 0x2b, 0x10, 0x42, 0xd4, 0x25, 0x74, 0x25, 0x00, 0xae, 0x1c, 0xb7, 0x81,
	0xf9, 0x1a, 0xb0, 0xe1, 0xfb, 0x5c, 0x88, 0xbb, 0x1c, 0x94, 0xf1, 0x01, 0x18, 0xc6, 0xd4, 0x12,
	0x9a, 0x02, 0x36, 0x3e, 0x40, 0x00, 0xcb, 0x40, 0x57, 0x81, 0x72, 0x3e, 0x90, 0x03, 0x53, 0x09,
	0xbd, 0x14, 0x54, 0xf0, 0xb9, 0x14, 0xeb, 0x71, 0x53, 0xa5, 0xcc, 0x66, 0x40, 0x11, 0x97, 0xed,
	0x50, 0xb3, 0x14, 0xb0, 0x79, 0x7d, 0x81, 0x40, 0xc8, 0xdf, 0xd2, 0xd2, 0xe6, 0xf5, 0x79, 0xa8,
	0x25, 0x72, 0x4b, 0xe8, 0x8d, 0x0f, 0xbe, 0x30, 0x30, 0xcf, 0x23, 0xb3, 0xa3, 0x29, 0xd5, 0x10,
	0x17, 0x69, 0x88, 0x2b, 0x10, 0x52, 0x73, 0x10, 0x32, 0xc4, 0x45, 0x1a, 0xc2, 0x6c, 0x01, 0xc0,
	0x9d, 0xfb, 0x6b, 0x68, 0x00, 0x98, 0xdd, 0x41, 0x39, 0x00, 0xa8, 0x25, 0xf8, 0x77, 0x6b, 0xc0,
	0x43, 0x19, 0x64, 0x73, 0xd1, 0xef, 0x50, 0x47, 0x5b, 0x67, 0xab, 0xd7, 0x47, 0x95, 0x30, 0x0c,
	0xb0, 0x70, 0x89, 0x04, 0x52, 0x5a, 0x09, 0x00, 0xa7, 0xcc, 0x4f, 0xd8, 0x5b, 0x5c, 0x20, 0xe4,
	0xf6, 0xb4, 0x79, 0xe4, 0x67, 0x03, 0xd3, 0x00, 0x6c, 0xf8, 0x6f, 0x18, 0xa9, 0xfc, 0x2e, 0x1d,
	0xbf, 0x8b, 0xe4, 0xdf, 0x00, 0xac, 0xaf, 0xc4, 0x63, 0x82, 0xca, 0xfc, 0x8a, 0x8e, 0xf9, 0x15,
	0x92, 0xf9, 0x19, 0x50, 0xa1, 0x5c, 0xac, 0x51, 0x05, 0x02, 0x3a, 0x81, 0x00, 0x29, 0xc0, 0x2a,
	0xc7, 0x3a, 0x01, 0x01, 0x3b, 0x0d, 0x7a, 0x85, 0x14, 0xc1, 0x2f, 0x72, 0x32, 0xcf, 0x81, 0xc7,
	0xf2, 0x0e, 0x8d, 0xd4, 0x21, 0x72, 0x05, 0x35, 0xc2, 0xca, 0x9b, 0x9c, 0xf4, 0x16, 0xb0, 0x4c,
	0x27, 0xad, 0xaa, 0x0d, 0xea, 0xd5, 0x06, 0x49, 0xc1, 0xed, 0x60, 0x95, 0x56, 0x10, 0x6f, 0x56,
	0x11, 0xaa, 0x77, 0xe5, 0xa9, 0xde, 0xa5, 0xf3, 0x8e, 0x52, 0x25, 0xab, 0xde, 0xd9, 0xa5, 0xf3,
	0x8e, 0x46, 0xe0, 0xae, 0x01, 0x80, 0x40, 0xee, 0x80, 0xbf, 0x0a, 0x94, 0x07, 0x82, 0xa1, 0xe6,
	0xce, 0x80, 0xd7, 0xe7, 0x09, 0x60, 0x58, 0x04, 0x82, 0x72, 0x31, 0x46, 0x19, 0xa0, 0x67, 0xd5,
	0xa0, 0xa7, 0x4a, 0x64, 0xf0, 0x05, 0x50, 0x7c, 0x53, 0xa5, 0xb2, 0x2d, 0x32, 0x11, 0xcd, 0x5d,
	0x9e, 0x20, 0x65, 0xa4, 0x2b, 0x80, 0x15, 0xbe, 0x81, 0x13, 0xa1, 0x09, 0x4b, 0x2b, 0x15, 0x85,
	0x19, 0xab, 0x52, 0x12, 0x0d, 0x55, 0x46, 0x2f, 0x03, 0x55, 0x81, 0x60, 0xa8, 0xbd, 0xb3, 0x2d,
	0xe8, 0x55, 0xa4, 0x2c, 0xf4, 0x72, 0x40, 0xa9, 0x2f, 0x15, 0x59, 0x2b, 0xb6, 0xca, 0xe3, 0x73,
	0x53, 0x80, 0xf9, 0x2b, 0x03, 0xb0, 0xa1, 0x1e, 0xf8, 0xd1, 0xcd, 0x03, 0x59, 0x91, 0x3f, 0x88,
	0xfb, 0x8c, 0x01, 0xe1, 0x0f, 0xe2, 0x12, 0x81, 0x32, 0x40, 0xbb, 0xfc, 0xc1, 0xd0, 0xd7, 0x3a,
	0x3d, 0xfc, 0x6e, 0xaa, 0x44, 0x8e, 0x7c, 0xf9, 0xb1, 0xcd, 0x1b, 0x08, 0x52, 0xa5, 0x0a, 0x33,
	0x72, 0x10, 0x65, 0x54, 0x1b, 0x83, 0x21, 0x44, 0x99, 0xa0, 0xd5, 0xfe, 0xa0, 0x12, 0x64, 0xb8,
	0x1b, 0xfe, 0xa0, 0x12, 0xfe, 0x54, 0x19, 0x74, 0x84, 0x3f, 0xa8, 0x06, 0x3b, 0x65, 0x51, 0x35,
	0xf8, 0x5d, 0x3b, 0x29, 0xab, 0x6a, 0x0e, 0x2c, 0x3b, 0x28, 0x00, 0xbd, 0xe8, 0x47, 0x9d, 0x29,
	0x67, 0xb6, 0x02, 0x5a, 0x19, 0x7b, 0x4f, 0xee, 0xd8, 0xa4, 0x12, 0x80, 0xa0, 0x27, 0x18, 0x6a,
	0xf5, 0xb7, 0x71, 0xbe, 0x56, 0x6a, 0x09, 0x4d, 0x83, 0x4a, 0xf9, 0xb9, 0x63, 0x77, 0x70, 0x87,
	0xdf, 0xd7, 0xce, 0xed, 0xf4, 0x53, 0x06, 0xc6, 0x09, 0x6c, 0xca, 0xc8, 0x43, 0x99, 0x0a, 0x60,
	0xdd, 0x15, 0x0c, 0xb5, 0xb6, 0xf9, 0x9b, 0xb9, 0x36, 0x3c, 0xee, 0xb9, 0xb1, 0x33, 0xc8, 0x5a,
	0x77, 0xe1, 0xb1, 0x2b, 0xd9, 0x63, 0x86, 0x7f, 0x9d, 0x7b, 0xd3, 0x7f, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x80, 0xbf, 0x2f, 0xb3, 0xe3, 0x5b, 0x00, 0x00,
}
